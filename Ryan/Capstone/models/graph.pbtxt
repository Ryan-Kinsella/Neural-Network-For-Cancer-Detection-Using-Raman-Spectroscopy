node {
  name: "global_step/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "global_step"
    }
  }
}
node {
  name: "global_step/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "global_step"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/Assign"
  op: "AssignVariableOp"
  input: "global_step"
  input: "global_step/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "global_step/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "global_step"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "global_step/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "global_step"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond"
  op: "If"
  input: "global_step/VarIsInitializedOp"
  input: "global_step"
  input: "global_step/Initializer/zeros"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_RESOURCE
        type: DT_INT64
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_INT64
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "global_step_cond_false_55613"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "global_step_cond_true_55612"
      }
    }
  }
}
node {
  name: "global_step/cond/Identity"
  op: "Identity"
  input: "global_step/cond"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/add/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step/add"
  op: "AddV2"
  input: "global_step/cond/Identity"
  input: "global_step/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "normalize_element/component_0"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "\314\257\341G\007\264\262?=\254:\"\024\330\357?\n8\315\000\354\343\302?\2471@\363P\363\327?\212\207*\016\375\031\260?\\#\3768\314\335\265?M\323\266M0\035\260?\222v;\254\204/\302?\311cO\000\232h\333?\006\234\177\235\226=\300?y\006\211\304oP\263?\253\346P\276T7\317?\374Y\262~\301\033\317?!%\3624\313\253\307?\027?2\302\200\312\263?\244K\225\256\264\232\323?B}\034\344-\213\263?\253\244PA>\233\311?\236\316\357\335\341\324\256?N\347\t\322,\023\300?a\263\r\360e\241\276?E\017\024)\341\312\266?\003\374{r\022\237\261\277\304\377\256\263G\306\246?\010\t:\"+\264\273?\261\232\310{\276\256\266?\277\356-\022\376\370\301?\237C\2738a*\256?7\030R\2247\377p\277Z\322\373\r\255*\267?x\"\232\326,\353\230?M\312\276\332:\200\274?@\250SjkN\313?\372\323\270\312\"S\321?\350s2\224\272\264\272?e:\026\t\335M\313?\200M\202\251\3719\300?\246\263BzR\362\274?\322\n\023\023\302M\316?\220c\266\'\362k\275?\300E\243\022\t,\306?g_\370\017\211\005\304?\251\026\203\032\315p\312?\362*\r*\341\361\264?\341\257d\357\016\356\213\277\212H\330\255!\025\300?aA>A\222\364\265?\t\357f\236@\376\306?\311\256m\267H\315\255?\316\277-\275\325q\300?\177\326>\025\036\021\334?\\O\276\352\022\037\312?\035\315\274\025\274\332\320?\357\313aC\254(\340?\367D\203\206\221\355\300?\271\232\310\016\"\200\272?\250\353\242K\254J\277?~7\330\371\211\223\256?\265\0076\273\251\031\316?J}B>4\350\276?\334\302b\360\n\246\264? \213\007p\207A\276?+]\224\265Z\233\300?>6\217\344nG\324?\246\031\026\231<\"\325?i\360\025\3423G\306?\235c\020\275d\032\270?\365\274\210\2478\375\315?\321FZ\234\304\257\314?\374\322E\204+R\300?\234\016l\256\375\021\266?\376=\265P\353cq\277jN\2459\216,\325?\374\203*0\302\246\302?\022gk\233\347*\272?\351\334\265\320\n\226\327?\347\363T\376\352\356\303?\320\354\321S\230\002\317?\223=mM\355\236\265?\301Jp\260X\177\323?Rw!\372\016\016\321?\356Q\013g\257\245\277?w\376M%\214q\314?\240\315\017\373\2739\300?\271:\201b\304;\307?\232,\002$\031\000\313?\217>\263\022]\021\263?{}R\222\032?\310?\225uSX\026\375\300?\335?\007w\0266\344?\003\\?\346\3137\334?L\371\340\032w\201\303?y\007\277\247N\324\316?\212i\026\320Z\375\311?m>\263\306\316K\250?v@`\205^\226\320?ik\005\314\312\226o?\371\211\027\314\336\340\322?\014\263\264y:<\327?\372\301c\271QV\302?\207\267\314\2762\374\320?\016T|2\265[\250?Pp\261\242\006\323\262\277\027\375x\032\366\034\271?\365\252\226\300\"\211\305?\344t\006\004B\004\262?\256>\230\300\037\021\265?\260\007\242\r\021n\324?a\177#\313\223\265\300?\010O\346\364\3746\220?\265\253\225\253MS\320?\305\033\246q\000\341\242?\031K\031\267\037\220\216\277e\241.6\323;\325?\016)\374\325\300/\273?\353\'\340\372W\246\274?\255\365fPD\361\276?\3264H\361\214\236\303?1o\267\037N\262\304?\200C\227&[\023\303?h\320c\243\222+\326?\320\265\377f\001\221\234?9\225\322T\313m\301?\254)\204f\273h\323?L\nz\017\232\324\274?\376\004a\270\204M\304?-x\350\363\005\270\273?\214n\362\230\327J\316?\263\310\021\223\271\367\243?\'L\367\276\341\023\317?\237\031\217\025\246\266\307?\220O\327\371\010\023\261?\254tw\235\r9\314?\336\231H\352\266\244\261?\371\237\260O\366\222\300?\340w\355\201?D\324?x@\346\276-\274\262?\340`\201E\0047\276?=\273|\353\303\232\335?v\257:Bk\235\306?\302\013q\230\247\364\261?\022@%?\306\202\301?n\"w4\265|\304?\202\373>r$\375\312?\001\346\352_C\004\263?\222R\221\211\342\365\242?\352i\275hZ%\247?\321\r\221\366\346G\315?\366$\362U\331T\307?\356\361+\236\306\262\316?-jNc\035\274\265?W\324e\323?x\301?\024\n\317S6O\304?\264\215\206&e\337\273?\373\300\232r\241L\317?\002\336]\302\374\000\351?\324\3602e\325W\273?\217\342QgDb\300?\310\201\342\275&H\250?\356?y\362\305\353\265?\2707\"\214]\252\244?\222\300\247\270\370\373\264?=\221\377\200\t\'\326?\322\022\233\367N\230\335?\324\264`\351I\207\300?\352l8\224\360p\265?c\220w\353U\224\223?\177\353\300\302\024\250\265?\326U:\205\200\257\304?f\200H\025~V\270?\273Ib\002\344\017\334?\216\221u\003\310\032\340?\211uO\303\\\367{?k\231\346\377P\216\310?D\245\0213\373<\266? \341\237E\373\207\314?\222O\317\210\300[\323?&\006\273@\315\271\301?zu+\327\035\003\277?^B\027j\323,\276?~_O\200\320\226\215?wGE\352\335\202\327?w-\271;\177\233\255?\256]Y\360B\235\320?\226;u\335Bt\260?\217\376F$\322\002\311?\232JN\014\032\021\305?\272\324\323\n}\367\243?\032`+\020Y\376\274?uV\345$\217\005\245?j\020\261\204_\361\310?2\260wG\022\371\301?\007~z\212!\333\251?\037#\\\245\024d\315?"
      }
    }
  }
}
node {
  name: "normalize_element/component_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "g\360\2056\361\357\265?\344\343\277\262e\350\320?[\345\215\274A\356\261?\362\017\002\302\354=\243?FZA\013\275\211\273?\237\001\251\330\216e\267?\206\t\221v\035V\244?\340LV\211\325\306\276?\375\021\n:\357\371\313?\271\023$j-\302\271?\245\3156\014&\313\262?\241I\365\254\212\201\306?\231\260G\362\246l\273?\000ak\254\200\037\274?\3348\023\347i?\274?\325W\374K\367\337\310?\241\202Vo\363\227\275?\300\352?\240p\014\301?\366(k\272\357/\272?\021\033sq0\350\300?\346=1_\034\344\263?\000\320\204\315\320]\264?l\r\230\314 \332\275?\325\320\020\322v\363\260?\316oVL\276\274\261?\253\326\345;\310P\256?O\266\341\255|a\267?o\"#5\'\216\262?\326\254\320\223t\305\251?\3041\261J\000\266\274?\273]l\260)=\261?\267D\354\033\261\371\273?J\3238\205\251n\265?\363\206\221\344\r~\301?TUBY\363A\277?\300sna}\006\272?\374\021G\235\007\227\270?\017\304L\267\371\272\266?\253G\211y0K\302?s\363]\257\210\030\255?5\271\321-_\312\307?br.\273\343\361\301?\203\234\222\324\213\337\300?3\037\262vKZ\260?\353s\374\352\206z\240?\'\260\371\353\'\371\277?\213\270\347\226\251\013\263?\271@\204\343\362\322\261?\337\322\023\221\277\006\261?T\276\261\261\\\000\274?\267\331F\246\275-\323?\227(\311\332\251\360\306?\3523\002R\344\016\313?I\305n\273\252\225\317?\037\357\324\252\375 \261?\254G\373\316\030.\263?\235\305\3050\253\240\264?\022\030\222cPE\234?;\211\037\233\2309\267?\000d\305\311-H\250?\367\322X\036Ko\301?OI\371\360\374\207\303?\376\255\203\324\004\311\300?\034\337#\nI\300\266?\345\321\021\351L\024\303?\371f\316\014x\037\250?\2209\307gO\325\275?\017\336\027\312\233\331\303?e-\177j.J\275?\316\320\306\261\370\004\300?J?e%{\276\274?\266O\321\325y\373\221?mj\311x\316\325\322?<e\351\316\t\035\301?p[&\206\216d\251?I\201\034\314\332\321\323?}A\250\336\\\364\272?\236|\2403n\014\264?\347\332\010\245\336<\262?\'\305s(\326\370\316?tb[{\251\\\303?L\307d\275\215W\302?d\\/U\202\350\306?i\207\326\302\340\245\276?`\334H\004\243E\266?\220\3173\017\303;\266?\034\337\213\355\275\021\260?\347\267\221\255\214\030\304?\004\307\206\352\275\343\261?\263~\177\277\242_\330?u^&4\220\301\315?@\311\236\266\246\366\276?2\270\336\035\266\200\310?o_:\277\276\334\275?\235\302z>+\262\262?D\356\245\315\221E\260?\3278!\310\317\263\241?\254=\366\367u\307\313?\372\005wD\336\"\303?\302&\223\234\021z\300?Z\260\243]\304\370\303?\336\035\322\325AQ\256?\220\317^\217\037\360\304?I\016Er\023d\257?\'\r&\337\033\354\304?Z\330J\035!\331\271?2\177\0321\222\301\263?\005C\365\215\352?\323?/}\202\240\260\377\263?\226\210\224\277\253\000\260?\276\352\010\255u\014\312?<\203\344o\013\256\271?-\230\327\225\277\020\264?\010e\271#\236\027\313?\231\207[$>\016\272?)\223\364\022^`\266?\027U\347\232\3076\301?u\200\324\3441\234\275?\265\265<\021\357\371\274?\200\235\204\232m\243\304?\030H\314\303t\'\303?e>4\264\200W\271?Z\266P\3369\'\261?\361\344Q,\342\024\322?]t\313q\033K\275?\307>\320#\251\371\277?i\001\332V\263\016\300?`\323vXP4\251?#z&\357t\313\275?\246\220\022X\214|\301?n\'\024\231\3562\270?\2146xsy\362\272?+\235\034\371\024\344\247?\021\311S\000\323<\274?\017\3610icW\262?\276\325&\215R\373\307?\361&\326\341\234\234\217?\336\220\372v\010\037\264?\347\303\312\240\216\222\325?\366\022\206\250\222\346\262?\024\214si6\256\304?n\363\032I\357\014\303?\'\220\363\255\370\016\303?\340\376\226\337\355\352\310?\243\315v\'\315\326\275?\006u\333\317s\325\265?\273\027\305\226\021#\257?\337\t\002\323\205r\300?\004\262~\003\370F\273?\306m\t\000[\214\307?\2671MC\0326\261?r\264\345\207\n\310\300?i\374P\326`\273\311?\342\335x\024:\361\277?6\033h\224\347\'\302?\376\010!\362&\227\326?\243\345\255\253\343\'\276?a\351\232\316\360T\300?foTg\3501\266?\022\332B\365\256x\267?\031_\324\036\221\027\252?\316c\350f\354\374\300?\205\274 M\265I\264?\027\361\303_\230\356\313?\r\315\366\232~\006\272?l\376l\237\346H\277?\027\257\344\360j5\263?B\367\003#\321y\277?A\372\351\351j\205\300?\177A\177_+\272\270?\214\212\303\217\355\331\270?eaM:\321;\320?\336[p\212\267\343\267?\342ae*\200\006\275?\330\302\233Q\315\016\261?.1;0%7\307?\244O\314\366\370o\272?\267\275m>_\307\246?\025\024\227\307\300\330\266?\215\261\016\245\310\352\271?\246\031\372C\r\210\242?3\336\271\244(\337\315?\254\377\202\303\\\351\265?\327\244i\275\320\275\307?WZ]\206\263\346\272?\325\2671\025\231{\311?\375\255\353\267yZ\270?_\222\322\205\273\'\256?\213\275\037\320\374\336\303?\030\222!4sb\247?\324\030\034A\004~\264?\200\037\267Z\205\237\306?N\356\337\013\177E\262?\310\357!ln\010\310?"
      }
    }
  }
}
node {
  name: "normalize_element/component_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "\r\2312=O\246\264?0\256D\342\026\272\321?\350:_|i;\260?\232\321Mj\201\240\240?a\370N\355\210\232\272?\344\r\337\253\036\374\263?\256\366R\246\010\330\241?\321$Nz!\025\272?\373\344\220#\211\235\310?H@W\353\\\202\270?\000\213\350\026;\223\257?\300j\0335\025\030\274?\351%3\317+M\263?\337\266r\323\277\324\274?\303\006\016\337\367\254\272?R\367\243\326k\342\305?J)\0300\251#\275?7\262oJ u\276?\241x0\212gN\267?m\244\007f\3168\300?\016\351\231Y\251\362\262?\002\377\233\3445\231\263?\321\002cfg\235\271?\007\220F\252\224C\246?\"\373\322;\022\270\255?T!N\302\255\004\254?\314Q\352\0148\275\264?\2744F77\260\257?\303\200l,=\247\245?$\350\360\217E\272\272?5\014\233\330\256\026\261?\206I\206V\006\331\272?y@/\225\344$\266?\340\377\357\321\340\213\277?9\302\210\316I\247\275?\223\n\242o\204%\261?\247\377\337\352\226\243\272?\004\322\240\226V\253\266?TA\361\325!\006\304?\r\253f@7\340\246?%\241Zh\332J\311?Ee\254\376T\221\300?\270\346BpR\324\275?t\251\005\207\373\356\261?9\275\2730\372S\200?\321\007\216u\270p\275?L\265w\2171\314\260?Nk3K\213\305\263?\350\277\360\022\350\210\260?5\343\312_u\362\271?6~\215\226\226 \323?oZ\254\205\262 \303?\207\375x\221\004\277\307?\371t\000\272\353\t\313?\327\025\r\3738\370\247?\023\361,\372p4\264?\304\361t\225\213\004\265?\340\364Y^\354\317\225?:\014\222\260\002\013\266?\311\211\007x\370\211\250?\207T\247\274\203\003\301?\254Gc\262\215\277\301?\035\244!\217R\034\277?\001\252\260\000C\342\265?4_\002\020\247.\304?\363\330)e8\357\256?\037\363n\035\375\336\271?\016\010\332\010\267\301\303?\033\304g\350(R\270?\207B\357\200\367\375\275?\241\177\2725t)\273?\264A`\304\3029X?O\032G\005~/\322?\252pM\177\313\343\300?cP\\D\312\005\254?n%\3434\036\016\324?\342\010\255\342\350\205\271?\027\225\305\336:h\261?\324\361m\001n\004\261?vf\"o0I\314?\372\025\252\034\014\325\301??\201z\252x`\276?<\264\331\242\026\024\306?\'\363\307h\250\307\273?\215\026`R\216_\263?\364MD\006\214\n\256?Nw\324!\002\321\256?@\276\257\212j\343\301?45\333\245\245\243\257?^C\003\300\227\363\326?\0064\227o\013\203\320?\222\334\246\347\371\255\273?\013-\270\r\r\005\306?\342\001V(\201\266\274?\353\014QZ\277f\257?ozu`\311\355\255?\377XbG\336\227\242?$\017\007\263P\305\311?@\\\232\244\367\"\300?\363\345rtva\274?\272\344\001*\361\000\300?\353KPrp\261\253?Q8\365`\3264\303?\234Q\334\271|`\243?\357XK\205\241c\305?\022\332r.\305U\271?\315\263P:\252\375\260?K\232yQ?\330\320?\315\350\034C\315~\264?5u&\206G\217\255?t~\231\016\356%\311?h\307\255Lo4\266?\254$^\020$~\262?\242\370pJ\362\274\312?O]\330\036\346\340\270?(\325i\235\353\r\272?\t8\271\034\005A\277?B(\226+!\367\273?\034\210\251P\204$\271?#\031\370\245\014\t\303?}\322\271=ij\300?U\375\177\331\223y\267?{4\223w\'\002\262?\331\3073\375L<\321?\325\201\033E\260\323\276?!9HqVP\300?\255\222\021\025\177[\300?h\302;h\2222\243?\3125\271\243\365\363\275?\002\2571\020M\236\276?\014\221f;\305\373\266?\250H\2560\267\332\271?\333\013<_\002\243\243?\235\"Ck\236S\271?\016\332\217:X\204\267?\020\2025\236m\215\306?\364\362\314\257\014\310\231?\312\020\210Vuv\262?h4\221P5\205\323?E\326\345W\035\000\261?\320\017\273\240\322\211\303?*\223T\205\212Z\301?\300\232=\257\374b\301?\305\311\261\200\377)\307?\262@\344\302\273;\277?\251\033 \177\006\'\266?\362\200\027U=\033\260?\330:\020\020\316\322\277?\207\271D\370\216\317\270?8\354\r\252L\362\306?\224\343\251\242\323N\256?;\265\315i#\022\277?(TL\262\311\262\307?P\n\021u\301N\300?\254\367\232l\243\004\272?\376\326\312[\340\330\327?\223\016\324\376\016\022\272?n\365\377\036zZ\276?{\037N-I\210\264?Pc\202\347\314\340\221?\330\322\272E\024\036\254?X\016\314\210\r\301\300?\027\3769\360]\217\252?\365N\201\243Oq\312?\001\177Vk\361\301\265?y\274\373\251\022\341\276?q#\334\231F\351\256?\025e\200U?\000\277?\026\341\206\025\367\352\277?|\\t\342\r\021\270?\025\260\2536\360\204\265?\177\325\202\370o\007\311?\337\360\260\300\277W\270?\\\020_`5\032\271?# d\373\276\357\257?\306\327\246\312Z7\305?\330\236\027\366\315`\272?k\223\215~i\216\240?);\315g\030\365\263?\027\206\225\370Fn\271?\"\275\260N\370\031\244?\225(/\275\363G\312?\346;\201{a\\\263?\207\232A\254\231\235\306?\263\001\001\000:+\273?\002w\323?\036\000\310?=p\211\264qj\265?\006\244\237\236\256V\254?\002[\266\272\302\331\305?\276H\240u\030\211\245?t\242>x\326\266\264?\017\010\007\212>\260\305?\215\016\236\302w\206\257?\236\032S\243\234W\306?"
      }
    }
  }
}
node {
  name: "normalize_element/component_3"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "\005\3014#\273\206\274?J\232N\321\342c\305?\277\271\025{\225\240\240?\217\227.\367\3334\252?\234\334\357P\024\350\263?\021\377\3743\215\352\272?\3062\220v\302\234\262?\277\027\307\227<\335\234?\204\324Z\211Z\211\300?n\217\035\325b\320\264?\212\365\001\331\317\210\302?(W\314\226\031\247\276?\313\320\302\257\242\320\305?6\246\331\234\200\257\305?\2224\243\022\343$\260?\203v\361\370\242\257\277?\245\277\023\212\337\332\253?\304\013\352\247t:\300?b\360\027P\373o\274?n\224\265\200\342]\272?\317\346\272\356\202H\302?\026\207\233\242\017\325\266?H\273\234\325\254z\267?\022\017\024\267\213\342\275?\232OST\310X\244?\212i7\336C\340\264?7\007&<Cf\272?W\341H\0004\323\276?\241}\230\374\320\376\277?\216\313FT\231C\265?\262\227OQS\235\277?\205\364\341G\237\320\250?\276\234\317<]\266\272?\231\220\324\027I\010\300?F\210\002\350\275\322\263?\333\203\006\036\274\317\267?_\227\375\224\014{\267?t\250F\262\276\266\265?\261\026y;\2750\260?\353|\226\354z\027\273?\366X\273l\302]\273?\234f\373<\270\316\242?.\342}M\275K\302?\001\367\251\033\t\343\311?1wD\275\224E\264?\033\206\345\210\342y\266?\002\261\353e{w\274?;G.I\257\027\277?\276aB\317\335\343\273?\245!\2436\203\225\300?Y\036\2346\200\312\311?\345D\315\355\344\'\266?/\272\\\307/q\270?\220\375\262\317\361\276\317?\241\354\337U\014\340\302?\261\273,e\232\342\262?\322_}v\237\347\300?\344\315\000h\253J\272?\221l\333\033ow\300?\213\246g\005|:\315?\005\323\245\211\273\035\273?\205d\311hY\001\272?\317\036\254\"\203\254\301?l\016\347L\240\251s?ni\276\025L\246\237?\014\010\226\353\271\301\303?C\026v\014 `\275?l\'p\t\305\370\272?D{\333\235\314\367\263?\264jB \270F\301?\251t1\177\345>\266?d\334D\225\260\"\273?\273_Q\206\264\312\303?\306Q!m\317\353\262?Z\270\351%\177]\270?mp\253\353\023j\300?\316\n\211\327\234S\257?3\314M\367\341\360\274?\332\235b\223\004\372\250?\272G\265\326\267\026\311?\027\265\010\200\202\257\302?p\234\225fS+\265?\316\t--\033\204\255?{\202\224=\341#\271?\352\\G\330\224\204\262?\371\023?\r\262\201\302?\233\001\267\271\364\331\260?D(\034e\360<\303?\356\343\221\r\336\366\301?\205\313\377\353\251C\271?zR\325\355\264A\312?\354\215,)\017\274\272?j\334\342\264\274\177\262?\376\036xYl\303\271?v\227^w\307\035\262?\302\032Z\251\017\300\307?\tiS\226\235\025\300?\201UD9\020\223\264?\005EBG\352\376\300?0\357\251PhO\274?a\355l\353N\307\265?\261NN\032\216Z\270?\375y\241 {\364\304?\327\035\312\321\225h\266?\343u\002<\227\031\300?T\257\232h\t\222\226?\247\002\223\300\213\343\276?#?\"sSm\302?\207\355\301\2002\201\266?\376\242\321\013\341\022\273?I\320 \204\316\213\276?\305yB\363\\\206\275?\005\275D\260\002\340\272?k|\366\301\321\214\275?\374\341O\243|@\303?\254r\3629\257%\302?n5~\360\300Q\271?\235\350\004~\236P\271?\204\335\020\340} \261?\245\334ncb\334\266?y\254\017\247p\235\303?\375B\336^\021\275\300?U\341\275\r\253\244\273?\301<s\365\264\332\310?\032\362\261\266\207\017\313?\334\353I\005\272\233\303?|B\343z\365\240\273?=\010d#\316\222\244?\326\261\252[\306\030\241?\241+\334\265.<\306?\016Q\333?|\304\311?XY\236\261v.\267?z\220\0230\376Y\306?\033c\340\346x\370\274?\257\247\312\265pr\252?\016\200\365\016pn\275?\257\254\372}{.\272?N\"\263\224\333_\261?\325\3165n_w\313?\325\004&w\245S\245?\215s\236(>\373\300?\311\244\027\231\246&\274?G\306\303\253GB\265?\326iI\354\177%\262?&\tR\301\222\277\253?\305\310 \344\255\324\224?m\"\211\027q\245\300?E\027\016cV\230\276?\177\031\301\003Y\010\276?\256\353\010\301Y\263\261?u\312,\r\277E\267?|Tk}k\t\272?T\255\035v\363\025\273?\370\350\276\260\275\025\261?\346<\361\t\312\016\300?\271\232Q\000\200t\317?:;\303\033l\306\247?\026\211Z\261\367\226m\277\313j\250\273,R\301?\335\335\344f\241e\267?^y+s<\344\261?\262f\362:\323\345\277?\243\302\'\211d\211\301?-\254\232ny\257\305?\261\252B)x\017\253?\340x\215I\276\023\274?<\311\036\355\364\215\252?\356\260\361\257\321\261\250?\267j\256\005\203\214\274?\312\354\003\373u\310\274?\321\307\034\316s9\311?7\331\307\211\375\205\273?\001!\217i8\250\273?C\346gv\037\270\306?\365:\303\203O\273\271?1M\246D\361\256\275?\207\010I\260\202)\303?\027\220\346]/,\254?4.\366@&w\272?r\365\240\366\024\346\262?N\261|\363\241_\245?u\277\361R=\033\307?\330g\330l\0105\277?\244=\332\017\343\373\256?\273\304\230\301\006\256\266?\361\005+#5:\263?&H\261Kp\304\236?\\B\236Z\006g\260?\200\203\230y\342!\272?)}\247\035\214E\270?\230\353\002\230\021\"\302?\371F\363N\245i\265?<B\216,\347r\271?\304v\t\344\230\200\242?"
      }
    }
  }
}
node {
  name: "normalize_element/component_4"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "\365q\341\376+D\273?G\200\022 \274V\306?-\r\345\014\021\254\230?\001\230\024\032\346\326\252?\001]\236H\334\325\263?y>.j*\035\272?\344\370\367\322A\002\261?\244&\030\323\356\205\223?m5\370\266\361\213\301?\341FF\336\244/\263?\223O*B3\315\301?-\025\254U\341m\276?\n4\r\307I\332\305?\332\256\303\335\310\330\305?\252\303(\r\327\230\256?A\327\242+/>\300?&|\034\361W\r\252?\031\360/\013\270\252\301?\354\224\261\033b\256\273?A\\\377\317\335\005\271?\226\263\356T\375\340\302?\3077\026?\206\301\264?<k\274\026\"\227\265?\214\315\262\032W\313\274?\317\277\353\240\003\254\250?p~\036\376\365\345\264?\2730X\305\251C\271?y\2272@\0075\277?\027\363\311C\014\337\275?\352v8\262\331.\265?\363)\370T\353\320\277?5\310\224w$J\251?\277l\010|\350\374\270?\373\032\017\327\346\326\300?\3326\\I\312\024\262?|My\356\351\334\271?<\034\336%\321H\266?y\26236\210\227\266?\021\323\375\035\003\222\263?\310F{\027J\201\272?c\243<\213\217c\272?&7\205\363{+\243?\367 4\035b\205\301?6\272C\275\362v\314?;\246\206\347\271\306\265?\n\204\235b\325 \265?\\\375a\026\235V\274?\204ru\334\375e\273?\314B\\\265B\303\271?\220\346\353\331C`\277?\301\240\240\242W4\313?\305g\253\305\271c\266?\341*\332\022u\303\266?\222\006E`\235\204\316?xJ\227\226B4\303?;\006\236Z\001.\263?\226\311\316\255\240\301\300?D_:\340\314E\270?k\2242\377\241F\300?\307\311\302\254W\236\314?\3755B\007\251\320\272?\257\352\206O5\330\272?\362\002\2141\'\335\301?Q\354\3767J\354\203?\006\002\317\203\334\301\225?\363$\261\360j\003\304?\346(\r#\'\215\276?\251&IV\314\250\274?\221xI\001A\267\264?\254\360\272\300\335@\301?\361HE.\373\237\265?\033\321\306\334x\241\271?\227en\017Y\234\303?w^-\356t\244\261?\216\216/\312\001\365\270?\201\206_3\276\304\300?\303x\264\016\232\237\257?\376\232\375\230\016\321\275?\335\202m\020\"#\244?\017d\230nm|\310?\021W\316\336\031m\302?\260\301g\220\'n\264?:\345Z\177\016\235\253?G\031\263\035:Z\267?\226\231DPD%\260?9\326A5\2204\303?\020\215B \004\325\260?\300Yf\353\302J\302?\271.\016\3048S\301?B\241\335\242E\226\263?\024\234\234\317\360\216\311?\363\2162f;\364\271?\234G\322) \321\261?\002\334\255\336A\351\271?\322J\376\2007\277\261?\334\351C!F+\307?\023n_+\224\021\300?\334\316\361\343\305H\260?\362\227\312f\004W\300?\223-\346u1\276\273?\354$l\211\246}\265?\212:\340\2537\231\274?\016\334\322\201\344\221\304?P\250\351\253\222\345\265?\226 ?\365\361K\277?{h\037+\370m\253?\024\260\314D\331\247\275?\"N\367\237\324U\302?\263\213b\354\226z\265?\376\324\207\024T\353\266?\235x\212\371\022Z\277?\016.\362\362A=\275?[\301\350RY\035\272?^\270\265}v\335\273?\3461Lk\250\030\302?sG\227\350@\027\302?\222\354\203\277nw\267?\202`\327\364u\240\267?\017J\213?\371W\260?-C&]V\010\265?E\3414\366\205\215\303?O\305yw\345\254\277?\024)\327X\345i\272?\023}\314t\240\250\310?\324\t\022\"\263\317\311?\304\037\357\234\000_\303?/Q\t\304\365\354\274?s\266\2753\223\325\240?\220\245\375y\224\366\236?i:\352\321\034\245\306?\367%4\254V$\311?\223\320L\346\016\321\266?\352e\237\275\266\333\310?\367M_\244W\320\272?\211\232\016\273\364\321\247?\345>\222\302W\034\275?\031\321\265\260 -\271?J\204\265M\313q\260?h\177\230kn\230\312?\243\357R\020Z\024\241?\202\231.Ek\245\275?\\\301\333(W\235\272?\322d\020ie\214\265?\214\230I<\357\262\260?\237i\221\006\032\340\252?\341w\006\037\340O\266?\277\272\234\245sd\300?\222\242B3W\237\275?i\225\262o\233g\300?\207\003\310\240xm\263?\343\010Oq\347\205\270?\320KP\271E\275\272?hT/\253\357\375\266?,\271\200S\374\270\261?\'\275\370mKN\300?\177\357\205\265p\232\320?U\030\370\335\266\347\245?\243\344\1779M{\207?\331\365uZc\302\300?c\311\316;K\231\266?[\020\275\3216\032\246?rm\\\212\241X\277?k\200\261B\272-\301?%\234\t\222\346k\305?1\r[dO\303\246?:N];I\241\272?\177*\t\261|[\244?\t\264\302\224KZ\245?\033t\261\205\372?\274?[|\356*\302\322\272?\244!\3654\346I\312?\253ZV\212\262q\277?a\034ke\023\367\273?\371i-\343\3360\307?\374\325\007\205M\214\270?\346%\016\277\3545\271?\025\376\3345\300\303\303?*\0355\361\321\214\261?\035W\036\002\031\312\270?#u!\247\306\203\262?\260t\224<\004y\235?\314]<\235\332\202\307?\025\312_\255\034\322\276?\272]\237\241\316\310\264?m\3743\312\315L\261?\205\0004\330A\026\263?\304\252\375z\336\275\230?{iM\235\216\232\254?\323\302Ny\300\261\271?%\303@\303\332\231\263?\314\261\267\362d\207\302?j\205\031\265#\036\266?\334\360\375\005i\343\270?\246r\342\304\272e\246?"
      }
    }
  }
}
node {
  name: "normalize_element/component_5"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "W?\020\002\355l\271?\316B\342\356\021\t\307?\246\2667l\031x\223?\t\221\275\362\341X\260?\320\315n\225v\326\263?*}\363\253\321\\\271?\236\023}iJ\345\256?E[\356\374=\331\222?X4\204\000lB\303?\001\303\205K\255\310\261?\217\322\220\344\376\022\301?\337\021\326EX\364\275?[Q\200\261\211\317\305?\225b=q\335m\304?\005y\013^\323\007\255?+\360R@\223*\300?\032\005\n\272\222$\252?\032\325\373#\222\374\302?\201X\'H\033\260\272?[W\210\353q\017\267?4\247G*\276\247\302?\345\223\0354\036\231\262?&\2068dp\205\263?\215*:\307\275\317\273?\025Ef3)3\261?,\210Sv\222^\265?_\3125\017\244.\270?i\276\250\257w\227\277?x\224\304>s\351\271?\004\004;J\232I\264?\264\233\372\357\252\017\300?u!<+\200a\253?\026a\317F\312p\270?2JD\266\373\256\300?CW\"P\375\203\257?\022\263x`\351\304\275?%\003\255\261e(\265?d\247,\376G\212\267?\213{\245\214\265\310\267?v\314*\200\352\036\271?\300\005q\317\007\214\271?B\016\245Q\334L\244?\350\216\r\303\230\313\300?\372\024\266U\377\226\315?\300\310)\014Z\340\270?\340W\354\374\311\002\264?\251s=\270\330@\274?\307N\221\246\356\010\270?m/\331\340\223:\267?;\377\314\331h\244\276?~7\0103\2400\315?I\351\302\335\223f\265?I`\355\324\316C\265?\314\333\t\335\302\006\315?\017g\004o\326\215\303?;\022 $\272\320\263?\217\03167\227|\300?B.\272\27281\265?\204p\305\370B\036\300?{\021\325\252Io\313?\266\376\005\236U\310\272?\353\341\313D\021\322\272?\306\267\252\376\236\336\300?\316\220PQ\372\344\240?6\000\365H~\"\221?ix\227\261\2771\304?\001\016]-\320\236\277?j\353\010)=(\276?\022\301\034cE\022\263?\256\340L\206\302+\301?\353F\"\253\220\257\264?\3011u\236KM\270?\\\267\362\246\343p\303?\026\327\235\223\203~\260?Z\025\244\303\212\355\271?{\272\362\r\020B\300?\314\007\324\000}\331\257?\004\211\227\356HQ\275?\276\372\025\276\000\363\237?\300\372\354>\3178\310?vf\265\322\001O\300?~\213\375N[\357\263?\003\226}\323\313Z\252?mQ\006\021 x\273?\362\377\207\0243]\253?\223)L\0032\300\303?e\335\242@],\261?x\303\350\177\332d\301?\202\255\257\001S~\300?z\210A\276V\322\251?\236\267\346\313ap\310?\243@2,ej\271?\366\243\377\352\023n\261?\301\277@\304\221\375\271?7\354\025\033\225I\260?E\235c\207\313F\307?G\251\233\303i\314\277?\357#\034R\303\271\251?h\026\003Lb\016\300?\320\244J\035\257\203\273?\245&\013\251\354\205\265?\312\344\t\301\000\273\300?#\316*6]\304\303?\205c3\023N\203\265?\317w\260\370_D\276?\303S\256Av\226\266?\264.\233$\211j\274?M\000=\216\2309\302?I\230P^\267\312\261?\235IO\0346M\261?\327\263\340xPf\277?\315\237\377\266\330\001\275?\302A\352\222K\305\270?\006\300\262\261\226+\272?l\003Gg8\334\300?l\262<\313\320\021\302?\276\334ic\323\347\265?*eTDF\272\265?P\nA\256\327k\257?\305\326i-\227\320\260?MS\333\270\213\021\303?5\373_U\215C\276?\026\031M\311\232Z\271?`*\354X[\'\310?\261\326\360\367\002(\310?So\357\025;,\303?AOBj\2146\300?D(0I\327\337\237?4\237R\251\002\203\236?\360/\304\342\036\350\306?vD\300L\324\005\310?.\307\271\272T\206\266?\261\302\007X\246\375\311?3)z\352\325\243\270?\251\353\036\023\010\277\250?\343<_]\\}\274?\243R)\3144G\270?\357\371\274=c\272\257?\206\235d\326K\206\311?\211\367&\312\001b\234?\367\002lm\005\300\271?|td\221\2303\271?b^.\177\021\366\265?\225;\006@\351\377\256?\227\322Q\023\037\315\252?g\311\327\366Z\266\305?JE\034\030d>\300?\2329\340\227S\262\274?\357\223@\326\225\207\301?\322?\332b+&\266?M\313k\314\273\317\271?\2210\324\255\023!\275?\375\203\035\006\300\346\262?\177*\241\315\007\212\262?\322\235\tHY\221\300?\212\255\313\351\345\211\320?\027\357\234m;[\246??\261y\025L\016\253?\034\214\217Q\3119\300?f\306\032\257\362\344\265?}\246f(Q\243\261?\224\250Q\'$\302\275?\3370\241\347\3561\301?0\016.\035s^\305?|\035M\002\217\000\244?$\374\372=\213\207\270?e\002\256\306:\236\236?(K\347\242\245\033\245?\350\352J\2509)\274?\235\331\365\245\223y\270?&\354\267\203\314\246\313?\244\361\336-\235\312\301?)\361\24700W\274?\036\177\213\026\354\273\307?\370\240\232\244\217\177\267?\t\344\264\325\034\210\263?\372Lem-5\304?0\276&sE\214\264?\357s\344\227\2554\267?\203\245\001V#H\262?\256b^8\361\204\221?\014\260n@t\326\307?E\366A\226\005\223\277?\351\362y\324~\274\253?\177?~4q\262\250?\340\005\363R\017#\263?\200\024Y\221\357W\240?\250\023O\304\302\023\250?\232 \"\351^\035\272?Z\260\\\2108J\255?\340-(\275\203\340\302?\016>F\331X\022\267?N\245/\034\271\202\270?\016\253k\371\360H\242?"
      }
    }
  }
}
node {
  name: "normalize_element/component_6"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "\367\262\253\230c\334\262?6\2469\017\255i\272?\006\324\2554\257>\257?t\242\302\260z\302\273?\200\tje\263\204\300?di\034\364\351\024\301?\177\200l\224 \234\266?\n4\274\177J\032\264?\202W=\363\201\203\275?`\242?\ts\210\257?06\366\352\270!\265?\230\320n>\277\271\271?|\345#$0h\304?\207@\271cm0\304?\346\022I\037\263f\271?M\177\245\334Ed\272?al\211\253\266\332\266?\341\371\257\355\231\027\302?\204\275\264\241\225\r\301?yCk\\7\331\275?\347\224\020D\307\"\253?n\\\340\241\021\264\261?.\341YM\232\260\273?9\254\265\237\250F\250?K\r\334\235\217\024\253?\3233>En\203\300?\201-\201$\204\270\300?zv\027-\342i\272?\005\244\363\235<\205\276?\331\332\346\271\312\002\265?\014h\306\373\241\264\275?\362\257R2\032(\262?\377,m\243\307\020\256?\314\301\326\346\253\326\264?_\310\030\217\272l\273?\205Cycdp\272?u\274\350|\2172\234?\211k\323\335\027\305\263?\320\377\255\217G#\266?S.\030R\001\324\263??\350\246\273UQ\262?\304\004\276mi_\275?\021\302n\233S\020\256?6i\035\314[\262\266?\307<\324\261\250Z\276?m\275 \3165_\272?\034\310;\006\262>\263?\234:\316\356B\323\272?Ro\006\262\260\275\263?\263<\276\246\317\332\263?XN\301h\366\303\270?\"\245g\347%\340\263?u\000\374\007\034\377\267?\236\037\273\025\006\010\312?\324\223\227\324\2070\257?\322\022\306w\253\254\261?Drq\325\3567\270?;\206q~]b\277?\026\223\205O=I\257?\306\316\331\327\301\216\274?{\"\304\237%\353\261?\320\257\333\327\351\326\262?\204\272\217v\270*\253?t\307\363\375\372?\273?s\254\033\207\253\227\267?\251\230\277LX\276\303?\330\220\207\327X\266\262?\224\320\235-\016Q\263?\201B\262\212{O\256?\260\342O\262\247\255\300?\371\\\226D0\355\262?b\352\213\335n\344\251?\243\374\261\004\252c\264?\036\322\320\210\227\374\275?\256vY\273\t\030\273?\030\301\236-\"5\300?J \303\002\026\373\254?\361xb\357(B\263?\302Y!\027b\026\257?2\260+\271\314a\273?b\261\016\306\326S\265?\ttoCaW\266?|\201h\314u\261\301?\013\322\330\323\030q\262?HRD\031\271\r\273?3\273\211\202b)\271?[\334\363\272MQ\262?#A7\202\364\227\300?=\306h_q\237\265?.\226\202kw\332\257?\302\233\252\205\326\346\303?\333\247\030$\323Z\275?&U\260\315\223Y\260?\254\216\034\351\014\014\273?;\301\236y\260\372\275?\252&S\310?:\304?\342\212\344[\272\252\277?\026\242i\247\353\253\274?\336\007P\356\2370\301?`ot+\n\017\273?\222\350?M(\"\304?\216#R\252\257\364\266?_lx\177^\346\277?\203_\275f\306\226\253?\037\225\261\215\267\026\271?`&\326\036\0005\266?\251\236/j\265\217\256?LQ\r\177v\325\300?\301\021\356\337\006\206\301?\245-\2518\340\003\300?\361\020z\301\235G\271?\025\235\215\336n\036\267?\032\017\242\364\006\021\272?H\362\253%\\\311\270?\252\t\n\322xa\256?gl\001\004 \254\270?)\320,\253\336\221\300?\177t)/\253\220\262?\010\223\204r\022\262\276?\321\257\214\221\025\021\264?=\001\264\260\036l\300?\2305\300\353\204\256\253?\220\335L\037\226Z\265?q\262&y\"F\315?lCb\016\304*\302?\353\270!\223z\271\300?\217\376\331\207\243\310\262?\330\025h\264\253I\252?\375\344\t3V\343\264?\3622\317\271\367\212\305?\341#\273\002lh\277?Y\262\201yj#\261?\2110\307\360\255O\262?9!\031\027\263\312\267?ej\330\020\230^\273?\370\003\273\355\204\217\273?\365\316\255\177\363<\275?9m?yU\360\302?M\324\3561:\033\264?\214\234\023\350\004\316\267?\263\363J\032\"\365\274? F\3549\007T\264?\226G\016Cq\350\261?R\204%5\354\253\275?\34649\354&\307\262?\376\344\321\210\367n\277?&\340\031e\344\311\262?NFI\323\226\366\271?\205\034c@Y\245\265?\013(\222\267u\232\265?+J\377N7\251\253?+\336|\256\254\360\270?*\010\244\030\256{\265?&\355CgdS\260?\033\255B\201y\363\271?\351\312I#\304g\277?\314Ac5|\\\262?\204\272\001\314\240\315\265?\032\362e(B\370\262?\373\364\005\030\211\025\266?\244\034\001\031\220v\262?\250\255%\245\037[\255?i\344\031RJ\252\257?\240\261}h\351\001\300?8\310L\3534\247\304?9\344Hb\247\352\302?\245\255\000\225\340\303\247?\021K\036\335u\'\273?\177j3\2035\244\263?\215\305\023\232T\317\261?l\337\246\266\tt\306?/b\363\377\027\300\274?\324k\246\207\020\363\300?Y\267jl\3510\270?L\237/S\031\232\260?G\316\"\021\2432\270?\350\030\341\004\336}\300?\352\324\377\263\222H\266?\331\343\377:\251\302\273?\343\234\'\212\317\236\267?BP\240\0259@\271?\376\346\017\027\312\323\311?\021\246\370]\260\322\270?\302\246}\\\343\177\266?!<\000\000\005\271\257?\361\267\245$\327\014\261?(\360\300\223%Y\255?99\365\341VJ\272? \252\363\037\007\342\266?\246\235\014!\366\250\270?\\E\2470\264O\306?(\0168\374\202\036\265?\005X\225\221;\353\263?T6\201)\320\025\270?"
      }
    }
  }
}
node {
  name: "normalize_element/component_7"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "\253\351\226\367\032}\267?\373\276,\253\270J\307?\220\2319\224\t\016\227?Py\270@)*\264?\245[\327\261\017\007\264?>Yi\006|\364\270?\317\330*\320\r\236\254?\210\337\214\0330\250\226?^\223z\276\202N\305?\214;\'\273n\321\260?-\211\310\275\264y\300?\333\263?4\031,\275?,M3\245A\306\305?\352a5\204\315:\305?\312\205-\352Q\300\253?\340\240\2273\326\234\300?U\203L\014\253s\253?[\014t\2466\334\301?\353\226\304)\330\036\272?k \375\371-o\271?\341YH\341\366\033\302?\025$\256J\277P\261?\332\361\335\350\216\276\261?\025\223*\226\312\367\272?TX\365.\350\201\266?\237\360?\035\202\357\265?\020\271\232\356\325D\267?ii\343\222\'\354\277?\312\226\354\245\027\237\265?\344=U%\2245\263?\223\350-jl9\300?\366Z\335\245e\210\256?T\340d\033\270\203\270?\301\023\032\213\035B\300?\250\254\030ArQ\253?_\355\225j\200A\301?\272\3631\020\345:\264?\231\010I\326IL\270?\306\304\203\271\037h\274?Y\365\373\366\\C\266?\210\244F\203<\004\271?\263`\306:s\024\246?@C\273\347\031+\300?\223.QK\340\007\316?B[\255\227\317\207\274?\202\223\247\213\230\202\263?\244]\2361@`\274?\014r\347\'t\025\265?\035D\354\305\260\300\264?]\347\322\004\371\365\303?~\240\332\265\304\027\317?V2\310\251\022o\264?q\013\271\371\026;\264?\260\313\203\003@\246\313?\352\230I\2156\362\303?1\257[\2707\265\264?b\020\203\271\020=\300?\302\302\237\232\370\016\262?\317\271\035\022\245\332\277?\336\2340\262{\352\311?\223\216\235\260\367\364\272?95I\214\233\243\272?\371\351Y\277\202\374\276?!\252XK\355\204\257?\261\024\277\345\216W\220?u\367\037\352U\\\304?\031%C\351f\032\300?W\235\356\237\033X\277?\313a\t\001\177\314\264?\316\034P>V\023\301?\257\262\3277\007\272\263?\301\376\244\007)k\267?\317\222t\213\310I\303?]\212\246\021\005\303\256??/\303\034\220\306\266?\304TD\227\201\224\300?\332B\237\256? \260?#I\224\346$N\274?\257.\305Z\036\231\234?\301\237Q\"\330$\310?\013\277\0234\337!\273?\264~m\334\346\266\263?\031\207(\226\303=\252?\372\2748\252\000\003\274?\321\372\240\326PD\252?E\3435!@\025\304?7\3426\013\225\256\261?\2273\200\\\207\217\300?\2167n;\261j\300?+\253\341\tZ\324\231?D<\242\332\221>\307?z\333\366\204\277;\271? [}\022+e\261?\210\023r\207H+\272?FSp\212$\000\261?\"\005\332\023\340\230\307?a\2266O\207\253\277?\227\3337\243X\001\245? \000\\\274d\013\300?\223>Y\243\261\205\273?\205\355\224\377\252\322\264?\375\004\272p\314\244\276??\372\027\"V\250\302?6\312P\316}]\265?\361\246\266/\373\320\274?k\226\214\342\243e\267?}d\207\271#j\273?P\201OP\343\016\302?#\365\212\346\202\254\252?\277\010W\226\241W\252?\274!A|VU\277?\nq$Q\341\350\274?\362\336\237\362\262\235\267?^/n\037\311\227\270?ha\257\255(p\277?0\347\373\2448\031\302?c[>F\004\331\264?Hx\340;\350\024\264?\030\364\253\']t\256?\200d\375\020b\001\250?\320\204\327BQ_\302?\377o\243\003\2750\275?\2222\247\240\342\205\270?O)\276\300\375\227\307?,\273-\177(\222\306?\003W\363\310\221\341\302?\010\366A\221LY\302?<\365\205\346\363\267\240?\2657\327\264{\207\237?(\334\002t%c\306?\276\255\320\024\365\332\306?\376z>0kU\266?\312\344\302\353t\214\312?\335\331O\255[\020\267?\254\273\351\376\000W\252?\027\233\005\303\201\334\273?\014]\000O\227\233\267?E\371\347A\370R\257?l\017s08\026\310?\377#aL\353P\236?t\t\202%)y\266?\201\364\032\251a9\270?\233\233\023\324 g\266?\325H\035\255\002f\255?\027g\372\217\306M\253?\036\222\020\233~\177\300?\375\021\344rL.\276?\246}\013\234\200\347\273?\022qf\000\027\200\302?\213\260 N\331\311\267?\274\002\t>\221\035\273?\310_\246bm\020\300?A\337\200\020u\221\256?0\363s\374}j\263?\3278\264+\241\371\300?\360|\033o\346\010\320?i\361\231T\203\034\250?\374%!\0227\207\267?\357,\242o\320\263\277?\333\246\2771\340\271\265?\272\n\352\332e_\260?\240^L\332$$\274?\350\243\330FF\213\301?\003G\324\324J\222\305?\\lFE\035\317\242?P\341\262Qp\215\266?\342Aq\317\014E\230?\232&%j\2154\247?\004o\030j\354I\274?q\322\'\376\227\007\273?{\273\372\270\003#\315?H\212\310\260\212\267\303?1\317\262=f\337\274?\311\204<\333\3230\310?n\252\346 \205\276\266?\350<?\231: \254?\211\026x\245g\245\304?\341\230\017OI\262\266?\026\270y9\245\351\265?T\347\247\36180\262?lV_X\\\356\\?m\3027\371\237O\310?\001\301h\313\303\206\300?\352:i\356\334\014\257?\027/\256\242S\030\244?\265\222\300`\343l\263?\374\030\224\345\373\024\252?\344\314o\313Y5\244?0\024\243\363\211\330\272? e\037\277\022\243\250?\2055\nS\330(\303?\330\272\2153q\036\270?H\342\\\370\376\\\270?\\@\356vK\337\241?"
      }
    }
  }
}
node {
  name: "normalize_element/component_8"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "\342\205\351\205\1774\250?\234a\332\237\332\314\245?\345\177\355\2765@\242?\037bI\332\t\006\224?\365\336\231\202\225\300\261?\226t\212\021f3\251?0r5\003s,\243?\223\303\374\034\354;\247?(\254s]\017^\246?\207`\250\005\'\211\240?tt\355\357\222V\261?\032\354\251|\237\017\240?\376\344H\227\231z\266?J\337\3141\036\372\267?\276\0055#S\243\256?.\023\'\362\202Z\260?\307\'{\203\343\275\247?\231\371\006\r\232i\276?%{hE\362\232\245?\361\362\353\274\312\260\262?g\254=\271\224]\265?\237Yz\203\033h\252?\301!\257bLU\245?Pw\3711Ah\253?\226`\3078\254\224\246?\030R\2247\3770\257?\246\225\245JR!\262?I\210H\006\346\014\252?\212\317`\375\346\230\261?o&A\340\312\327\257?U\0107[qX\243?\301\330k\017\265L\246?\236\315\177Oyb\236?S|\370\t\322R\246?\230\220\002P4+\262?~\236\227n8J\251?\352\237T\271Xjp?Q\177\270\t\311\022\260?j\217\n\250\337\241\234?\300{5\252MH\253?/\277\'dT\n\227?\360\000\361\350\266,\270?\362\3606 V@\247?\250\353:h7y\264?\222\274Ob\313\203\254?eB\236\355i8\244?`I$\227 \237\242?\310\362\234\227\004T\266?\034]z;\217x\264?\031*\333\224\346\347\245?~&\254\241\225\372\245?\346\3579\013\326\223\255?\266\322\277\262?A\244?\342eg\200\364\225\301?<e\300O\330\"\253?\272\275\210\334*\215\251?7CI\377\315\266\231?\320\034\316\006\335\201\254?7\330x\t~\266\252?J\001<~|\375\250?\335\251\317\301r\005\240?\312\372e\341\377O\242?8\276G\024\222\200\245?\256+;\004[\023\246?v\360\033x\030\007\245?1\217\222\335 \350\264?\245\2066\000\033\020\225?k\357\220\270\200\375\237?\037+|\246,}\241?\013\'>~<\342\254?\3110\361\276_\t\244?\013q85\310\013\243?4\3700\270<\217\251?R^\271K\323\001\264?\230,\351\206x4\261?\346\323\247x\003\034\273?\367\216\236K\006\272\243?*wK\344\025\227\253?\310\340\245\3674\367\233?\200\240o\032\301\227\263?#\324`\2500\247\266?m\216R\215\207\214\246?0\353j\227\333b\203?Db\0306\036\372\250?\032\364\342\032X\364\243?S\357\263\016jf\250?\342\322\037\004^\022\242?\340h\253\270\217\341\263?\240 \305\301$\343\260?\302/y,K\256\262?\261:\315]\246\201\260?\341\177\254Y\307\356\255?\255\340\245>\n\203\245?4\237\265\323\275k\261?\2409\033\215\244&\262?%61\272B\363\267?,\250\301\2276Z\261?\0248(M\302\006\262?\232E\232\013k\311\272?N\'<\025.\263\257?z\330C\257\312{\266?9\257\315\240\203)\242?\300\013j\336\302\321\244?\263\035w=\335\350\254?\244\207\215\361\342\366\261?\266\023l\366\034e\253?\316\357f\3232\316\247?K]\021\200\250I\273?8\366\361r\006\266\271?k\021\247L\227\351\254?<\361\210I9\021\245?9\0246\352\276\357\255?-\217\325\260V\"\256?!m2\226(|\262?0R \232\026H\240?\255\307\274\017\271y\243?h\230\230653\256?R\030u\\vP\235?\331\003W\300\327\354\251?q\274\257\210i\370\250?g\3448_\010\023\261?\036\351\365\357F[\253?\256*^\331\303f\227?u\237\036\006\263<\256?\325{9\322j\337\261?\345\304\022g)\177\244?\024]\022\305\266\325\246?h8\005\374\221W\226?4\n\337\201U\203\227?\257\204\232\223\252\374\272?\215\207E\254\310\337\267?\356\210\037p\030]\255?qP<\023\014\372\260?D\204\r\274K\303\256?\207\010\370h\203\251\262?\205\214$\232pJ\260?\335\263\377\030r\240\267??\001\375\206\325\024\272?t\247q\370oa\303?\221W\202\355\251\032\266?\033HJ\214\373\025\246?\207V\364u\203\342\252?\022\202v\003\334^\236?\013(l\360\322\016\255?\246]\361yj\232\253?b\003\255\266\036b\265?\256\317\244fr\336\243?/\355,^R\323\273?\305\270{\266\227\377\262?\325\277\242]\260\024\251?\003l\214\022\376\211\254?\222\314\265+\236A\264?4\223\276\374\215\367\254?\351\017\002/\211l\241?\036\265\357uE5\300?9\207h\375\370\016x\277\252Yo\355\247s\247?\345\032\212.\264\342\254?\372\003\260\304\255\311\225?L\264yV\261|\243?\214\274\327\tb\262\234?\242\352,\272\302\251\237?\271w\332\010.\320\263?\356\336J\251]\251\237?\273\'Q\'\207l\272?2\366\327\213\236\344\264?\317\231\313E0\231\245?B\344C<Q\223\262?\335\371\321\262\346\256\224?\313\032\307\330\241K\255?\350\345\020n\273\233\261?\214\353\240\221V\034\263?8o\272j@\262\236?\036\213+6\377\022\254?\370\321\374s\311\237\260?\007\370p\364\361\203\261?y\024\315T\237\343\256?\033`\213\202\2058\260?O\303\306\333\233\366\246?W\365\207\240I\346\233?\342a`q\306\235\223?\017)R\326y\030\265?3\327\227\334\220\225\242?\267LX\253\016j\242?\376\027Gf\247\377\302?Uv\340\355X\244\257?\206LHW(S\236?k\'\364Ai\204\242?\247\233\357\240\014g\234?\321\3738-\207\374|\277<\027\302A\255/\270?\232.\r\301F\231\240?\271sO\301[\314\235?F\'F\364=\263\253?"
      }
    }
  }
}
node {
  name: "normalize_element/component_9"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "\362\251\226\206w?\250?Y\244\320L\014V\267?\231\230\025\'J\204\240?\236\377\034\273K\257\231?\233\364\323\214\000\177\260?I#\241Xg\257\246?\232\032\255\022Hc\241?6\237O\361s\324\246?\376\342YO\233\333\251?Jt\020 \265\034\240?\217\234\214\367\321\023\261?\014l\305\231\207\225\245?\261\226\022\264\217\266\267?\220\r\327|\3626\266?\036\215\272\013\321w\256?W\320\332\213m\364\257?\255\270\020bi\013\247?y\262\257\375\343\013\272?Ag\220\212\030\331\242?\236\345\3636\250\020\262?\276\270p\372\\\350\265?Pe/\023\371\271\252?\021W\274\373]\204\243?\302\302\273\357\'I\251?\316\030N\350\341C\244?\314\023Q\021|\023\252?\254\031Q\216\215\266\261?\2522\347t\264\005\246?\203E\231\233\334`\262?\220\3436\003$\346\257?9\320>\264a\335\242?\223\272\2447\312d\245?\266\244\226\362\311\246\234?\315\350\005\247W-\243?y\274c\215\2072\261?\352|\250\3176\200\255?X\234\327\311\372|m?\363\304n\375\306g\257?\021\317\337r_H\213?TT\322\312\212\317\250?\312\024nW\272K\212?>c\265\262\252\311\267?E\034_9Jw\245?^\253\201\t\203\202\264?\346\352\030n\370\221\252?X\353\032\3461\356\242?n\200v\340\314J\245?\235\220\226\375\314\266\262?\330\007\221\300\252p\256?\222\341\260\350a^\245?\244x\0266c\316\247?Z\022\306m99\256?\203a\276\221\200\236\243?\237\311)\372v\344\303?\301o4a\252\202\253?\317&M\244\260b\251?Dg9\323\373\373\225?\266\305\244\333\354\361\252?/\361k\027\337\277\246?0\260\2507\214J\250?c\227\202\027xL\235?\306\016(p\362(\242?e\253B8\243<\242?P\267\363\312\343S\260?\tz\010\340\357\342\243?n\316\310\355\205\354\264?\323\365\247\001A\210\223?\210\001H\366\323B\241?\364C-L-\373\240?\n\250\257h\354\253\243?\253\214\002!\262x\243?\224%T\0371B\242?.\202Y\260s$\252?\036\230\234\r\013\313\264?U\345\272\252e\313\257?%\246\355Z\240/\275?@\301<\231\274W\244?\300\376#\207\023\216\252?L,\220\243\260\300\232?\210\215\216\270\273\337\263?%}\3457\010\227\266?\323D\315\307\035\205\245?\2121\270\377+\237\213?\177\210\233\300e/\252?3\307nv\3264\246?\247@k \213\244\247?\3731\302\350\255\022\241?\346\274\236f\203w\263?%\347\272\254f\366\261?;\261\252\005\306\337\261?\207\030!\317=\n\243?\3725M0\200\026\251?\355\235\217:SK\244?G\332\327\313\000a\262?\367\377<\320\264\213\261?\031\332z2q\276\270?R\210\006}w\230\255?n\002K/\343\006\261?)B\037i\306\333\263?\257=\317yo\007\257?1\332\013NB\276\266?\010U\315 \374\223\237?~\374u\014g5\242?\307,\275.\252\342\254?^\326\277I\245\350\261?\244?\001\002@\217\252?\t\257vw\021d\247?,\033$\344\206V\267?\347b\035\330;\355\270?\337\347\3120\206#\247?nb\227\224\3723\243?m\030a1\272!\255?\344\307h\202\2003\254?^Y<\321\202\013\262?\2105l\306/\335\240?\236\362\212\325VT\247?g\370\000\361{\032\255?\330\254\254\315\374\363\235?\030\227\354\320\227{\251?q\343tduC\244?\347\276l\240\230s\263?\221~rI\022\332\254?FuLs\261\275\234?\274vn|\033\322\255?w:\227\257\271\215\264?\007\037\304z\025\254\230?\301\013\360\027\222\027\251?=\345pd \372\236?\334\'\027\310\213\003\212?\323\247\205-\236C\272?\255\322\236\021\363L\270?\223Z\021\375&\211\256?e\244\331\232\177\204\260?\266O\"\035y{\257?\342%\n\275\226A\262?\350\310\343\314#\275\260?+\213>\366\345\022\267?p\326\020\267k\213\271?\313\237?\322\177\315\301?x\271\227\032\362\346\265?\016\217\203feh\243?\337\024h\rd\221\261?\206\220\024\r)q\231?\257\210\234\351\036\014\254?\200\002\035\035\277\006\257?\323\373\257;)\210\267?zD@\026\206\356\242?\234\021\221\331\332\364\271?e\234B\213\305\237\262?\343}\236\004\013g\250?\033\0039\310\356y\255? |\225m\301\201\264?\020\362wx\232\217\246?n\330`(\372X\236?on(\211\340\220\277?e\366\017\250RAb\277\257\320\300\365L\"\247?\260\301lI\341V\254?!Q\301\021?\'\230?\312\315\337\240\2273\240?@e\246\373\323\"\237?\334\035z\324]\256\237?\313R\275\305[\230\261?\020\267\277\212\276H\233?\210\346\365\270S\340\266?\205\267\312\275\007\002\264?\220f\326\231\025f\242?\207\272+\225\231\315\261?\361\2454\276\326u\221?)A\245h\352\027\255?\273\203\252aWD\262?\223\024\225ckc\264?|\373\214n1\375\240?\270\367s\201\000V\246?\210o\313\301\030\003\260?\337\2449\027\0362\261?\225b\276\361\362J\262?\217\357q\367P\332\257?=\nV#[`\244??\370~\332\0202\232?\321\364|G9\n\223?\217*\324\344s\270\262?\320\001L\220FB\247?\251z\"\035Xm\241?F\244\255\0271V\277?D\277\024\360\373\317\256?\362u\242\3571\002\235?x\265e\213gz\240?D\217Hv\315-\240?\017E5\260K\020\220\277\355\335\361\266j\010\267?\334$\246\016i\211\245?%\320\261\232\346\321\232?\326K\201<#`\252?"
      }
    }
  }
}
node {
  name: "normalize_element/component_10"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "\254\206\231\2759\312\265?\222x\312\201V\324\306?!\205\260\357\312\373\240?\24199\343\376\032\270?\237X\351\346\311R\264?\366\234f\024\332\330\270?\2447\002\017\021\331\253?\277\275z\373\304\030\236?4\333\253\025\301\r\307?\265\370\242\252\372v\260?\'\0179\355\221\034\300?\215\223\263\221\232\337\273?\261?0\027V\311\305?v\351W!\202\275\306?\034\245\277U\246\261\253?\\c\334|?\317\300?\025\264\313\342\276\010\256?\344j\367\272+\014\300?l\272\037i\320\315\271?L\254\r\307S\014\266?\334\244\322\352\014\025\302?\003_\035<\035\214\260?\246\332X\235]\275\261?\211fkk\256\224\272?\035\277\013\351]\255\272?\264\r\372\327\224\331\265?_Y\227\212\365\334\266?#N\333J\245\033\300?\302j\265R\313\200\262?\250\200\334\307\317\233\262?\252\240\213N\342h\300?\246\2279\331\335\356\260?kz\353$\2443\271?\3634\344\310\230u\277?\302h\337\247mm\250?s\337\360\326\207\342\303?j\201\313\320i\367\263?\300\361\025\332\302\276\270?\001\345\2674\363\356\277?\215\"\304\305\354\215\263?\026\"\233<I\340\270?Q\226\316EK7\250?C\267\374_,\216\277?\204\344\232\213\212{\315?\305\207\232gs<\277?\273\234\252,\036\037\263?\200\0074H)\267\274?\257k\375\362\236\n\263?\353<\035\324\355\010\263?\221Qz\263\301Z\301?\236\017*\314\326\025\320?\222X\035\374n\001\264?s\364\206he\334\263?\370\325\207\273\233#\313?{\250\351\212\204<\304?\344\213\337\334\253\313\265?K_\r\362\250(\300?\t\376p\275\221\354\260?\265\032\366\241)@\277?\222p\233U\021\301\310?\354\374\345\3272@\272?\237\204K\'\017\224\272?\0165\002\330\035^\275?\372\357\216z\362\252\265?Gl\034V],\225?\253z\330\217=\220\304?\231Y\353\216<\005\300?\255\363\017%\321\000\300?\007M\277\002\240\243\267?5b\335\255i\364\300?\324\253\022v\233\001\263?\235\206JQ\236\341\266?zQ\206m52\303?H,s\004\272@\255?\311Ir\n<A\272?\303M/\371\353\312\301?{\312\026\273\020\272\260?W\3755Ly\034\273?\215WI\371\203`\233?\256\375S`\267>\310?\331\202\345\325\'\243\266?\275\3357c=\332\263?A\247\023\025\0319\255?h\351wR@\t\275?\325\275\263\025\262\365\253?\272IN\036\375\014\304?|\372\337|\260\255\262?\017\211\006\037\006\027\300?\366\355\221\276*\306\300?\322\332\014\356\t={?\272\3030\244\346R\306?5?@\357t\204\271?\037\204\265n\331\332\261?\234\\\332\020\346m\272?\030\3040\365-\322\262?1\2322\303\2105\310?\263]\016\254\304\353\277?\024\014\332\360c\350\243?\323\232\254r\035:\300?\353T\221\273\034\267\273?e\227=C\027\330\263?\204Q\312\035\226\203\273?\255m\265G\242)\302?\215\301(\340U\221\265?11w\334\331\037\274?7$S\335\332\304\265?\317\371\354*\353\321\272?mL\255\311\343\301\301?\356\205/7\013\300\243?w{\023\272\200\324\251?\375n;\346\234U\277?\035\357\315\360\030\376\274?gW\003\217\315\340\266?\262\032s \351(\267?\322\177\222\337\373\313\275?D3p\274\0223\302?[Z\2333\223\211\264?6\310\371\242\nm\263?7\267\273gZ\353\255?\016\331\032\3635)\242?\276\206\231\343\000\255\301?\027^\3568\352\215\274?\035\354\323E\230\017\270?\277\004\200\300\211\374\307?l\030\r2,s\305?Ef\267a\327`\302?\013!\037\250\336\020\304?\254*\207X\365\240\242?\210U&v\031p\240?c;\240\353I\000\306?\360\224\\ep\013\306?o|\263\356\233R\266?^3\342\312%\n\313?\270d}LiR\266?W2\002U\234\235\253?\311g\017:<\222\273?I\212\266\315\316N\267?\357\324\306R\320_\256?^\256\023\321\216\037\306?\356\347\nr\364Q\243?0\231\033\355g\032\264?\370]\241\247\262\274\267?\202V`\310\352\326\266?\211\021n\244\377\364\254?\036\341hR\000H\253?\037U\335\273\2676\250?B\261\0254-\261\273?\222Z\220|\021,\273?\237\232\230\034\341\356\302?\376\314Nv\233\006\270?q\026\335\027#T\274?\030f\"\036\351I\301?le,\024\225\177\251?\371\375\216\355$>\264?\001\020\216\221\240\203\301?v\231\234\005\232B\317?\361\373\241\023\356\007\253?\'\305R\032\355\025\277?\006U8\274\377\223\277?]\322\263\201\275\007\266?#Y\023M\230\227\260??4\344\271mH\273?>;\374\017\222\200\302?x\334/ -.\306?\231n\005Y\276J\243?\323\350\330\2703\320\265?\260\016\357U\005L\227?\2139B\345\343\003\253?\207v\324\354\017\201\274?\004\020\317\366\016U\277?\023\370\370\301O\325\315?\024$\375\220\223\226\304?;\035`\227\365\243\275?\367\365\360#\206\366\307?c\266\3148\371l\266?T\233?s\304\304\245?Ty\245\246\t\r\305?\375\203C\315br\270?\233\037\252\351\255\023\265?\242\374&\022!5\262?g0\241\335|~{\277\345K\r\014\327\345\310?.\345\n\\\017\200\301?%\217`\020|\177\260?jN\240\200\324\303\241?\272\320\362\302\361\n\264?3a\335s\276\252\261?>\035\205\2474\273\241?\317\227\232\341_\264\273?/\242l\030\245N\247?\205\007\235ueN\303?\025O\306\303>+\271?r\t\362y\346a\270?\323H\305\253\036\303\243?"
      }
    }
  }
}
node {
  name: "normalize_element/component_11"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "\n\246\215/I\001\262?\003a\341\003\277v\323?|\345\024\371\002n\252?oL^\203\017<\251?z5f0K]\271?]\001n\336\204\267\262?\357\222!\217,\325\241?\300R\247M\346i\265?\241\006\326\350\n\363\307?%qL\322\331\"\270?\276\352f\036wL\252?i\266\225\330a>\274?\264\347\nm;\230\252?Y\236\370K:3\275?\350\363B\033/\306\266?\327\005\344\224~\327\302?\377\'\366\0051\246\273?\332\3447\037\263@\273?\032\221\270_\357\022\264?\023\361d\244\317\250\275?\337\343\206\276?N\261?\224\256)(\366d\263?\232\220\321_\272Y\264?\205L\241\017p\352\242?G\317\244\202\307\r\250?\207Zch&,\251?\037;\245\014\347\335\262?\214\365\245h\371B\251?\177C\314\030+\331\240?\031RR\033-k\262?\336\254\240\355\3019\262?/-\212!\260\247\271?\313\363W\375Ni\266?\034<\336\247T\320\272?\350Y\343Ht\n\275?\275\253\322\241\311\201\251?k\036d\262\3508\274?\343\305/\255g\267\266?\201E\210o\204l\305?\243\013@\\\237]\231?\206\307\273yc\256\307?\327\\\354\370Z\220\275?\033d%\365\204\366\270?f\250\277\233\304Y\262?_|\362,\030\307v\277\3567\335)R\036\270?\345\313\217\3503\332\254?S\360\002\217\351\265\264?\n\251\364v\370)\257?\024\276\250\361\223i\267?\312\257=\270\335\331\322?i9\361QV>\276?\277\030\t\356\271,\304?\302z\227\343\3712\310?\336\'\370\272\315\232\230?1\311\216\256N%\265?}\261\260\r\000H\265?\017\227=\2053*\216?\316Vr\326&\234\264?\267\273\203\257\032\021\245?:\005Eh\016\r\301?\256\311\355s\211\236\301?\217\343\207J#\346\274?Q\252\376\2723\020\264?\034a\310\037I\237\304?\316\254wH\311\\\262?^w\004\201\337\320\265?P\2422\271\251e\303?\252w\232\307\277!\263?\344\375i\267\036\204\274?\262a\260\217\014\301\267?rE\001Y\212\017\200?A\337/\311uq\320?\347\202\334@\337\350\277?\256\0073p\267Y\252?\376\335\335\370J\010\323?\031\022\360\236\025.\270?\372\026\316\034/0\254?qW\211[\000x\251?\036:\356\250\362|\306?\240\030z@\260\225\277?(\256\273]U\024\274?\032\020\335\220\237\275\304?q:as\"\002\270?^\001\\\373\310\316\262?rlh\303\224Z\254?\334\334\276eSP\261?\260\243\225nWW\277?,\277\251\233\315\333\257?\202\214\270\264\245D\325?\266\215\014`4E\320?\357k\340\353\304\025\276?\001P\365\306qi\303?T}\005n\177\334\273?\222\243\27433c\251?{\254\014\357\341\256\255?7\377\005;+\215\241?+\302\013*\303\333\307?\002D\207\341\237)\276?>QX0\221\325\265?\231\336^\317`\036\272?-\251)\265V5\251?-JH%\356\321\300?\035[\365\3270\345\241?\301\374\"\\Y\306\304?\323v\232l\006\257\267?YO\\w\273*\263?\251\354w\005\373\237\316?\363d\362^\231\335\264?\314.\304\\\345\030\251?Ck\304\032\316\177\307?t\341\034\202\236^\262?\177\004\332*|\216\260?\351\200\221\210\n\004\312?\244o\261&?\367\267?\240R\350f\306\365\274?\272\230\333\307N\233\274?|\365\nn\030\303\272?\3547n\214\370)\265?\r\357-=~\325\301?\211!qC\027\312\300?\376\022\nt\232C\264?\350u\361\242\242v\262?\274|\331\340\276z\317?\3228%7\302\326\275?\341;\374\370\365\n\276?u\371\004\300\340i\302?*1-\274[\361\240?\026\240\022|x\273\275?\273\036.45\333\276?\263+<N\"\331\264?;\254\301\022G\322\270?}\365\036R\377e\236?z\242\242\354Xe\266?\225F>B\334\273\264?\376)\377\2413\205\305?\347f\207\021%\316\236?\223\224\177#=\351\262?\335\357\314\333C\350\320?_.\306\346\001\261\261?\263\270%\220\0274\303?II\2304\tH\300?\241\014l\315\n\020\300?+jmp\333d\304?)!S\234u\326\277?\316\317\235\370\033\201\266?m\206\014\305\314\'\260?\204\357\242TgZ\275?B\177\217d\3205\265?\312\030\214\002^\325\306?\351\305`0E\332\251?\226_a\034\267s\274?\322Y\177\256*\271\305?\265\254\303\035\344?\300?\033%k\2614\240\267?ID\000\211\211\332\327?*\237\246\025-\340\265?\235\363(\234\252\351\273?3\021dt\250u\263?\0371^\031rq\220?\213D\255\330{\313\255?\t(\254\013z\232\277?\265\347*\304\300\306\256?\244\274\177\301\250\203\311?\341o\273\235k\202\261?zNO_\234f\273?U\017c\225|3\246?\316\270\217-\342\363\272?_\017\np\230m\277?Nye\370\376o\267?\255-\237Y\320\203\263?/\016\\U^A\305?\321\307\000yD?\270?\034\261j\236\220\216\266?\003\2357\270\356\222\255?\304\334\203J;y\305?\273\026\343\262\300\215\267?\347\227\271\247H\021\235?\354\n\241v\004_\261?\\uH*\206=\270?r\332\213\034\255`\244?\376\343,\010\2776\313?\321\204I\2309\302\260?\347V3+\016y\305?T(\313C\270_\273?c\350\224$(n\306?a\3015+f\372\260?6\346$}\"\233\253?\224S.\231\322V\304?M\027\270\365\000\001\244?\017d\223\265\263\323\264?\344\013\256GN\227\304?z\217G1\277!\246?\320=?\032\273u\304?"
      }
    }
  }
}
node {
  name: "normalize_element/component_12"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "isZ\277\262\265\264?\005q22G]\305?\275\2139\000\311\021\250?\325o\177^S\310\272?\327+\246~P\252\264?\240\001F\256\323\374\270?\223\272?\014\344A\255?3\273\204\311\250\300\243?\275\322{(\246\322\307?N\340\010\030~\354\260?\013\362/YG\033\300?\216V\"A\322\326\271?sl0\0316\346\305?\322\021`[\266\013\307?O\005\300\236\315\257\255?\227\331R\315\315\263\275?V$\325`\342\333\260?P/L4\265]\300?\005\240\223\326\306u\267?\236RI\220V\244\266?\013\024S\027`\207\304?\026\362\255\2641\033\256?h\010/\020\360\343\264?V\334\246\342@\364\272?z\332w\313)\217\273?zH\223\263\371}\264?\240E\373\307^I\267?.\226\243y`=\300?\326eh\244\3648\262?\201Zy\272\3247\263?\233\014s\364\213\241\300?\373\267L\377\362F\262?\206#\020\373y]\272?\217\277\2526\334\240\276?6\231m~.\340\247?\206@.q\344\201\306?\310=\225\207\020\315\264?\231\345n\264<\277\270?x\322\030f\316^\300?[\232\356\204}\014\263?7g5>B6\271?X%3\014\217e\252?)2\366\002\014{\277?\361)\022\251\357\320\313?E\220_L\356\210\277?\\\221m *\373\261?\025\266_qJV\275?\232=\245\212\257d\262?8[\355\037\023\302\262?\307\325\235.X\030\303?&\370\343L\314\240\317?\242OS\347+\252\264?}pK\237\256\322\263?\343\205\3150P:\314?\342\247\021\375QI\304?\364\020\036Q\307\001\267?\215;\202t\341b\300?\227\231\365\tp\337\263?\255t\375\326\334>\277?\363\307\320\213\274\247\310?\240Jw\036\257\234\267?\217\030\313a\350\362\272?\241\n;i:\353\276?\324\3511\253&q\267?\320\034\371\2069v\240?\241\255\200\313.\333\304?\255\020\271\215\304\323\276?\345y}\241\330\356\277?\377\220\341%\366X\266?\000\315%\367i\314\300?\334\335T\273^\316\262?\360o:C\035\310\266?E\224@\224y5\303?\003;\207\375a\365\254?o3uT\276\262\272?\2500+\036[2\303?%]\347j!\004\262?\r\n\035PC\017\272?\232\010\324\310\322z\224?\230\005}c\264\200\310?S\032\343#_\222\265?\325\357\333s\rq\264?\263\004\031\001\025\216\262?3\020J\346\370\353\275?P;n\213AF\256?i\262\356;`\200\303?\233\337B\264\334m\264?\267\273\026\023\354\026\300?\231F\230D\353\230\273?>D\316\273\344\221E?U\221\322\270\254\014\306?\355K\316:\367_\272?#\250uv\215\361\262?\247\252\306\316\270\311\272?\025e\3508\264Q\264?\217\263-&\335\246\310?\316\265\266\220Jh\300?$\331\360\342g\235\245?\377\335V\010\030\216\300?\221]>\231L\003\274?\274]\3550?\032\264?\330\023\215P\224M\273?\3619\371\362\327+\303?\317\231\354S\031<\266?\236\273\016\351xK\275?\337\374Dm4c\273?\307\006\373D\330\317\272?\0034|\321?=\301?\335\t\366_\347\246\242?\027\241\003\213\366\212\261?\321\030\006\\\362\240\277?$%=\014\255N\275?\243\340W\0346\340\266?\226k<\236\267-\266?\310,\217\366\276?\275?\272+\024\031\270d\302?7\242\t\201M7\265?\310\372u\303\220~\264?\243\366F\240\006{\257?\235\272\212v)6\245?q\013&\226E5\301?\002\355\210\3576\202\274?\007\216$q\361\030\270?\031\363\301\322\303G\312?N\203\036A\\\177\305?\272H%e \211\301?>&1\214\344\200\304?\2634\001\320r\352\244?\374\3658C\331\252\240?\342s\321\327\3064\310?Sn\211\371E\013\306?M\315\331\223\244\221\266?\312<\333k\215=\314?#\313L\340\013\320\266?]\2124\274\034\240\260?\335m\220\251\270\372\273?0\177\0300g\207\267?I\243\31756\265\253?\242RRKf\201\303?\232\t\310\217\337x\234?\200\305\373 \264\346\262?\377\004^\000\366\336\267?\227\311. \315;\267?\2352%\374\314\005\256?\377i\010f\003\353\251?\304\314\t\235\201\330\246?\237g\036\206w\265\273?%&\274\305B{\272?u\023\361\340kk\302?\376?\0174\355\202\267??\352\005X\021Y\275?\307\263\262\032\236\240\301?\340\023\372\177&\331\247?4\373\336\324w\346\264?\340\2230\316=6\302?\036N\356\344\304\270\317?C\\\236\246M\327\256?\300\021\235\230\007\206\301?L1\261@\216\002\300?x\317\000e\363;\267?\343\325\270\205NR\261?\206+`5\250\023\274?H\313\220I\227U\304?y\035\244\271\253]\307?\215z\225py\220\245?!QTu\020m\267?-8\334w\247c\235?\345\0306\273\317\240\257?\366\034[F\037\260\274?\334\'\354G/\017\300?\263\002U9s\343\314?V\217\025\253\357\204\303?w\332\207\255\272\275\276?\025\352e\353K|\306?\332{\034\306\327\260\266?#Dn\220\215c\250?\265}\0212eg\305?\002\225)\232\222\242\272?\020\277\356\266\003\334\264?1\335wN\253O\262?\\op)\264\232\210?9$4\320\034\234\311?\322\203\314\337\316\217\302?Ld\242\345\231\307\261?\225\327p\257\321\024\223?\0048\263\031\204\022\265?\300#\324S~.\262?^y\000\363\337o\241?={\330R\332w\274?C\022\014\3236\177\245?\n\025V\t\232?\303?\266\036\002j\021!\272?N\004\360\2358\203\270?E#\036\327&\030\253?"
      }
    }
  }
}
node {
  name: "normalize_element/component_13"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "I\374\013\266qA\264?=\354\200I\374\032\303?<K\334\237\225\370\257?\271\025K\\\212U\274?\002\216eC\374\030\265?\0072cS\254o\271?\2556/\351PO\260?a\312\336W\207\321\250?\014|\r\r\000\337\307?`>\342\"\272\021\262?\n\216\303Gaj\300?E>O\006\276W\267?{\316\"\203\370\032\306?\350\327H\245\347\274\306?VF\213\202\314\215\260?k\001\237\364\305+\272?\034\352Bo\233\360\262?\302\224 \332\311\313\301?\224\246g\230\337\013\270?\031\363Y\357N\366\266?w\252-\211t~\310?~e\246\000\215\334\254?\225]\264\360\212\032\272?\354\017\016\242\'\370\273?\331\034a\375\021\231\273?r<\222\327\362f\262?F\026\323\306\275k\270?D\322\331\2175_\300?t\"\267\342\277\031\264?\235I\245\034\357\265\264?\227\357X\355\023\340\300?\200$\274\2423g\263?u~\236\307\247\316\273?1\326q\333B\000\276?\021\253\225\302\351H\251?\263\245\346)\255\352\310?[\036a\324\222g\266?tmcD\206{\270?\036$<\210:\177\277?\375P\224D)3\264?\312\\\021\343\322\004\272?a\274\201*\267\262\254?\"\255\\h\341\004\300?4\220\340\246<\203\311?\032\005\230d\252\001\276?1\352\234\227q\360\260?XEM.\2452\276?b\272\265\361\314\360\262?oY\215>I\256\263?r:\274,\225\023\304?j\017\317\240\016\334\315?\326A|e\2009\266?I8P\207\3454\265?\005\035\226\316\323u\316?B\230\'L\"?\304?\214\310\267D\034U\270?Q\200\356\354\247\326\300?\216\2614lkv\271? \2702\367|\014\300?M\253\201\343\273_\311?\363d\023m\202\000\264?\347\221\237\212\244\250\273?\005\305\001\207_P\301?\356\034\341\354\212$\266?\2422\177\376\333b\250?\0269\317\316%9\305?\331\"\326\323(\323\274?(\310\201\267=J\277?\002\271\352X\252\255\267?4F\031\341U\245\300?\'\317\020\034\004\016\263?VX\001\242\206\r\267?\215\004\236\244\216H\303?\2730\021\360\035\225\255?\026\214c\207\245?\274?W\342K\362m\213\305?\236\215\307\322\250\274\263?\210#\257\321\351.\271?\261?\351A\312\032\220?\217\253\354\026\334\352\310?j\332\244&\352\032\267?\271\036\277\226\333f\265?\026\341Q#\'%\270?\014\261\tO9\275\276?\241m\266k\242\314\260?\265\325+\263\250\222\302?\206\252\211\037\022\247\266?\362v^\014\340\213\300?:\r\036\224\2327\277?D)TI\372:t?\361\247\254\3672I\306?B\213#\021E\301\273?\201`m\020\326\224\264?\013N\240/\215D\273?\377\177\265\315\001\300\265?\207\342\242\033\340\020\311?\334?\220ht\032\301?\245\3242\r\033I\253?[\246\274\334{\006\301?z\"*\202o\202\274?\213U\215\242*\315\263?\311 +\203`\021\275?9\212l\032\355\016\305?.\366\020\355`M\267?\n\221\030\254T\252\277?B\010\024&\226\330\301?\216\236X0\274U\273?\234K\256\270\361\224\300?\020\242\226\225\017\t\246?\222v\340\362\021^\271?u#\357\306\311\027\300?\361\212\323U)\331\275?\274\006\304\276y~\267?\000O\360\323\014\267\265?\tu\313\355\342\246\275?w\212\"\222\213\253\302?\314\340\241\210B\324\266?9 \251\210J\330\266?\217\352K\241\271\357\261?\371\3422>1\212\256?\263\301M<#\356\300?\210\0272\301\352\364\274?[r\356\014\331\224\270?\326zk\322\000\255\315?]^]n`\215\306?\313\307\033\204\254s\300?\321\223\273\232\377\001\304?)5\232\255\323\200\247?\266\240\0019\204\321\240?\254\t\244\357.\n\313?Dd\017\357d\260\306?\320\000\232\345\013\n\267?\315\206\222O\343\254\315?\316\203\031%x[\270?\036}al\000\272\256?:H\260\272\323\362\274?\206K\274s\220&\270?\326E\261\254\231T\250?[\304\267}}W\300?\335\257\230\227\027\356\251?&]+\210\036\004\263?!+]\231n\224\270?\"\372_\365\032\227\267?\204\207\025\340N1\260?\316N\367\033\234q\247?3\333n\262\250\260\264?\305\"\370r\256G\275?\035Nmd\257\333\271?&zb\233)t\301?c`\253q\'r\266?}\270\327\216Q:\276?1^\201U\346G\301?\217!\303\324\335\017\251?*\004wB\335w\265?q$\310\357\n\020\303?k. |t_\320?\276\333fq\231\257\261?\227\326<\315\035\313\301?X+E\270\352v\300?\033\374\305\270W\360\270?\010M\020J\237\243\262?\256\263\226\014D\362\275?\363\222U\312\230\246\306?T\220\312\r\271\353\310?\007\211\316\341CQ\251?\341\275.\271\r\307\272?\265\351hR\223\253\244?\250P\352\206\376m\262?/\355\236\263:\366\274?6\321=\244E!\277?Re\231\367\230\005\313?C\000El}?\301?\355\241k\311$\017\300?\232\242\252\251/B\304?.\254Fo\353\200\267?D\026\200~\223\261\260?*E\300[\377\262\305?\354\220\344\267\275\344\274?\353\247A\311\3137\265?\347<Q|\366\210\262?tX\322kbj\243?\231\027\300\221\311t\312?s\324\275\215N\217\303?\302GH\315\354-\263?\260\233z&\371\346\202?7]\344\330Yx\266?B>l\022Q\006\260?\t\t\346\"\235\005\243?\203\030\355\223\3218\275?\334d\274\374:\257\244?\3733[0\363\010\303?\232\212\020\373]\010\273? \017\364\205\315\326\270?A\032\016~\364\343\262?"
      }
    }
  }
}
node {
  name: "normalize_element/component_14"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "\231\263l\035\204\317\242?h.\373k5\310\270?\227\271\303\235@\025}?\211\242!\222\n+\235?\336\016\201\341d4\225?\377\014ge\230f\204?\016*\300c\267P\250?A\325\302\016^\031\220?k\313\312@\257\211\236?\201\217\364{\370\270\220?\257\363bm\373:\206?\034\031\317\223w}\230?\330?\255t\007I\234\277n\361o\036\356\355u\277\245\3416H\370F\237?7\036\350x7\334\232?\236\300*\315\234\344u?\243+q\032+\374\251?{\251\240\356x\235a\277\243n\334l\360\341Y\277\317\006B\255\307O\253?\335\t^C\\x\242?d\317;\241\031\274\224?\004+\034{\325N\231?\253\177Jt\032\222\200?\345+\254\0245\252\221?\001_\263W}\200n\277\3667p \2075\246?\3207~\265^df?f\370\330(\256\324j?a\246\004\374\316\272\204?\026\007\327\251\340Z\231?\212Q\230v\270\275\227?/^.\r\274\215\233?\240tx\301\r\034\223?\033>\000\341\367\372x\277\275V&\"\032\342\230?\324\247\277\330\'\362\225?\264\375\264\034\253>\256?E\233PyU\026\220?\325/\362a\337\026\220?\374\376D\232\265j`?\201s2\260\017dm?\257\303\267\001\266\273\256?\006\342V\360\304t\250?\007\367&-,\035\221?\'\3465\203\263\354\211?\236-P\3554\033\240?\261\'\320\023\016>\252?$\211\024\271\226\177\221?aH\201\027\023!q?\224\356\3272S9\211?W\317\220\304\247\r\250?`\335\321/\254C\223?\376\354\306\t\263\323\253?\215\006\375@J\320\205?\261\014\014\201\245\270\221?\241\254\207Kht\244?H-\260\241}\247\221? \245[t\207T\222?\366\231\270\367\236\001\231?s\257EkB\343\214?\241T\322\365\n,\214?\231E\036D\017\325\246?\266z[\244\341x\234?\231\204@k\324\374\256?%\256\306\206,\332u?\3600\241\r\266\224\222?=\335\343\306\331\346\225?i\021z\313\017;\235?\227\t\214\343*\220\233?T\311\005\t\177\366\221\277\214h\032\230\005\250\262\277\366\221\211\313Y\356\226?\327\237\340<~jZ\277ti\2625\021\354\230?\377:\002{\366\243\223?\302\314\273\r\021\007\250?\231\271\007\273=\025\231?p{\020o\216T\222?\024\213\rMA\315\253?\307\002\221\013\357\356X?\217\353\261\275\256\020\250?\234\006\000\037\240!j\277\357\020\304N\270$\201?cch\271\217\203r?\237sJOw\357\237?\265\3750\344\006\263\244?\372\260A\323\320\016\221?g\351\257\374\236\375}\277\351\204!\211\226\360\235\277)\317z\000\244\231\240?u\006\t\373\275\347|?\030\353\305\227#@\241?\032\005Q\217\036\323;?\002)\036\010\252\365\242?6\207\212\302E&\240?N\353\'}\320\234\251?\312j\314\201\244\243\212?\372(\002 \027j\242?_6*\005\027\n\244?\234 \274\006\025\006i?<\355\361\216\310\201\217?\260\256\322)\004|\231?\205qD\262\330\n\244?yEU\353{\017\220?[\021\203`Xu\221?\371\\Oo\244>\215\277$\035%|\335\214\220\277\343?\337A\2541\226?\017zd\343)\372\245?@\252\177\025\202J\214?\014\301\232\230hot?\\\364\030\\\2509\240?[\026N\375|\216\225?5[e\345\030B\250?\004o\246\024\004\'\245?\251of\342\300%\230?\244\033\0375?a\231?\236\350d\360\312\n\206?\277\231\323\220\261\r\256?\345\2343\375m\252\227?M\230\354|\230\355\221?\234]\214\273 \246\247?S\024\323x.\373\231?\213\316U\232dI\244?hK-\306\206\217\226?\262\357\t`jNe?\321\300\033\024\305\222\223?\217\350a\022u\271\242?M:U\264\365\260`?\311\330\255\276\352c\216?\341\003H(\016\204\246?u\251ok\233z\222?\221y\216\017M\265\223?\243\271A\371*\025\224?\310(qK\033vn\277\325\023\230yk\223|?}*7\351g\376\250\277\340G\235\317l\226\252?HX\271\357\317G\224\277\213\t\t\317\206\'\200?]\023\356o\262\010\242?\347\350\003_W\347\236?\24737\254\227I\241?\357\227\325\217\333\234\225\277\320\335{\246\001\375\206?3\254\027\200\234\351\221?so\200\304o=\242?\007\360\346\016:\237\210?\354\277}\006\234\361\222?A\225V \323\n\206?\234`\370\273\211\267T?u\036\255\033\003s\213?y\304\365\343\207.n\277u}\361\325&\377\245?\331M\0000d\226i?64\337mP\2161?7D=\306\332\264\227?yye\327\360\006\226?\356<T\307\350\210\201?\305\336\356Y\225L\223\277\250\374\020\300r)C\277\236\316MO\343\324\220?d\375\367\304`\034y\277\301[%\372\252\314\240?O\317\341xC\274\243\277\360\325\3766\332]\242?\311\264\371)\325\330\202?\357\010\220i\271\250\253?sH\024\241\253\211\202\2771\360\203\303pM\244\277<\210\351\267\271u\206?\221\351$\351\007f\240?\306<j\315\010\317\241?0F\\\264\213_\256?:\320\"_2#\257?\'\321(\3433g\220?\013M\247\257\306]\201?h\023\315\364,\267=\277\213>\306\254|n\243?\277+\311\3249\023~?\356\224\307\000t\213\241?s\333\201\344\344\030\252?\030\326\331\005\215\335\247?I\223\016\263\360%\235?h\315\260\315\235\313\212?\030\356@\303\271\213\230?\210c-\2430\246s\277\262\234\233n\215\223\240?K\263\317\034\277\333\225?\324\301\212\353\311\020\214?DM\032\301\313\256\205?\206Hl\310V\317\211?"
      }
    }
  }
}
node {
  name: "normalize_element/component_15"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "\026,\335v\004\344\242?\013\025\310^\202\342\275?\330\'{\251\252`|?vDXi_4\240?\356\255\241\004\230Z\236?\342^f\306E/\213?\\\354\n>LI\247?\324\256b!\325\330\217?j\322\233\301G\023\240?\332\\\002\336l\355\223?\220\260=\355\317\311\203?\020F&\277\311_\235?-\271\357\360U-\222\277\264\227V\0138\300f\277\272R\372\002\255\322\245?\002W\235\310\330x\232?Z\374\311\277f\036X?\244%W\375\206\223\252?\236\223m\361m\276\306>U(!DqH\200?\276\\\3131G\371\252?T]\343\332 \370\242?\327#569Q\224?\177\217\205\336\236\304\232?3\350|_\371\177\225?\362\320mE?s\220?\257\361\376\027\206\312r?\373\014\221\233-\225\245?\013\302\257m^\220e\277\201\231;om%g?3\205\265\316K\007{?\246J,\3320\313\243?w;t\332P\272\225?\337T\210m\251\210\233?\355Pf\346v\355\226?\020@\220\332\311\202W\277\305\325\240\346\346F\231?\254\210:v\307\227\233?1\251\033\324\360\300\255?\270\265\020\332.\021\210?}1u\006/\302\226?\202\'\026\300\340\017i?\004h\024\370\2564}?k\254\241-\027\214\256?\211:\205\362\304\307\246?\021\014,\357\306\\\217?<\345a9\363\277\205?\222\276K\324\313\"\240?]\234\332\024\355\374\256?\034\20293\'S\224?M\374\356\251\336\022\203?\352\366\013\3265\343\207?\000\001.r\226,\246?\233\001\221\362QN\247?I\273\253\000\332\264\253?n\022\3370\241\347\216?\204\0260\206\0241\224?\350\272\346\021\200\330\250?)\210\rXj\244\224?\261\305\'\312\311\267\225?s\3546.7\246\232?\377&\375\205j\277\203?\210@\225\235\365^\215?,\343\002wp\025\251?\201GG~l\256\241?\016$\200\177p\334\260?\253\270\362\013\017\227}?g?\200|q\370\224?\033\244\214*V\034\225?\213\351\242\036+\303\235?\243\222[\0176\247\236?\316\310\314w\203wH?\261)\222\332\204\256\253\277O\262\245\254~#\232?\211\375c\366\271\247i?{K\350\027\355=\243?\020\316\036\235\367U\234?\320\374\256+\r\314\242?!\341\270\342\233\323\230?\3675\341J\265\320\203?E.\257\221ak\250?\352\236\2578 2\220\277\365\364\334\005\364\t\250?\263\245N\r\"\274W\277G&\347\221-5\210?m\203\221\2316\334r?\241&\327m\2004\240?P`\324\312\221\211\244?v\236\362\224G\312\221?\314h\261\002\346\2339\277\344\305\001u|\024\223\277\007\306\272\353~\253\227?Lx\327\023<\t}?ZW\341\243\271\246\241?\002\365O8\007DB?\314\016\271e\374\005\244?\230T\017\306\2777\224?\315;\375\211\222\334\251?\274\226\341Vy\266\222?8\2656\004\374W\242?h\\\257\0364\021\241?\2127\220\000\376\301y?\022\346W\"9a\216?\227\033\002\003\345\017\232?)d\325\212\260\215\234?\300\332t\253\267k\221?\017\2356\224\356o\221?Pc\330\347\205\311\201?\304\317\354\253\214\365\212\277!\n\226\205\327w\213?,\021x\305+\307\245?\264\t\220\236\253x\220?\375\332\251\242@\353v?\320j\353!\306\335\241?\356\372\360\037\027D\226?\207~a\212V\024\250?\360\272\266k\315L\241?3\312\005\367\233:\233?gj\nK\331u\237?N\313\320\367\241r\202?}\251\327\341s\035\255?c}\371 \250s\241?\340b1)\277\276\230??\366s=\343X\250?|Yu~\323\271\241?SK\001\326\2332\251?i\210g_2\273\226?\342\242\203\303E\315[?b\314\344;\373Ab\277\332\307[\305\032\342\242?S1T\031T\210x?\327\300:\264\346\314\214?\271\335\010\341\212\361\242?\377\033\324\256\244=\225?\001\255\027H\362\212\231?9!\370\010\312\247\224?q\340\301\216\200\203V?u\337\212\364=K\225?H\277WV\225\333\252\277\016<f\274\207-\253?\2332D\t\213n\223\277Uv\217\246Y$~?5Ed~\214\276\234?\211\305\276P\377\332\235?i\030\023\242IP\240?P}\272\226\2359t\277\273\177\224\'\374\221\203?!\236\340\363\247\263\235?\256\217\257\206\211\333\241?\005\326F|\364t\210?\230\243_\014\371(\226?8J\240\2715\206\200?^\n\177\356\032\340a?\253\346l\023\204\261\215?B\202\351\201}\336v\277\360\377\205\023\010\243\255?\214\020?{\005\324y?\363\"\241\232\203\201F?\273\307\2703*\250\226?\243\373\210K\315\237\230?\263\001\006\271\363\023\202?\262\035\337 R\272\223\277l+\356&\225|n\277s\032\334\265\010\265\210?9}Y\264\342\026a\277\331\357r\3314+\240?\236\340\363\247\263\261\241?\341mn\344k\343\241?\355=\367F\366\006\204?O\371\211cZ$\257?\317\375|+w>\222?X\220\262\272\337\345\263\277m\000\231J\375\304\220?S\303\363\\#\245\244?q\033.\356\026\263\241?z\316\023X\313`\256?}\014~d8s\254?\317I\304\233\002\207\226?\362\261e@\220\230\201?T\255i\0049-\212?\2329\272\320\260\246\245?k\246C\363u#x?g\346\205\030\0102\242?\357\253\005\005\304u\257?\263\223\316{\364j\206\277\277\354M\365,T\235?;\300Yk\244|\213?\310\3450y\262\204\227?\342g\022\253\3654F\277O\371\000r\374/\241?/\201!\314i&\236?h0\'\027L\304\223?\021\274\371\304<Vy?K\\n\000\233K\214?"
      }
    }
  }
}
node {
  name: "normalize_element/component_16"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "\214\020\213\tK\353\242?\303\2640\212l\207\301?\214\tZ\026\206\247{?3\031G\022\250\361\242?\020:\227\313\016=\224?\330\335\307\307\252\345\217?\034\320\0242>i\246?\033\004K\345U\354\217?o\374\363\256&\301\241?H\273\377\377g\343\226?h\036\370\314\035\363\201?\024\005A\032*\323c?\231\215\306\210\341vz\277d\267\200\344^\337E?\276@\302\220\322\365\254?\312\327\337\276\200\361\231?\014+=\034\"C\224?6!\226\225r3\252?\271\330\003\231\334\251b?\323\350\202\270zg\207?\270W/\204qw\252?>T\333\314o8\243?\253G\313\225\002Q\222?\031$\221>,\"\234?\330\345Y\036\253a\225?}\014\036\362\013\271\220?\335\tc\374\025\341\207?W\214\343U\020\342\244?\300\366\304!\270\035\200\277\023\271\326\232\212\255`?\224\373\326\264v\316[\277\214\247\026\370\'D\245?\324\030\252\353\033[\225?\3337\374\020Id\233?\233z\010\243\214\312\225?\tJ\016.\326\235\"\277\312U\3336T\330\233?\230\203\371[\235\304\240?JK\255C\2522\255?)`\262&S[\213?I\312\'u\023\306\234?c\356U\211\204\177q?\203\240\'\216\321t\205?\212\022\350\244\3338\256?\247\325\232*;\244\245?J8>\244)L\211?y\225x\352\330\333\206?\324\275\312\261\'G\236?a\032Ds\266\343\254?\267A\023\177\031.\226?\307\211\360\333\2028\216?\350g\265\203\273\372\207?xJ\251y\376\034\245?B(f\362\n\032\263?Q\\\322t\035z\253?\331x\333E\313\223\221?^\344f\004\220\344\226?4\256\343\270\206+\255?\251\347\264\331\036\336\221?Zp\300`\227\336\225?\020\306\207\215=q\234?\345\334\375\\\372\270\206?h!\035\370\372U\216?-Uq\374\263\223\257?\000\216\211\ttj\243?\255I\025\227sA\262?\2425A\377\375\\\202?\334\005\236\t\272\256\227?\342\334\221w/s\223?\226\0268\035$\353\236?\260%\327Y\234M\240?\262r\225\022u+S?\025\273v\234\264\006\241\277\226\016\250\307N)\237?{\355\314\026\246u\221?\016\010+P\266A\252?\321616\n\317\240?\007\214\n\251\226\005\240?\206d\221\276\372\214\230?\310w$\274\017\320U?\210 \302Pk\300\246?\326\337\267\306\014\371t?\"W\357\022\3122\250?\210V\221K\310yB?\344\373\223\014\301\360\220?\362\313&\341\276\345l?\246kj\374is\240?\251\230>\314Ba\244?\335\2137K,\235\223?\224\264\333a%|u?\272\210\3716 \351\221\277\201L\027\324J0\260?\275\357\205\272)\224~?\356\260h\276s\275\241?R\247d\202\337[H?\321\246\241H\"\364\243?\213`\036]e\240|?esLK\351\357\252?\314\321Z\006\331\010\215?\016\353#v\301n\242?\313\320*\223\027\"\234?\316\241j\3062\225\203?\312\340oN\001=\214?\333Vvk\340\341\232?\006s\223\317-\237\233?\017|o\200W\323\222?\003x\224\025\206r\221?\016BH/\315!\235?\303\033\317\3601\033\202\277O\207{PC`\210?4\300w.\233\037\244?\273r\225\245\330\374\222?U{\355\246O\003z?$]\335\370\255\262\241?\035u(\316G\325\225?\322\027\233\206C\227\247?T\200\2275\213\371\234?:K=\311%\247\235?\353\370\203\017\222\366\242?]J\266\352\325(\201?\212\244W\257\224\370\253?\003\331\030_\247\235\240?J_\335\270\222\013\240?%\264\311\007[\361\241?\024\231\344@B\246\242?\360\232\241\002qh\246?\207\340P\251&I\226?>`\002\335\265\211u?\3674\302\003L\336e\277\375L\3435\264\243\241?Se\"\351\3669\206?\302\355}h\356:\212?\212\n\031\353\302\337\240?Y\021m{F\030\220?\306?s\243\266w\237?+\333s\330\376G\226?\210\316\322\030$\262|?\":P\034J1\242?sE\264\023\341\003\255\277 \374\245\3645\223\253?]t\252c2\250\224\277\031\252\312\rrV}?a\375S57b\230?\022pG\271\255\215\234?\366\270\007\322\331\212\236?\r\376A\316B\325\204?[]D\227\024x\207?>\337|\016\037\035\234?(\345\372\346\032@\241?\216\365\n\224\337e\214?\005\236 V$\313\230?\251\320\001\310W\242~?\237n\323\261\340\004Z?\212\206_\306!\326\217?\003\315.\262y)\204?\351\221*}-W\247?\333\377\024O\274Q\203?\325\231\367\017TSS?5#\312\261\321F\225?\025x\250\0374\270\230?2HHD\373\317\203?\230\251\026\377\341(\225\277\003I\0038\360||\277\322\321\315\245\210q~?\363\265\035\t\352Jj?\0161\027\036\037 \241?\333\026\201\213\367\336\225?\207C\307\362\324A\241?\265\312\375\")h\205?\200\333,\301VG\260?\220[\207\373\254X\244?\020\244l@m\034\253?>\321B\360b\333\206?%\361\020\313\010\235\250?4\312`\260\016\214\241?\027\347\n\027;\337\255?\305\271]\232\350\024\250?a=\300#\302p\240?\001\273\363\364\254\314\201?\206\255\377\221\356\211\223?#\310\321\264u\204\245?p\260\273i\310\262o?\372\277\3608\257+\242?\371\035]\201\365s\245?\373\262\230\376C\377\230?\032\364$7*:\235?\342\327O\314hN\214?\023.\356\203O\032\226?\t\220nrb\211c?\377&\375\205j\277\241?%\375o\205\255b\243?\244\367\273\347(V\225?\201Cp\250T\223t?\261\266\340G`l\222?"
      }
    }
  }
}
node {
  name: "normalize_element/component_17"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "\371\221\232\367\261\342\242?\351)|\372+\313\303?\257-\355\350@U{?3\264\033,\205\010\246?l\251#J\362\221\223?p.\313\305\202<\221?\266,\250m\230\250\245?\221m\244b\037A\220?Op\356\005\037\260\241?k\372\337V\351\n\232?\205d\020>\345\257\200?\312\241\236n;\225\227?1\303`\255\303\231k?\215\200\031r\275\204r?\374Ok\213L\357\261?0\367W\374\227\205\231?\027Ec{\232\204|?\320\013\264\221\244\321\250?\240\223\314T\002\016s?\2312\366y\032\235\210?\t\002,>z\315\251?\323z\307B\3272\243?_z^\236\214\371\216?H\320\353\221\376E\235?\315\365Z)4\253\227?\314\213t\210}\327\221?7D\022F~\300\221?\031\211p\226\t\364\243?\231A\313\246\233E\211\277\211\274O\317g\262R?I;\003]\332\364\210\277\212.\027\r\363\307\243?\274\314\0305KA\226?\214\344SIb\036\233?\023c\202\342\023\'\221?U\007\035\315\301\316U\277\240\3142\320$\315\237?9B\212*\221~\243?\027\031\352\236\337q\254?\336|\324s\223\227\223?\355\267gw\367\351\240?\302p%p(\322v?\035\200Q\245\rW\214?\326\372\234g^\241\255?\334j\352\375\305\272\244?[\277\354\340X\376\201?Fs\004sk\007\214?\014\317\234\014\306<\234?\357\223\255r\304\001\246?h\260y\272\222\233\227?<\321\340|\013g\224?\246\272\"&\0306\211?\026\225`\263T\305\244?\350\'b2\321\367\271?\205\274]\260\315&\253?\031{\265\3677\325\221?\t\236\335\202\356\220\231?\253\353\372L\220m\260?\375,\330>\313\220\206?\315\271\360\220\035\254\223?\017<\274\274@\026\236?q\034\006`\364\366\220?\300\021=&\333\213\217?\326\252\014\314\322\032\263?\307\016g\3245\300\243?\273\351\323\200\372|\263?\374\030C\236\374\224\205?\301\345e\330\036y\232?\\q%\306(\213\221?\207\201\273\247\003=\240?\246uea\231\310\240?\342W:\214:Tr?\335\023\211\341\241*\211\277\362\316\355\232\232H\242?\303\311\257\177\324\257\242?\335h\327\357OJ\260?\313\271Q\272\255Z\242?$X\0031\\_\236?(m\363\304H6\230?\030\251 \324\177\265v\277$\350\305\017\351E\246?R\006K\313\001\350\231\277\006\034\036\317\"l\250?o%\272\265\354\023g?\343\215\321\3348\231\226?4\356\264\322\367\\^?\332n\272\031\371\262\240?\327f\240\210\3766\244?l\036\001\210-\320\225?4\315\212\224\245W\204?\265\221\004D5\343\226\277D\031\373\251)}\226?\234>\252}\024W\200?\206\371\004\346\247\214\241?7\320\0213\332.M?\001k=\222~:\243?\rZ1$s\241t\277\030\230\2434\214\234\254?\225\271pU\026\333m?1\023\320:f}\242?\\\350$=\007\364\226?/\307\370\036\230\035\212?\324%gQm\252\211?r\323\030\r\026\327\233?\372XW\213\243\000\241?d\014S+\261\n\224?\334\377\327\353\243t\221?\017ux8\034\276\246?a\270\354pq\335o\277\243\346\3079\2231\220?m\250\246\221\207\237\241?\375{\206\366\005\202\225?o?q\344\247\217}?[\253\221\353\0231\240?%Q\346!~\276\224?7S\257\310\240\364\246?\330\267=\2107G\232?\335\226\005i\177\315\237?\220Y\315\245~\377\245?\336\0326\234\302\342\201?\235]\245X\301\261\252?\210\327\331\266F\t\226?\352B\266p|\224\243?\013b\354\371\244W\216?l\261\362\003\013\353\240?\217\355$>Q\273\234?\240\001\241gFN\225?\337\302\0139\356H\210?\324\277^@\263\024~?(\337\033,d\372\236?\3209\252`u`\220?h\001\306r\314+\207?\233\214\036P\032\220\237?K|\002\351\341R}?\360\231\255;dj\242?\224\234\336\210\230Y\230?~\233m\212\241~\212?\225\354\357\2449=\251?K\312\005\260\306\256\256\277\315\371d\360\360\321\253?\235f\322\275\206\224\226\277\277\272\3503\271{}?\234\236\240\342r\233\226?\014\300\200\n\271\345\232?\\?2Z\235U\234?\363\316d\251<T\227?B4\263\311\363v\212?QJ\226\000\355(\221?\2148\237e\326\205\240?\304\316\247\235\200w\221?\302f\270\265\020\332\232?Q\3116\371\370G\201?-a\310E\020B;?\032z\r\277p\356\220?N\322\367x\363\344\234?\004?B~JV\232?z\203S\022\036\334\211?O\3177y\374\244[?T\377\227\240\303\322\223?\201\232\340\357\245]\227?\006\206\273\231\"\327\205?\014y\t\360\013\037\227\277\rD\017\257\375\372\203\277X\0338\247_\020k?ih\202/\3543\202?#\253(L\202\261\242?*\255n\336\000\177\233?^\345\020>\202\205\240?O9=\'q\341\206?\272\016Y\315\010)\260?N4\233\t~\002\255?\256\350\t]\037\\\255\277]\3416B\032h\002\277\203$:k\272\025\254?\360o\n\n\007k\241?y\234\002\226\345\266\254?\362\322R\033\312\300\242?(f\200\265\261\254\246?\253S\367^\002\013\202?\003y\234\300y\023\225?Q\306\033@\217\266\243?\252\033v\177\277\017\\?\371\214\203\314G\262\241?\366S\334\353\266!\262?\343\305\200\364f7\203\277J\306UX\265\023\235?1\036\335\274\374D\215?\272\275\210\334*\215\224?\\\374\347\025\301\222r?\362!\311(\246=\242?u\213D\221\203L\247?4\362\237\214\366\032\224?\200\311\305\314\311\201z?qQ\254\241t\354\227?"
      }
    }
  }
}
node {
  name: "normalize_element/component_18"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "\315ocv\300\274\242?\375\215\326N\035v\305?813R@\361{?\245\332\271\306\355\353\250?+i-\033\211\017}?)W\253\2100\004\222?yU\266\373\224\344\244?H\3538\026\305\277\220?\005\232\375\361\306\230\242?9\232\373b\361\306\236?OB\375\357\007\212\177?m\307\222A\007\300\222?\341\247\024\265\340\267\260?\003.\021m\234T\201?\234V\002\020\024\313\264?g\212@\302\036}\231?\316S\340\016\033\377\212?1\340K2\211\262\246?\026\014\351\033\221\"|?ZI0w[Y\216?m\354\337\343\266\367\250?\373\372\371m\212\362\242?\204\"\265\007\\\202\210?\374\031v\311L*\235?\375yd\275bW\232?\2617\032\210\261\301\222?Q\224j\360\325\306\226?D\342\002\366\357\377\241?\244l\\\302K\267\217\277\323T\366-\330\3452?\277\242\213\350\377\236\225\277\310/\320v\313\\\244?L\317\354\241\032\202\227?DS\2463X\272\232?\241\003\310Y\243\341\206?%\222\004\273C\205h\277X\006\271\261\367\347\230?\310\307\034;\020\250\245?p$\252\231\260[\253?\340jLq\035/\233?\007\276\232\352f\322\242?]\262\"Q\005/|?\036\320l3\"\014\222?RD\322\343\001\251\254?Z\372\356[O\242\243?U\243\316\0216\222u?\r\225\005g~\242\221?-\222\365\"z\034\235? |\014|c\r\233?v\240\303\206\353t\231?\017\275\3175\357\337\230?\376:\315\210&\336\212?a$\031\021C\255\244?\345\017\311:c2\277?$e\225\026Q\272\252?\320\254\273e\306\\\221?pS>/\325\377\233?\030\245\014\233O\275\261??\261\365\334\247\202p?\016J\034\242\237\343\220?\350_-\237.P\237?T\014\372L\242\320\227?\347V\354U\202\312\220?\242\230.WNa\263?\251{\256\000\360\231\243?\366R\215k7R\264?\204\263h\365f\270\207?\310\177N/\233z\235?\341;@\026\363\212\217?<!\016\356\333\004\241?\271\003mY[\004\241?\322\345\024\267\346\233\200?khc\".\313\202?\202\223\242\322\336\231\240?\311Vl\323\245m\255?#M$\347\260\272\262?\311\327\361\241<\332\243?\217\345l \256\263\235?r\306\310C\363\301\227?@\273\253mv\343\206\277\261\002\213\342\246\035\246?u\242\277\370\353\023\227\277EK\232\026\'\204\250?\034u\220\261\274\246u?\005\245=e\002l\234?\233Q\220tV\037\351\276\222.\245Jn\366\240?\254H\037\317;\t\244?k\311W\300\014\337\227?p\311<\265\244\352\215?X<F\220\202[\236\277\232A\024}R\256\233?\213cHA\374k\201?\036n\357i:z\221?H\321D\204\361fL?\320:\262\013i\001\242?\n\224\347\326x\244\216\277T:\356\032H\245\256?(\r\031\265\031\254\202\277\357,\303}\271V\242?6N3rP\241\222?\023\254\232\265N;\220?\230K.\357?l\204?m\331\003\250\007\327\234?\234lz\205BZ\245?$_\3771Q\335\224?\355(\236\0301j\221?S\331$\375\305\205\255?\252\360%\\\341\300X?\030\030&\021\351\320\226?NA\225\322\347.\245?\223T\350\264U\346\227?4yI\352\244\301\200?%\210\026\200\026\260\234?q\304q\030\200\321\223?\027\'\257\257$b\246?*\366N\007\335\036\223?!\025a\353\233\371\240?\005zPl\337\205\250?\366t\020\234|x\203?\331R\201?nR\251?\340zmf\217x{?z\334;\223\313\271\246?\302\350\371\240U\320v\277O,/z \022\235?\366\035\306\033\3169\202?\272Y\024Z\374\304\224?\010\3448\016\301\023\224?\347\275\260\203\352\351\206?0\nZ\377\3511\232?D$kV{\255\225?\037`\236\257\010\347\203?N\t\256\020[\034\235?\335|vK\261m\001?\345\207\252\225\222\260\244?\207+\341\265\275p\232?\024\351\007@\237r\223?\354\200?\212\247\017\257?\256\0234\271Z\037\257\277\243\244\205\240\252\017\254?\"\277\322\207\233D\230\277\007\322\256\n \361}?\177&\341\223e\300\225?\262sY\240k\314\230?\265\324\3342)\003\232?\312\232:\212\321E\241?\t\272\237N\327\345\214?\021\353\355\314\215\264g?[M\026x\240\256\237?`\204\230g\377\345\223?\355\205\353\031\016\300\234?\343\374\345D\317\356\203?n\234?\257\271\230\017\277vv\215\361\274\257\221?\203\270\240.\272\013\234?\3768\246\226\311J\243?|\216q\300\014\230\220?,\334\374\003\010\306a?\2407f\360/6\222?\226\350\260\353\254P\225?7\002\373,\362\222\207?\216\327\351+;\t\230\277\334\266M\303\200\275\207\277\236\210\030\213\263\3355?\034\300\300K\'\024\215?`\0370\036\304\037\244?\202\006\373\254\273D\240?\241\223R\216\321S\237?\342\235\251\373\363y\210?7\251c\363C5\257?\363GI\366\245\n\262?\356\314\372PF\265\224\277\000R\255\033u\310\207\2778\323\010&\314\356\256?\256\241%\246C[\241?\270\247\302\327\213,\253?F\364h3\031Q\232?\270\325\237\t\274\257\254?\375m\240\327\327n\202?l\305\333\243g\025\226?\316\220U\n\264M\241?\310a\340\\\253\224\001\277\334{\007+\215\031\241?Y\201\r\307t\232\262?D\034\275\252Kw\227?\3147\274\317\3325\235?\267\031\360\367`Y\216?3eB\364\355\"\223?P\351#\232\207\3466?\332\031\336`3\266\242?\3011\037\236\222d\252?=\347\227V}\215\222?\230\212\324N\251\037\203?\277e\353l\n\\\235?"
      }
    }
  }
}
node {
  name: "normalize_element/component_19"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "\326pk\264\027/\256?G\245\304\355Q\361\323?\250lI(,\332\242?\220O\2612f\207\264? ]\033\023*\004\270?\016\236\026w\024\313\261?\245\024X&\032\251\243?\2606\301\225\276 \261?\3464_\263\311R\311?3\200s#\205b\270?O\216\230_!\001\246?\315\224xn\021\000\272?C\222\027\241\361\247\242?\206/\324\340\004F\275?Y\376\322[i\275\262?\206\224\317\215\021\022\300?\360\370z\347\345j\271?W+W\233\246\237\270?\010\336m7\361\360\260?\277\254\007\316DQ\272?\277G\325-=\305\256?4S\035\0343\243\263?r\rW\372\025\332\255?\3414^i\002\r\244?]\237\263\261\204H\243?wj\304Rx^\246?a_\246~\302\177\261?\362\323\227)\326>\243?g5\321\245\207\272\230?\374\341\306\261\036\214\241?%\243\201Z7\036\264?\tk\245\010W]\270?yZK\357\205C\266?\323\'\361m\205\246\265?Z\321?\361\376 \275?\362Z\004$l\010\246?Y\243\031\351\0275\275?\033\325\3102\355\260\266?l\322\310B\317A\306?{f\254\252U\303\246?\231\275U\237\367;\310?\221\3513\0245\240\271?\023\354Z\243g\370\263?E\3224I\250\360\261?\234\361\200)8\371\203\277\315g\241\346\251c\261?\'\366Tw\372{\250?\004\353!\3422\343\264?\373{= O\031\255?\243Z\036M\360\253\264?\360k\316\010\t\215\322?\177h~\346\300\263\266?\372\303\212\253\256\251\300?\371\342tZ\003\220\306?\005\257G\365^\373`?\030\361`5\335\005\266?\000\016\327\363\000Y\265?\372\035\222s\3059\200?\031#\366/g;\263?\3217\227R\377o\236?\352\212\271n\301G\301?{a\031\270\217\236\302?>\347\355V6\366\272?\325\375\255\256Ta\261?\027\217\227\335\257\234\304?\006\272m\024\226\316\264?\026s\301-\340\344\261?\251t\274qn\355\302?\254_\237\357]9\254?\010j=\3536\202\273?\202\376\306\307\274\310\265?\331&\250\360\206\205\240?\035\r\221\347\273Z\314?\246\\\017\226\031\205\275?z\265\343S\356\250\245?\221\344\262\004+\244\321?fE\266\356D\033\267?\306Rz_\302\214\245?\241\310\220\354\334w\242?\377\227\003\356\215\342\304?j\345w\375\3663\273?\032\326}\225\266\027\274?Jo\340W\252 \303?\326\016j\262\213\221\263?\365\243\021\316\317\326\263?\'\200\322\270\206\005\262?\265\227\213\375\007\006\265?\220\346b\350\345k\273?\300zS\306\374\262\261?\313HF\231\320\216\323?q\366d\204\013\207\315?\303\276jS\3373\302?\303\234Yx\202\360\300?}+\230L\2436\273?\314\216\277z\375\305\243?r\3757\006\317J\257?DU\315%\265M\236?\317\213\0065\353(\306?\224\353\037\244\244\020\277?\273jfy\223\351\255?\340a\034T\311\035\266?U\302\265\010\374I\247?q\372\376\366\nE\274?\256\363\220\245\346\335\241?v\347[\257\201\336\303?AR\3241\230S\265?\360\275\001^M\273\266?\362\'\227\267\004O\314?w\t\242|\256\'\265?\004\036C\300TE\244?\002\2144\337+t\305?\330\240\314\222BQ\255?\354y\246\263m\372\254?\271\311T3\376\014\311?\362\004\270\334=\031\267?\371\350\206\006_!\277?\375\324>>\235\202\272?\267\235\341\306`\327\271?\356\233!sj\211\261?\3414\010iI\344\300?\267!\323\225`\225\301?\204\276\003\"\025]\260?\021\271\336\013\323D\262?/\275\201\362\014\324\313?\313K\301\304f\032\275?\213\304\343&\223h\271?\025\224\206@L\307\303?\275\022q\010\217\025\243?\261\325v\367&$\275?\321fjLg+\301?\"L\211\330\353S\262?#\200\255\250G\356\267?io\360\205\311T\227?\330\276d\t\211\271\263?\205\256Y;E\237\255?ke\023w\364\363\304?$\rx\335~\240\240?\022\254L&\336\351\264?\254j\310\306#{\314?6`\365\037P8\264?N\000\017V\255\026\302?\037S\266\311Z#\277?\307e\232\270n-\276?MS\374\306t4\301?\317\211r\246_\333\277?\276\342%\017v\320\266?t\360&\241\357\314\257?`\333\252=O0\272?\245\247\315\332\233O\261?VY\023\277\355\377\306?\212E\336\002\241\246\245?z\306+\001\022\374\271?\241UhK\026\352\303?K\302*\203\017\312\277?/\254\241(^\322\271?9P3\346\246\024\327?\373\'\253.O\003\262?\037\000,\203N\256\271?\362&M\360>\250\262?]\352\'i\354\265\224?}rG\021\257q\257?\337\212a\332y\023\274?D\361\026\207\264\277\267?\333\305\355\3751 \311?h\234Xp\327\374\252?\\\037\006U\313\037\266?\263\215\361\301h\337\233?\263\016GW\351\356\264?\014\350Z\273\272Q\277?|\275w\253\031\337\266?p\313\325\374\351 \265?\002\200Y]+z\304?\3532*\340\006\313\267?\257\262oT\222h\265?\336\016+\341\253K\253?>\347\006\364\326\001\306?km\306\333\335\022\265?FYnR\231\256\241?w\301\355\304=z\256?\301\224\312\331\020\243\266?\01041\215\301\353\243?A\211{\236\322P\317?\367\373\276\262\344\207\254?\265x\317\206\236\202\304?1\230R\246\267\220\273?\t\006T[\221\350\304?\216G\321L\3659\253?\311\0364\312\031\333\253?\335N\237@\177q\300?\352#\033\010\374\363\242?\317\262\r-\311\271\264?\273\247\316J*x\303?\'\006<\301\342\226\237?-=\370[\313|\302?"
      }
    }
  }
}
node {
  name: "normalize_element/component_20"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "j\220\306\304\215+\245?\'<\020u\371\270\250?\350\003U\345s\325\241?\252\257SQa\021\250?g\236\214\2146\020\250?\331v\313\357\343Q\245?*~reg\t\247?\351\233\030\270Z,\256?\274\213UU\370\313\270?@\237r\223\353\202\265?\005F1U=T\260?\367ef\357W\304\251?bv[\221\264\365\211?\273W\200\313p\367\240?\347x\220\224\260\023\240?\000\253\334q\256T\234?Z\375yiv\034\257?\275\254\325\223\003\272z?\223b\364\232&\205\246?\033c4\346\006\'\232?H\026\373\216\213\261\240?-0\013\275cP\232?\270\215\260\357]_\262?\355\211\314a\231\254\245?\025I\337\227?N\204?5\273o.^)\255?\0346\205&m\320\250?\337\267\003p\021j\273?\214\2542\334K\335\235?\307\027\321\234\023\000\263?\366=\260\004\316)\261?-\314}\235\224|\236?\'`\246\263\264\317\250?\226\031\326W\316\023\241?\'\306A(@+\246?\3751J#\250\222\262?lQUW\364=\231?\3228\251of\342\214?\305\272\225~\362\022\234?\377\220\014\246R\315\247?I\333y\224\252\352\212?\333\234\236\005\016Y\243?\217L\265\206\272\336\260?!\'jn\'?\254?\276kmm#\226\252?V\031Q\320\251\010\252?\243\355\356\272\344\243\261?\271\303\005$\212^\262?\377(\226\315\257\365\237?W\010\"\300&A\260?\325\252\363.2\217y?\243J\312f\331V\221?o\200\265D\020\342\250?/6\221\277\322\376\233?GN\335\227^[\224?\202w\326\224\202s\232?\"\346\302\343\003\204\240?\277\276\340\027\272\271\210?\374\254~\341\237\226\252?\033 .\277\'d\236?%q\252C\333\"r?\247\230\275K-\204\253?z\275\226\270\327G\230?\257\327^\205@\240\212?\2728\272\342\223b\244?0goVh\023\214?Z\326\036r\n\335\267?\300\301\370\030\225\234\243?\213\266\275\354\275I\254?\375\247\377\322\300\224\243?O\357r\251\373\024\262?\277\207\265r\333\260\274?I\t\304b\t\250\244\277\022\321\364\201\000\363\242?\2532\005\313\016z\225?\t\370\271\312\250l\265?\2326-\302^r\221?w\022\026\267\3778\246?\272u\035\373p\310\230?\246\230\237\365\322\217\265?\334\n\345m:<\256?$\200Y\251\271?\243?\237\366\347\344=\265\243?qO\217!\213*\225?\367\373\266A\234\360\262?:\364\241\001x\350$\277\001\371\204\177 _\225?R\005\030\240\261R\241?-\252>\212LV\253?\021\006\202&\340\334\247?M\226\372|\013 \231?\250\337\302\020\362\247\237?\263{\312\350\202%\177?#i2A\337\246\257?2,|\006\237)\265?\177k\265\364Y\177\251?E\334\362J\277h\244?[6=\2376\347\216?\276>\361\236.\313\262?h\032\271\023\221\006\\\277\005\035\306\007\352R\240??\255\036\007\220g\271?v\347\303\222\366/\241?\332\177\353*\247\264\240?\035\366\255\234\336A\217?\313E\264\321\3041\202?\"\353\035,k4\261?\265\271\tu\223C\236\277\343\322\034L\317c\253?wBfi\322f\243?$\315\333\265\3354\262?\007\324\252| \220\254?;\225v\344\364g\257?\324\264\031\024\276\330\222\277\312\000\035\324\350O\253?\017\371{\352\327$_\277e\236\367\':\220\222\277\230\003VqWm\260?p\305|{\002!\245?U\261\306\023 \216\247?by{\003\330\357\253?\371\240\210\301\323\026\267?\216L>x\030S\241?\321\305F#\026f\250?IP\345|\375\205\236?j\311\374\006\232\215=?\342\221\272\225\014\235\250?~q\021.\320-\250?\303^\261Q\231\014\236?v\265\257\030\202\327\223?<5\2058P\214n?,H\274\007\253[\240?\326\370\027\004\000\016\236?\237<\333\214\233f\266?\034\265\241\346\324c\247?54\r\246;1\251?m\277\3731M\333\242?\225;H\\\273E\226?\033\226\023\250VC\252?\005\266>=\232\020\265?j1x\230\366\315\243?!\030\322\244\276s\236?\376Y\320\324\033P\240?\261\r\276+\340p\243?(\363\243\2420v\260?\310\013\315\233\341\013\253?/\033\201\236$b\256?\305~Vf8\010\251?\273\371\333\330\313:\247?L\037\316\204\245\010p?9\\\222\240Kz\220?\216\367,\315\202\020\262?I\"\335\312p\016\271?\302\t\2264\220x\250?\310$\327\330\0338\262?{\2659T\247\221{\277\377\270g\327i\026\245?h-\021\027\234\233H\277\006\315IPE\357\251?\241\357{\217\213N\255?\0014\010{,`\271?\230\330\230\261J\344\204?\250\310V\324\266\032\225?\013\307\332|\257\343\264?\321\227U\r\377?\243?f\317\325\276\317\244\240?\307\373\001\247(\253\220?\230-k\370\234\017\265?\351\252\016\363\304\367\230?\376\031\277\237\003\223\273?\010\004j\314L\262\241?L\312T\366\232t\204\277H\276\376c\242:\270?`\036\266\035\350\333\257?\365X\254A\225#\244?i\033\245iU\355p?\327\245\222v\255\001\263?\034\312]?Ui\201?\'\362\020\005\264&\232?\236\2718>\033\270\260?\241\251\021\331\213\221\240?r\023\302^\271B\267?\255\214\367\367\3322\260?\024\226i\025\254ZJ\277\010\206\362\214\035W\241?\262\327j\370\336+\247?QDL\2522c\247?}\343\316\371\347q\262?\352\035C\007*\321\250?\037\350;\324\303\213\243?\371\210\315\004\031\272w?\016\360\206/q\266\245?0\352Xzt\360\255?\014\365\373\313\334\346\250?"
      }
    }
  }
}
node {
  name: "normalize_element/component_21"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "\240\027Q\207\323Q\246?\333u<T\275v\256?Z\245^1\317\274\244?\333X\363]\366]\251?\307\'v\312)U\252?\007\223\\\252Dl\246?\013F{u\273\202\240?\221\344\274v\236\265\257?\351\210-Q~\321\271?\024\031%\001\315\024\267?\345\0100d)\035\257?\0167\323\311\301\210\253?\024~/\331\006[\211?\344n\342t*\312\243?_7\031\023j\237\242?\354\r\306\241\341A\227?\217Y\201\0279\350\257?B\204\'\020P\303z\277\010\366b\2375|\243?\210F\257\272\231\307\227?\2279o\371\316\203\245?\345\201\036#\006\245\235?\256\317l\274\023\352\261?>\023\336A\223\224\246?c\327h\3143\025\203?\002\265\222\002}\265\255?\211\274u\226\n>\250?S\233\216\271\230\n\270?\200\007i:\371\374\235?\237\350\231\342\232P\262?;\367\332\020<\356\260?\240\306U\026\231A\237?\276\003\253\006;\247\250?\311\376\014~\001\016x?Tk\217N\305\334\240?h)L$@i\253?\030@\361\226\275\002\217?\360\217\236\362Mr\212?\200\373\007\177)}\237?\n\273(z\340c\250?^1oJ\203\037\204?/\354\267\0260\370\243?\312\250\353\266/\223\251?\322\333\206\356\345\000\260?\337TK\n\221\253\251?\204\370\365\200\317\310\250?3a;\345\277\252\260?\347\215\230{v0\260?\254\004\237\247\200\002\227?\031U\206q7\210\245?\260\237r\n\372$r\277\031\233(\322\225\271\205?P\\\375\364yn\246?\240\326\256\265i\377\224?\375\235KC\035\356\222?L\222\230\264jV\230?O+,\210\346\331\243?\212\2152H\345\031x?m\374\306-\237\022\235?\300/L\253\303\377\240?\257&T\022\007@\243?\210\307\350\372\352\034\250?\351:s`P\336\225?\252p\240\307\365\335\217?J\273\'\3105)\245?-N\221P\356\317\215?\034\010\311\002&p\275?a\017\263\270{\220\234?;{\026mV\311\257?\356\223\340ci\r\245?\272\201?R\375\260\256?\010\376}\347\223\354\274?a\035\035\020N/\243\277<\3167\031\212x\205?\"\0310Pk\375\250?\205?&\306\360\340\273?\232N\350~\031O\222?s\236\303\022\225a\247?\203\314^N\272A\231?\n\353\304\272\370\250\243?\023X\2724\336S\257?\325q\350l\202!\244?\263\216\323\245\271\364\225?{\300\251\000\371\301\216?39\006{Km\264?\300q\315\250\357\270u\277uKk\006\312\003\225?P\304\253w{\272\243?\344\220Q\301\210M\247?\363Z\307\300S+\230?\014[\t\226P\345\207?\372\216\332\367\272\242\232?>P\372\204\344K}?\357I\350\255\010\236\260?\033\253\263\253\247\016\266?~\022\310\272\3628\252?0\211\253\261!\213\241?\3439\225\353\361k\205?MB^\031\230\270\260?a\0309\326\210\n\\\277\',J9\372\300\240?\340\215\334\005\020\337\265?\017\021\270\'\250\336\243?\364\021wC\272\242\240?\213\003\217?\266\004\203?T\301\352\300 \206\211?2\244K~\022\277\261?\204V\222\002,n\235\277C\370\371\352\010\262\254?z\321\267\002\223\346\247?I\271\022\271\224\376\262?\006(\037\030\3061\253?\225\023\'\326-+\260?\331~\026qX\037\227\277l\271\005\333 D\253?\211<\3109Q\025\206\277{\356N\210\312\320\220\277\241\tG\242-m\261?\301Us\300{5\246?\222\312\230\253\264\377\250?&\010\221\353*\315\227?/\300\3509\274|\267?1F\347\246\024\016\227?l?`\270O\233\245?;M6\203\227\227\230?\202\025\034h\202\004l\277\250;\361\312e\013\252?\256\274V\325\332\032\251?\322\361@\200\346U\224?\264d\225\237B\030\227?\025\231\322]\206\275h?\364\301\232\031\351\204\241?OS\233\235\344\305\240?\312\215\"k\r%\263?\271\023\214M\242\223\251?\022a\373}\212\331\251?\0143\021\217\364\004\242?\0009;\373\305\312\234?\236\233\311F\006\n{?\017\376\314\300\313\203\263?\301\025\256\031\251\217\243?\333\261q\372\003\260\226?\313\t\245\362 \204\232?\306\246S&NQ\243?\203}\246$\014\377\260?\317\234\203\324\336\301\253?\267J\231\234&\250\254?X\307\3205\274\356\243?x\244\330\t\3432\250?:\362\027\345_\354q?\3440!\261\240\332\221?F\341\316\023<v\261?\305*\020\003~\211\262?\200\010gsy\314\250?\036\234s\343\"f\255?;/\270\0276Y\003?\253 \'\310\337(\247?\271{\346\320\025\261g\277\377z\265>\ra\247?g\242\211)\361\266\242?}x\301\240\177\224\271?v\263\2514\016gQ\277\370\263 \340\205\267\227?;x\261&\322\332\261?\010\370YX|\262\243??Q\033\315x\370\243?\246\227\t\240\307\021\240?\324\255\321\204\203C\262?\241\2327\363P\200\231?\331J\224/\373\004\264?yT9C*\362\241?s\031\227\247\3746\203\277\302\270-\'\'.\261?\301]\310\263c\324\250?J|\344\222\207\336\244?H\277\231rg!_?\036f\312\257h8\262?\273G\255eo\177\177?\t*;\341K\377\231?<\003A\205\305\326\255?\010Q\177<Bm\240?\234\003H\220\361\370\273?\252\000\010\355\017s\261?g?\260\265\207U\205\277\270_\352Y\243-\245?\'\225Tf}\334\247?\n\242\375.\275\024\254?m\'\332\355d\004\263?d\364\004\013%h\244?D\3729z\006Q\242?\212Y{\024\270\271\222?A\320*c\336\013\231?\222\206\030\204\371\370\254?C\31499\302\360\251?"
      }
    }
  }
}
node {
  name: "normalize_element/component_22"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "\313\311Y\022\177\230\247?\216\322\366\306H*\262?\251St\335\301s\247?h\227\353D\264\343\252?\331\375\346\242z\233\254?-\363\220\010\021\231\247?\n\247#\205T\177\230?\247\037\360\2329\237\260?1\242\357\231\345\345\272?n\234\325\201\3726\270?\024)\002\331A\336\256?\257v\017.\357:\255?\310\326\337\204\325g\211?\026g\225d\340*\244?k\224D\342]\257\244?\370wF\363\261\317\224?\263`\003\236\213\361\257?\266=\327}\033\360\216\277\263c\237\327\n`\242?kz\312\026\273\020\230?r\222%\364\254\004\251?\2661*4\006Y\240?R\177\263P\017\252\261?G\257\025S:o\247?O\257\367\217C\314\202?(\232\220\241&\244\256?2\202\036N\206\001\250?DJ\232\334{\372\265?\203\213\371\337h\314\236?\327V+\224\376>\262?\345\342Llng\261?\031}\346[\010:\240?Z6@W\305\225\252?\026\223\246]&l\212\277\277g\240\t\177L\224?\231Md\014\3129\245?\331\027\304\230\330\242\203?/p<I\001<\212?(\334\273\236\231t\241?u\262\016&I\000\251?\366\004pPN\366\203?N\274=\347\362\017\245?\270X\337-\201u\235?,\210\225\222d\244\260?k\244&s\214a\253?\212\336N\307\010M\250?\347\343\223{\245\237\260?\325\210B\306\001\306\255?\207+\213\265\004\210\222?\212\246\353= \306\225?:&t_\032\373\204\277n~\226\303\373e\200?\253_\017D\033\"\245?\030\323:\024\177\300\221?\030\013\253\307i\307\222?:\365\305\001\233C\227?\304\341\360u^\322\246?\360\204Y\306X6k?\272\224*\271\331\013\210?\306\204\223\222\360M\243?\221m%\3434\036\202?\332A_Y\355\212\246?tEO\350\372\340\224?\360\350[\363\236[\222?\305(&t9S\246?\377\341\007\027\215\335\217?K\rN\363w7\302?FN\037\2640\241\226?l18}OB\261?\224\343\331\333\351\253\246?D\026b(9\275\252?\025I\n\030\234B\275?\005\233\257\234\001Q\240\277E\262\3475\355\227|\2776\270\027\022\334:\262?m\007\026\314\007\240\300?i`\341\255\276}\223?k/\254_\014\214\250?\307\363\315\301)/\232?\032.m\226\235\016\200?\306\226\256\3707|\255?B$\374\270!\271\245?\361T\343L\343|\215?\304\337s\203HV\207?\032X\"\253\266\366\265?\276\2347 \322\007\200\277\347\353\275\3560\312\224?\326`\311>\220\010\246?D\376\243\263\3571\244?\255\215\203\333r\337\202?r\333G9[\352g?T\375f<\363m\225?\224k\3738I\334{?1\177\277w\037p\261?\nM\342\021\264\000\267?\341J\205\2271\034\253?t\315rF\205\313\237?\261l\341\327\032\332\200?4A\273\340_F\256?\2467\016\202\257dN\277\237Dr\234UK\241?j\224\n7\324\200\263?\t\021^%\231\201\246?T\310\002\027E\276\240?0e\362cR\227z?*\313\376\343\376\317\217?eG\376\356\212Q\262?\243(\n\323{S\234\277.\370\324\264\002x\256?[\t\342\336*\277\253?\353\334Y`4\320\263?\030\001i\215\256\303\252?0\266\311\016\025\326\260?o\322\2515\021Y\231\277\276\017Dli\233\253?8*\322%eP\220\277K\215\347kJ=\211\277[J\361L\303K\262?Y\225z\237uP\247?\260)\324\366V\364\251?\251n\027bA\326]?0\270Nrsi\267?\233(\201N\272\215\217?\352\204e\246\223\360\243?\214\316\367(cI\225?\212\374t\350f\022\200\277\205\2776Mer\253?n\'w\303\251\033\252?\205\203\340\2305\026\210?\204\326\005\264[h\232?\277\331<\307\255mm?\263\363\262\375\226\306\241?\326;Nd\365-\240?\233`\271WF \261?z&\352\273\021\314\253?[\267\215{\375\215\252? \222\361\215\300\326\241?(\022`\031\2329\241?C\260\337PNm\230\277.\202\311\0041\215\262?\321~P\211~|\244? MP\036q#\220?\361\206n\325\371\340\216?k\336\326\265t\007\244?\031\t\370+ \221\261?H\204\251\332,f\254?\331\315\207\305z3\254?@\'x\233\033\371\240?T\273O#g@\251?\310\343\263\206\234\010t?\r\324\0139\024\020\223?\220}\000\272~\255\261?l)\234\264\333\364\253?\237\177\234\337\0315\251?\035c\323\274vx\244?B\2603P\334\233~?\020P\235\353T)\251?.J,\320\276Wl\277\252\351\243!\035\375\246?xf\274\214\346\361\227?C\250\367\371\224\010\272?)\010#\230\230\236x\277\311a\220\361\261\206\236?\255 \274,\334\250\257?\333\237\242\"\002\231\244?zCm]b\023\247?\317\026\250v\232\215\246?\031^y+s<\260?\324_=[\370\333\231?\354c\211\367\261\274\256?\226\264\177\361N6\242?\273\216\255qz:\202\277e\275q\202\321\r\247?\237\315!\336wb\243?\"\013f\206l\244\245?\347\033\253vH\217q?=\255\240>\t\271\261?\212\341\267\017\343\257}?\205&z\372\267\264\232?\253\255@C\353 \254?@)l\234\323\200\240?\\\036O\361\326~\272?\312\207\342\206\306\260\262?\004B\275\251\340\241\220\277(=d\2562q\234?h\370|\270\327\216\250?\370\237\377\225\312\030\256?G*\204\274\273\241\263?\006kn\025\\]\240?\335\024$\360f\221\241?\\)i\235oF\234?qp\216\337\200;\211?2\226\273_\235\024\252?\316\364\364\014?\n\253?"
      }
    }
  }
}
node {
  name: "normalize_element/component_23"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "\230\307\315\202\346\371\252?n\333\3556LM\324?}y\"\004\273\314\226?\373\177\242\240~Q\300?eR\016)\260\307\266?\267\247\305\217\032\333\253?$Z\372\351\242\225\246?#\370m\365\215\311\255? f\224\0065\276\313?\2425\251\342r.\271?$\275T\336!\324\242?\333x\032\252\016\253\267?d\334\247\277k\213\233?t\276m\340\355E\275?\247\251\3371\256K\261?\361\"\317\322n\244\273?ebKsQK\267?\221m]\215\223\222\266?\217\315\315\270\"\221\254?\345\345\004\373\034\220\267?=\322\317\212^\374\253?S\307X\335R\035\264?\010\335\266\323\374O\244?M\344\233\320\230\007\243?\"p\342\263\216\r\240?7_M\347\210Q\244?2\264t\344\314\037\260?p\"\365\374;k\235?\241\362\034\202\304%\222?:\361\310d\340\234\253?d\265T9H\343\260?\2326\273lvO\270?\221M\374\225\361\026\266?\003\352\356\266\342M\261?\251!\310F\302l\275?_\206\035\313]y\241?\032\224J\'\373\257\275?\305\362\363N!\261\266?\023\000\266\230\254\205\306?\221\203feh-\252?\336\340\321\347\037\224\307?k\013\334u\307\306\265?7\360mq\302\301\257?OU\331+\267\252\261?G\374q\230\273\330\200\277\177\321\004\333\237\303\245?\336\221\363\366\316\005\245?\344\301Pf\007\005\265?\263z\207\333\241a\253?\253\0107\031U\006\262?\250F\352h\025p\322?\216\310\204SwI\260?>s_\231z\207\273?\351\264\343\220Q\201\305?\307\255\204\031\023\225\217\277\245S\371\314\311\363\266?>\344(\236\205M\265?\224`\312\360:CZ?\272\024\250\334|W\262?\332\203P\253\326,\223?5\023\222 \352\253\275?\014U\272\206\334\366\303?\367\030\332p\300}\271?\007\316Q\3738\220\255?\017\231vZL\346\304?q\214\t\326\335a\267?\2332\254\354\377?\257?\204\367C\326\224\220\302?%F*\347\346v\244?\036\223%pt\340\272?V\326\214\305\234\013\263?T\004\332K\212w\261?\347TS\016=T\310?..\232=\354\337\273?\250.\241\001C\366\260?\217\241E\261:\004\321?\246g\216m\230o\266?g\377H\200\266\257\240?\310N8\356\246\361\231?\033h>\347nW\310?\017H\200\242\313~\267?\224\027\357\200\030\214\273?\326\t|\006S\233\301?\'X\363N\313\260\260?\325\2775\301\201\332\265?\201f.u2\346\267?f\207\213\353\376\202\271?\010\0058\314\266\244\270?\211\034\350\302\304v\264?\006_\022\023F&\322?\321=<b,\307\312?^uJ+\261\367\305?>\341\316\200\330\244\275?l\372\206\236\241\363\272?\246\035d}\366h\235?]\331\240W\205K\261?\333\307\213\3760?\230?%\226\311\255\237\267\304?a\343\355M{\346\300?w\204\207\364\321e\243?\374\3736\013N\331\262?\255P\203\355P\342\244?\315^\346\326\314#\267?_n\256\234\350\263\240?\314~\301\224\237\331\303?\022\026\243\033R\246\270?j\\\206\237\002\327\265?\034+\323]I\332\310?B\220?\365hZ\265?\272]\360\350\315H\242?\232\364\304a\323\204\303?d\202\257\"\202\365\246?\274\247\301 (8\251?/\256\363\232\027\032\310?\346\220l_T\223\265?{vc\273\'\201\300?\250\324\272G\025\311\270?\334\314\244*\306)\271?\353\364\206r\327O\255?\250&\356\234Y\027\300?\355D\201\362\002\342\274?%s\265\340\010\374\250?L5F\372\323\227\261?t\360\005\223\006\252\310?~0D\334\t\247\300?\342\263\347\305\230Z\264?\2608\222\207b\213\300?\n\243\257\331\367\314\252?\226}\323\313ZP\274?v\250\3072\324\223\303?\242\033d\t\240U\260?Nh>Y\304?\267?\217\007-\264\013\267\232?\216\374}\243vo\261?\002\263\177\364\006\305\252?\337N\217^\356\302\304?\"\336\223\267\276p\242?\231~\177\006x\253\267?D\376\311z\222\375\307?\271\025\270\370\270\217\267?\326\345}\344\"\263\272?\212\253\026Mq\231\275?\227\266\367*\253\311\274?\246\034\364\356\215v\274?\322\246\304W6Q\277?\307(\305J\251$\267?\367\004\271&\005_\257?\305;\026\224\317\226\267?t\204\3249{q\254?D\035j\234\314F\307?\340\241\266z?O\242?\3053u\022\242\340\267?\371\374(\321/]\302?h\265\317I@\343\276?l\202\226\030E;\273?\032\205a\026\223\204\326?@\0372\323`\224\255?\310P\302\n\277\355\267?KL\025a\312\r\262?\301\262\251%\3439\235?\277\344\254s\377\235\252?BU\rA\\Y\266?\301\326?d\236P\301?x1S\256~Y\311?\0308\364\244\271\006\243?\3568\352\215\377\247\260?a~\270\365\344\253\222?\250\021\036`\362\256\255?\304\303\244\215]\201\277?\220\366\n\316\212o\266?;ec\225:\027\276?P3I\321o\204\305?\004g:\205\2466\267?\355\320K\355\216\n\265?dW\225\250\327`\251?\336\217\272!\266\311\303?\035 \351\352\306\357\267?.\267oF\261\002\254?>\326\r\215\207\364\252?\355)\205\265;\350\264?\242k\243],\334\252?=\006\354\351q?\322?KP\034p\370\005\250?\305\006J\213\254\325\303?M\255\003\217\213\304\273?\\\221\344.\314\206\303?(]\341\372\003\'\247?\333\364]\315\336r\257?v\214\n \245\247\267?\353\035\333#\265\377\242?\234!\265\206\333l\264?\007\037s3\026l\302?\315<\276_\372\316\231?\225\031Z\220r\237\300?"
      }
    }
  }
}
node {
  name: "normalize_element/component_24"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "\335/PfD\350\251?\033\251\364\234\277l\324?>\355l\237\300\001\212?\3579H9\254\361\304?V\370\216u\314\324\265?M\316\3000\257\017\244?\232\202\273\007vi\251?\212\332\000\343N&\251?\315\3737\343\2776\316?7B\256\360\010\320\270?\315B\274\'o}\240?\031YF\253\331Q\265?\262K\204\250#\311\225?\237a\026L\2175\275?|\267y\343\244\260\261?u\324\236\200\220&\271?`\200)u\\\234\264?~y\357\022\026A\265?\024\234\355\026\360N\251?\014\240\274\350[\201\265?\263B\243\321\243\375\251?\242\001\'\241\025\224\264?\377*\210\315<\303\234?[3P\036\270\370\241?\311T\374\n\222q\236?\331\254\2251\207\242\243?\202}*]\260\n\257?\005q\225\\\002F\234?X\240}\257\230F\220?\177\351\323{AC\244?\226Kn\n\347w\264?\310\223\237\262lv\271?a+\010\3505\253\265?7OHGF\302\255?\351\177\230\010D\235\275?W\317o\266\276\352\234?CD\331w\037)\276?\211\034\350\302\304v\266?\321\262\263\275\035.\306?*\032\316\251\"\344\256?B\317\226\016\376G\307?02a1s\314\262?\241\371@K\207\351\252?\354\371D\345\371h\261?\016H\324\241Y-n\277hA\312}\342h\231?\252kn\376\277\347\242?\272[\231\275ZX\265?\261K\342\031%\311\253?6(\3772\226k\260?7\333|&r\226\322?\221\363$\007\361#\250?;\233\014\311\364\304\267?\"\005&\242%\260\304?k\024\234>^\357\230\277\313C\033\212\177\373\267?_\327\212\221\200,\265?\365\2255!\025\025]\277\021\315\343\000_)\262?)PB\353\014L\205?qs \247\214X\277?P\373\243+\265w\304?\3619E\201\035\003\270?\322\335J\266\207\253\252?K\005f\234\276\022\305?C\231\035\024Zw\271?\245\310x\231\0032\256?G(K\347\242\245\302?\201\302R\2752\370\240?G\213\207\205\307\357\271?\325\0061\024\323,\261?\034=(o\032\267\271?)\253\235\354\\\024\306?^y\264d\232X\273?@4\220\272\337\231\245?\227\212y\2256\256\320?@>?\221\311W\266?\371\316NW\216\310\235?,E\362\225@J\224?\244s\215\265\020\373\315?\232!b>\2612\265?\202j\370 H\001\273?V\350\201dAn\300?2uWv\301\340\257?6\360z\233\304A\266?k\353\373\376:(\275?\'\016$\030\234{\275?\257\331\324\275q\371\266?L\230\214\nl3\267?\365\0025z\n@\321?<\202\014\376-*\311?\225\233\3643\377\354\310?\315:\033\246A\307\272?\325\372\227\256\2448\272?\214\n\251\226\005\367\225?\264j&\313\210\014\263?\274\233\334,\264,\223?a\224\356NA\265\303?pw\326n\273P\302?\372\344\271\242\272\327\232?\234\262\005J+\272\262?:%\t\212k\361\242?\256?\207\316r&\263?\265\275\345\003e\307\236?\236\336\030D\2345\304?\023\352B\3347\237\264?]z\3119\220y\263?\20437`\t\204\305?\234\245v\034\305\r\266?\211\270\3741\364\"\242?w\236C\334F\n\302?B\014\210\321\362\212\242?H\2211N\256\357\245?\3028UJ\021Q\307?W\334\272\306\'\027\264?\215\256\n\210\324j\301?\264\347\232\030~\257\267?<y\344Q\"\360\267?\354~\030\230J|\252?c@\301\210\'\002\276?\2653Lm\251\203\264?d\3772\233\244R\243?\247J\262\023\000\221\260?tK\234\366CU\306?\313G\265\374~9\303?l+QQPe\260?\215\214\316,\033\263\267?\301\330\262\344@{\261?[\006\270\372\223s\273?\027\253\211\342\256\216\305?h\240\275\360\006u\257?\201\341\023\355U\244\266?\217\334\257\017\246\271\235?\335\241\020\352\352\332\257?\274\370p\003\0351\255?\234\365f*}N\305?\356\262\321\314\242\226\246?\333\013\312\t\032\200\272? \315j\027Y\006\306?}\n\260*#w\272?v7T.\202\266\260?\337\325\354-W\322\273?\201\341\260\302\232\273\273?\333\023\316\265\002\237\270?\371\344^\351G\206\276?V\361\026\255{b\267?\"\320\30651i\257?\014\257kN:\036\266?\263wX>Q-\251?k*D\355\242\333\306?Yo\350\356\271\232\240?\342\237Y\337\256\201\266?\313\254M\177\320\034\301?\373#\324X7\350\275?q\360;<:d\274?Q\356b\215\277\234\326?\213\362\360\221\331\310\251?M\207<\354\377H\267?O\036\353\351\360\376\260?|\317>\022\323\336\241?o\027<z3R\262?R\271\235>\201\376\260?m5\261\341e\335\305?\241~.R\334\274\311?\027\212\033\207_\211\234?w\032x\324\351W\251?Nt\024\"\013\221\220?\344\337{@\037\263\244?\331\370S\260\264\366\276?\'\362\267Ll\017\266?\217(\226V\241\023\304?\366\336\255f|#\307?\303B\340Z\203}\266?\337\227\206#@4\265?=\374\203\350\023\360\247?\003\363\021\2524\337\300?i\301\351/\204\264\273?\305\200\001\2219\247\263?\250\252\177\371,\033\251?\356\017@\334h\017\264?\3462\177\226\370\355\247?^\306)G\274\215\324?\331\353.g\356\325\244?\242\307\0234r\205\303?y\252{\030\345\017\274?\324\014\033\370`x\302?\307\274B\252\036\354\244?u\004.\227\246\353\260?T\265$\332j\343\257?\315U\017r\300\251\242?x\215\nZP\261\264?\225Fv\354:\260\301? \264\247\257\252\010\232?\371\270\374\250\002E\275?"
      }
    }
  }
}
node {
  name: "normalize_element/component_25"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "\377Q\277\3760\261\251?\246T\243\006\274\024\325?\252\264\026}=\023\211?\177J\315\322\331\177\301?f\037\\\350\347Y\265?M\262\221\310\227\200\244?\031\333>\300g\337\252?\252Q\221\010b\340\230?\250\372\036\300\345\233\317?xu\354r\332\353\265?6u\247\006]l\235?(pi7%\231\264?\327\237\217\365~\352\222?\034\210%\030\340\030\275?B\221r \271\357\262?\000C\262\'Q\224\271?\226\225w\354\237\333\260?)b\270\n\307\313\264?3\255f\000\0349\251?-Lo\027K%\264?\2612W\\\325\277\250? F\027\272c\310\264?\331X\306\334n\257\234?\354+\211\230\204\236\243?o\266Y\277\020\247\241?\006\216\277E\013\366\244?\274\022~2\221\225\260?\376\261>U\355\351\243?%\345\337HOz\225?z\256u\375\020\210\244?\010\214\220\342e\313\262?`\230V\207\377\033\266?S\236gV0\326\264?@\252J#\262\204\256?0\t\262\306\"K\275?\335\351;\260\375\023\240?]w\365U\262\226\276?&#M\rK\273\265? \027j\207\236\030\305?\243\257\270\351\343b\260?\205\3009?\237*\307?\253{s\236\002w\261?h/ul\021\014\253?\263\311\356\275P$\261?\323\377|\237\315QG?\342M+C$\\\227?s\306X\3575\331\242?wU0\302\305\036\266?\270\3575*\216\010\260?\203\322\243\353\272\236\260?n\347`\325\327\025\323?I\010T\324\2405\246?\316?Z\231y\275\266?\324l\2562\004\024\303?\220\351R!\363\010\225\277\244?\001\002@\017\271?\255\334}!\363\347\264?U\007\305\313\335+&?\304\326\333\202\177\363\262?\250u\277c\250%~?\016\300\243\031\315B\274?\010\221y\325\344X\303?\3271%\307\332\265\265?\024&p\0216A\254?\034\343\270\303\216\325\304?\257\310\r\221c\203\272?\234g\202g\226\222\247?@\316a\342\202x\303?\003\010\376;\313\301\236?\227\274\222\310d\017\270?\302\366^?n\206\260?\263M\272\305\255\226\274?c\331\367\241\005\372\306?\032\315\314\367L)\274?~\327\031?\212\303\250?\302\234\316\205\371a\320?\342\370bnE\002\267?\263\375)*\"\220\241?\307.\242\00450\225?\020\023:\323w\303\316?{\216~\352\016\030\265?V\344\034\344\0216\273?\304\223f\276F\274\277?B=\217\347\271\331\256?C?\033\005\375\217\262?7\001\300\220Y\346\276?\307>z#\360\220\277?\2610\225\225^\317\265?\3170CP&\317\270?\n\\\320\333\325\024\321?\036@\r\177P\316\311?\235\327\267\027\301\224\311?\371\213Z\023k\356\271?\227\242_\322M\037\270?\372U\251nh\251\222?(s\204\360\216*\264?&\351b\037\331f\221?\350ga\204-L\303?n)R\'\301\327\302?\312\266\362\343F\311\231?\207\021\324\206I\014\270?8\363 G\267\201\247?yi7\270|=\261?\303K.\3161\203\237?\331\006\356@\2352\304?\236\322\366\354\017M\265?\375\210\272j\371\\\264?0e\006H9:\304?\275\033\340\211&\276\267?u\314\215\252\245\007\241?\350>\037\266\013E\301?\262\243\246\232\257K\241?E\324e\255xU\243?\261\0225\311v\333\306?\326M\\\240:\334\263?3fk\255\312f\302?\240\272\r\370iM\267?Y~\263\251\307q\265?u3\355\254\'\004\254?\271\350\345)\013\\\272?\322B\203\306\254\024\263?\363\352\351\021\r\314\241?\007\004\267\021\366\275\257?\343\037\251\312f\352\304?\333\220LukS\303?\3163\354\263\247=\256?\264\221t\230\362K\265?\200H6\214\277\303\262?\212\017\363\262\024\263\272?\217\320_\200.\356\305?\335\336\330-\256c\261?m\317f\264\331\001\266?\277\330dU\320)\220?2 U\366XX\257?\211a\371\206\321\222\256?\336hg\233\222\341\306?\036Tu\236\227\333\256?\204\263G\347}\225\274?\300\246\246\333\024:\310?\226.AiO\231\273?\355\2346H`*\257?\337%\277\345\264\236\271?\365R\305\025\226\306\272?T\373\261\237~}\270?T\272\332\333D\345\275?-+\376\003mq\267?\314;\024&\010.\260?6\201\221\263\212`\266?\233\223QD\n\216\252?\364\245f\370\027\r\305?\342\376[}\000H\241?\254\246\220\320;:\266?\245/\257\034T4\300?\216\254\212\335/\000\275?E\244i\3723\326\275?\246$\220\267\001\304\327?} \237\256\363\021\252?\276\251W\260\336?\270?\351k\207\240\031\255\253?\231\256F\307\354d\243?\274\026H\336\2460\253?\234MG\0007\213\256?\313\204\030\025\\\037\307?v\020\374\356\244\345\311?\207\376\241J\341\002\240?\311\376j\357\002\016\250?4V\024\017%\343\217?\252\205Z\037K)\244?\357%\307|\304X\274?\365\023J6\211\207\265?\241\214\201\r9\312\305?\2037%\322\226\360\307?\371\212\272K\354\236\265?\275aJ@&{\265?\n^\006\371_\002\247?\350\037\211\006E\r\300?\261\360#\356\031\330\271?\236\366\323\000W\022\266?\376\n\265\200\262$\252?C\300)\305\361\360\264?\350h\355g\305\370\253?z\344\337\314\207\236\325?j\346\274\013\003\262\243?\037o\277j\317\246\303?\'zl\r\235\205\274?*\034 \034\334\353\301?\217\256\225z]Y\234?_\322\360\344\325d\252?f\\\006\326P\356\251?\020\030\261p\016\256\240?\301]0\227\330\245\265?\275\307;\265j\177\301?<o5{82\233?\031\rF\020\332\267\270?"
      }
    }
  }
}
node {
  name: "normalize_element/component_26"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "v\303\334\014<\231\252?\032\203`\353\330\374\325?d\307\360\037\245\356\223?\263\335\334\026g\267\273?\252y\274\000cL\265?D\254=m\006\030\252?\212\212\262c\225e\253?\366\316\204\000\302\202Y?\222\244C^\021\007\320?J\320Z/X\272\261?Z\364o\023\305\026\234?\274,t\305\217(\265?\341\271\272\r\261\224\223?0H\324\355\347\362\274?\367Kc2W1\265?\243;\353\307\344\\\274?\255\026\323\252h<\252?\204@\255\360\316$\265?5\346x|\260\311\253?\364(\234\252i\201\263?\302\264\341C\230\301\250?Q\213\223\213\311\314\264?st*S\2533\243?\213B\220X\222\t\247?\035\310\003\\S\312\246?\265\200\250\262*\355\247?\002\231\230\2145\354\262?1\235\2505eX\256?z\335\367\257yC\240?-D\255\2074\314\240?A\362\316\241\014U\261?\216\262\312\301v\364\272?PG\317F\021\306\263?\210*d\375R\376\261?$vz\231\271\244\274?\237\004\037KkH\245?m\355\376* \352\276?\013\267\024A\260\353\264?\265\000\242\235)m\303?$#\203\266~u\260?SG\340ri:\307?\004\251L\345x{\261?\243F\310\020eG\257?`\365\262\263\t,\261?\013xCa\352\303w?\330\032\276CY\021\241?\374\3533l6\204\244?\031\361\232\340f4\267?d@\n_\336j\263?\363\302\245|kT\262?v\3459v\336\323\323?\274\236\231t\034\276\251?g\300&Y\361\007\270?\n\225@\311kE\301?\317\304\256\314\337\255y\277+\331:\003\346K\272?1\333\263\206\t\245\264?E\033\255\216\017\277z?\354\325F\303\311\200\264?\364!\347~\000\262\201?\254\311\312du\201\271?s\270\356\227c:\301?p\010\350\315\307\206\263?\325@\247\2531\244\260?\344J\022\213\345\204\304?d\361w\374\322\263\272?\333\033\322a\353=\240?LD%\231\310\321\304?\343\341\223\007O\014\240?j\344y\304v\344\265?\340\206\265\204\276\354\260?,\013\245}\023\215\273?5\210X\302\257X\312?\2742\211)z(\276?\376\244\206\250U\003\252?Q\210\026_\010\307\316?\214\3450t\371J\270?T\3222nD\331\247?\"\024\211y\276\265\233?\221\010\351\320\271\000\315?\004\035\376\261H\307\266?\003\322\221k)\361\273?}B\205\t\364\240\277?\324\014X[y\025\257?\327\010\355j,@\251?\355\311\354\301\336#\276?\266\316\302\025\205\032\300?#q\371\211\257h\265?\361\211\204\325\251\211\271?\324\367\003\346m\201\321?\365v\266\r\304.\314?\337\352\032\334\277z\310?\253\035\002\235\002\306\272?\301Y=l\221P\265?\236)y\027\035\000\223?\004\264\177.\262\316\264?\235\0078\003\252\037\222?nd\373\351od\303?\303U\1773\032\301\302?>:\\H\0231\241?o\263\246\351\033g\300?\241o\262\335\242k\246?:\376\314\237\275\032\261?\356g~#$L\241?\226\006\34678\020\304?\214\\\315\300\034K\265?\200I\326S>\223\266?\355\227\335\000$t\304?\330L\370\204p\365\271?\321\003\243\273\2712\242?\346\346\026\030\204B\301?\307\333u/*\273\242?\2774\264\035-\260\241?\372p\264\326\\\235\306?\206\344d\342V\301\263?\223\213\020\242\245@\303?\300\026\325\321Z\231\267?\246&.\270\000c\262?j\262?\203_\200\260?\366f\2056\3016\266?\027\325\355\257\310v\265?\n\342vGJ\243\243?\362\365\221h\275p\257?\227\307\007.p\250\304?C\210\313\364\302\022\302?P\263\366-)-\260?c\0335\2024\263\266?W\302$\246U>\262?Z\362\345\366\254\032\272?\006\261\207\204\\\032\305?o\376\357 \'\340\264?v\323+:\231\205\265?\177A^QB\227m?\305\372\023P9\212\260?\373\t9\177\253&\261?\327\300\005\302\026\007\311?\212\303\253B\211\352\264?\206\332\307\356(\354\275?\2250u\205\256l\315?\227\205S?\237c\273?\247\364\254\241]\320\263?\321\032\375\0249W\267?%\002\240M\270\036\272?Gz\201\364ub\273?\220f\260\322rZ\275?\0304\241\007Fw\267?a\005\251(\037\001\261?\355\331;\357;\020\270?\006?\341T\272\247\257?\361\204=q)|\302?mY\017v\302\377\243?^L\361\300\031\337\266?\'\335u\272\034D\277?%d\307\026\347G\274?J\257\373\3765o\277?u\005s\245\262\311\331?Q\027\240\242\'\273\255?r\364r\204~\271\272?\225\311\001\237E\r\243?Q\371\002s\'\352\243?\307o\007s\206\245\243?\343wYg\n\n\260?\247\276\361\212\347\371\305?\210\323\0366^\350\311?\314\215\233z\332j\246?\306_\203SY\363\253?;\270\367M\272]\230?\247\265\231\245\305b\251?\376\342.\317>\347\270?\237\267<\314\032\031\265?3\371\262)aj\305?\177o\342\312*C\310?&:G\364\235\245\264?|b\337F\261\371\265?\0001\026A\364\210\246?\243k\032l\316\347\300?\247|\373\177D\257\266?\331\351X\274\220\302\266?NC\330\031t|\255?d\006{*\337\347\266?\213\315\001a+\221\257?\310Bj\226\250\227\325?\330l\032\030\317Y\244?\322\031\355\370\374\036\304?\364,\025\017\200\034\275?Z*N9O\312\301?H\347\243\\\177\352\206?Br\370\305!\362\241?S\244\334,G\220\253?\tA\254\326@\365\234?b~Z\204\343+\267?\354k\312\006\263\270\301?\332\025\3535\354\340\236?Pp\002\352\005S\264?"
      }
    }
  }
}
node {
  name: "normalize_element/component_27"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "\362\002\032\334>\372\254?\215\350\321f2\302\326?\210\2572\367\351\250\240?\334O&k]5\267?\177i\242\346\343\216\265?O.\303\010\254\337\257?=3\276\270\037\263\253?\033R\034r\3710w?|$A\222;\007\320? \220o\342\360\361\251?\027\351\277\263\257\317\235?\262\330\235#/A\266?\302AEL\276\026\224?;\301\202$\201\300\274?}\001\210~\027}\270?\222\203`\365JP\300?\002\216D5\023v\244?XdU3T\r\266?{\201\267\022J\367\257?\350S\333\016\214\212\263?\334\337{\255\273\341\251?\325\3066{0\301\264?\211\204\017U\223\010\253?S\013{\223\014$\253?\033\033\003\260\326\220\255?\t{R\247\265\311\253?\240\330\233\374<\344\265?x\221\312\223\362z\265?`\266\273\014\241x\247?V\301\335\226\036\006\242?\235e\237\2226\377\257?}\2268\t\335\331\273?\222?nx\247\246\262?\240X\261<k\336\266?\270\251\000f^\021\274?(\013v\373`\244\254?\306\001\313|\315S\300?w\033\"\016\334x\264?\203g\342 \230\230\301?\276\303_&\231;\260?p\034\t\030\203e\307?fo=\313r`\262?\363\232\330\365k\350\262?\251p_b\207\214\261?P\'\'z\343\033\213?\315aR\3275\265\250?\'\344\215\020A|\246?\3611lU\221X\270?\031\215\351\372\037\017\267?\022\217\342!..\265?t\203\272\253\313\247\324?\326\234\005\237\273d\260?[t\345\305\037\313\272?h\230`\214\326\376\301?\366!\017G\316\367\214?X\331\317F\324\342\273?\262`}d\274\253\264?F\343Sw\232\t\220?=\206\3168\373m\266?\262\353S\230;V\210?\0207m\347w\361\266?\365j\340D}\335\272?\274\360*;b\314\262?\3770($\260\361\263?> \361\247\235L\304?\312\224\341\010\352E\272?\030\036\323\221^\177\265?\224\023\205G/k\306?\222]i\031\251w\261?\213\211\370G\022\026\264?lZ\267\256\211\346\261?\014XG\225.k\271?`\312\334V\\\327\316?v\021\302}\306\200\300?\304n\332\267Sm\253?\022\362]$\226\317\310?\332\301(\013\326\355\271?\020\177\221\363\245\007\260?s\376\327\315M\032\243?H\\eE\213n\314?\302>\215\275\017n\271?\240=\340\177\000\331\274?\374\361am\301\017\300?PH+\361\222\225\270?ij\305vx\201\232?\211z\240\231P\326\274?Kg\377\272\325\036\300?\322\333\213\247\237i\266?\\.\374\2175\353\271?u -\306\247=\322?]dr\322J\r\317?\340\330\215 \220\251\306?\367\324$W5\261\274?\315\303F\257\277R\263?\354\337A(\371U\226?\357=\037\017\304L\265?\332V\026\371\263\'\224?\035\237\257\252u\332\303?0\n\333\177\377\216\302?D\032@\2705\373\250?\266\3028\333\203`\305?XE\013\022\323l\252?-\250rQb\024\262?\207\021\026\243\033R\243?l\214\233\357\347!\304?\276\005\201\261\230\272\270?a\242\353\t\345Y\267?\333\035k\25104\305?\326@\203\345\271R\274?\305M\214\263\211\226\252?3\375c8\326\371\301?\202=\276n%\374\244?\340\275\037\216\340\014\241?\235)o\245\251n\306?\277\r\224\210\256\023\262?\230\221[B\'\314\303?\216t\224\360u\263\270?S\0303@\244\n\257?\206\004\010\366\312\002\264?\026\336\316\206H\302\262?\003\202s%\206\215\266?\233\321\243j:\211\247?\t\317\363\303\342\031\254?\263\024\221\255\243\364\305?c\257\264\342\3244\301?:\251\026\256\232\251\262?\0076\036\324\224P\266?E\007a\304\367\253\261?Y\035\374n\001\273\271?@\240\347\332\r\336\303?\026\255bE\233P\271?\334\016\347\303\256K\265?\351\2545\345!\213\204?\327\261[\025\362\322\261?\005\364b+\337h\266?!\024\240\0254G\313?\236n\311?m\263\272? b\312Z\037\343\276?&\007\2762\007\362\321?\336\277\344\014\346\253\272?\224a\2237\353\314\267?<\360>\202s\252\265?h_2\273\022\364\271?\246\021Y\302\337\021\300?\277Y1\371\362\304\274?\241\230\255\3268\204\267?\214+O\234\263\360\261?\252\'[s3\233\272?\361\276ZP@\334\262?\363A\004Y\245-\277?\355,=D\352\020\250?\301a\346^\007\036\270?\367\020\3406K\260\276?\302m\n\267\276\300\273?jF\2058v\323\300?\034SO\235If\334?\354\203\231\247T\270\261?G6\333\005\030P\276?k6\267\213.D\242?7)\237\372\024\273\244?C\244l\262\302\004\256?\022\007\255\340\347Z\261?\'\324\001\200\3132\304?0\356\200\227\213\313\311?\277ra\375\317\374\256?N!>M\271\004\261?\007\235\207H\212\036\253?\240\251I\203\352\005\254?W\367\256\222\246y\266?X\267w\226\3530\265?T\347\024\216g*\305?UM\311\237\223\321\310?\340p!\272`\243\263?\027\037\340\365\013\t\267?\257\306\225W\007p\246?6\320\254\007\364\313\302?1\225\232\027\t\350\270?\3245\334Em\"\270?I\201\264\350e`\260?\326\327%p\014}\271?\250V4\335\270\263\261?\220\252\327A\346\t\325?\233\321\371j\363q\246?$&M(\351\306\304?\373^\345\376Z\306\275?\366\260\003&\361\353\301?.W\334\013\016\'\242?-\314\313,\005N\246?_\313\257\017\200r\260?K\371U(\356R\232?N6l\373!\255\272?g.\3132\037+\302?oK\201Xx\217\240?Y\004\217\007\014\246\260?"
      }
    }
  }
}
node {
  name: "normalize_element/component_28"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "\267\266~gl\311\257?\306\277b\034B&\327?\217\023\211\266!\316\246?\007\351\330*\211\270\267?\024_\374S\373\013\266?#\310\355\t\245\276\262?vFp0\217\215\254?\357\3037\320 ^\233?iF\215\251\276\252\317?\306\356\211\0258P\246?\376rB\365\312M\242?B\333be\321\307\267?\203p\261\024\\\273\227?6V\007\345\"c\274?\372\351\337\370Q\302\274?\337\']\346\263\275\302?<\270\326?\321:\244?\271i\316\"]1\267? `\376!5\241\262?F\256a\247\324\374\263?O\035\200\024B\365\255?ktn\335D\342\264?B\341e\346\377^\262?\355\374\207f1\300\257?P\355/bo\307\262?\246|3*\243#\260?\251\227\262\350\2524\271?\277$\242S\350\240\273?\035\376\213\201$\325\257?_\231\371\006\r\232\244?<#L|\256\351\256?\002\334\025\302\266:\275?\365:`Y\224\322\261?(l\033Skr\274?^=^\260j|\273?\022\350\353\260\304\256\262?p\263R\352\215\270\300?\244\223V\220\'\310\264?-\255\351\356\370\376\275?\300\3509\274\374[\260?i\321\245\371\017[\307?5\220\214\247\256\224\263?\311\034\245\364G\366\266?\tt?\nK\372\262?\001\232\025E\240\336\230?\357\334<T\241!\261?\237f\374\206\177\224\251?\226\323J\223\3453\271?\222F\254\225n\352\271?~\302\210ff\262\267?6{r\335,o\325?\364\351\251\274\2726\265?\036if\351\347\246\276?\375\304\236\311@\226\303?Tv\275\336D\307\243?\"\003\377\257\310\034\275?\340\246\346BJ\213\264?;R1Y\322\r\233?w\"\220d\271\231\270?r<\275WO\333\220?\231[J+\370L\264?\023+\371\221\210\224\271?\227]jcp=\263?m\321\372BeO\267?\026\021I\035\262\373\304?\375\215\367\\\006\231\271?\237\214.\305\016\020\261?\217(\323\271\271\260\307?tpFS\221\230\260?:\230R9\033\342\263?\326\302\"B\000I\263?Q\'\250\372\370x\267?]aR`\'\363\321?\027\333\365\351\260\366\301?s\352\261\312\330\022\253?\250\')9\362\003\302?\n\372;vx\321\273?\210\275\355\225\273\307\264?\350\007\362\017\002\302\251?#\241\266\330\260P\314?\313>\026B\321\263\274?\375H\232\n\264\345\275?x\'\341:\255x\300??\207s\2713&\267?\014\220\320\345\271\375\217?\301\223\336\203L<\274?\250\3270\272\361+\300?}\324}\005\013U\267?\3728\242\224sV\272?\216\032\324\375\3521\323?\221}\206\363M\023\321?\337\211\257/?\333\304?\376\035Y\022\003Q\277?\232\357\323\375\013\240\263?5%J\\vq\233?\257\255\363\375A\025\266?\326\241\303\021\336\375\225?S\377\334t$\207\304?\376\266\'Hl\267\302?Q\225\257\376\341D\261?Cw\300\252\267\\\311?\0257\326\024\264\010\256?\273s\223\336X\314\263?\217\032\253~\271\327\245?\301S\276#\007E\304?2N\270aX!\267?\307kQ\253W-\267?\207\262\314/>\035\307?\024c\262\033*\204\275?4Ay\304\215\000\263?>\263\2551\253\341\302?\364\213\027\255\321\342\250?\247\223\227\365\225\031\242?B8\030J#/\306?\265r9\242\236\345\256?*\371W\335\212\207\303?\002\205Y\354\037\331\271?9\3722-\276\\\254?\342b\204q\351\370\267?\341\364\361zw\376\260?\274\246\024/\247\350\267?\235\345\005\032dy\254?\377\004`\001!\231\246?\253H\311\316\202\340\307?[>l\313{z\300?Tu,B\363\261\265?r\256\010\316~|\266?#\267\240\243\307\202\261?\363\226\013\222\307\036\271?7GA\343\316\264\302?\331\353k\312\0063\276?\243\220Pr\010\316\265?x\n\337\031r\016\240?\255\200z\347\333x\263?\277>\252\311\242\034\275?\272\304\204\335\037\313\314?F\367\014\336\340\326\277?\347`\r\202T+\277?\245k[\321<\371\324?\3660\334\002\007\t\272?\021\242\366\007<C\273?$O\035\241\"\253\264?_\250$4G\253\272?\3774l\226\366\206\302?bn\304\201\372\020\274?*x\315U:\362\267?\236[U\3472\344\262?\217\312\236\033\322\\\275??\327)\034b\270\266?\3160\2533\233 \273?\300\t\033$\230\370\254?kFW\000\213\260\271?9\224P\343\246\322\276?kwY]\230\226\273?=\216\276\000\375\251\301?\ry\367\014P\366\336?\0046\037\213\370D\265?\335\261;Q\320\365\300?>\260/N\206\'\223?\243\020z\226\035k\247?\216\027\276\375:i\267?\327\207F\216\254\260\262?F 8\020\215L\302?`\367<\320!(\312?\3569q\270\335k\263?\371\356^\0071\304\264?\342=oy\230\265\266?\007\020\304\3157\017\260?\316Y\215\217\220-\265?\226\214J\207\332x\265?\\`\\\230\357\332\304?bE\025\027\252\017\312?\005\343\032~\273\225\262?\336jT\342eF\270?\nQ\334\366\337x\246?\243\357;t\344\002\305?Wz\005S\341\020\276?s\373;\224\316\253\272?F5x\241\261]\261?yiF\343\251\367\272?YZ\374\\#8\263?\275=\022sl\344\323?\231\352\200&\355\006\251?cw\235\3471\205\305?\311\351\263O<q\276?\367\022\341a\0058\302?\302\224\203\004\205t\220?\355\010w\314\030\035\260?\001\247\356\377 \350\263?0\033~\346\225\263\237?\220\006H\030,\363\274?\266N\376\034V\240\302?\273\321\004\340X}\244?Q\\\300\221a\221\256?"
      }
    }
  }
}
node {
  name: "normalize_element/component_29"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "m\003\201\022\302J\267?6\320o\244\333\316\357?\310H\276^\326\016\305?2\030\005\274*\242\327?\214\023i_\234\237\262?\342\014\373\306\242,\270?\225Vg\250\226\034\276?\232\203\337\007\231\304\303?n*\212\013\313U\334?\334\216\224 ht\300?\000\266\235e\377\004\265?Qg\271/\021\366\315?K\244S\250\205\n\317?\033\207U\027K\254\306?\267\347\321\013y\357\306?\025\275\247\000\205K\323?\255=Vj\242\301\276?\345\250/\215W\007\311?\350\030\327\222j\254\265?\262i\211\273\230\353\300?&\027\354Q{;\302?s4\303\035\332\215\266?\334c\223C^\353O?\3359%\004\3211\265?v\204\277\2360\332\273?h\026\\\004\252\245\267?\242\244*\3477\276\303?/\203i\314\257\334\260?K\214\303k\'\342\222?^\023\213E\367\037\272?\221}`,\253g\240?}\334\271[Rh\275?\374\245\3645\223{\312?\000\334\241k\243]\322?{\r\207\306\217\210\274?\021VLm\365Q\311?3\277\370t\005\263\300?\206\256\036\331W|\277?\031G\347\'\225#\317?[\2002\235\010(\300?\017\025\321\031\222\377\307?\021\203\nX\274b\304?\025\313\305\311\021s\313?\222\320\301\363\205\"\306?\205}\032{\037\334\225?\222\323\353\327\034\256\300?CZL4\224O\267?\312\302\031\364\214\332\307?\006f\367w\305r\255?\324\235\304s\370\034\303?\003\016\321\203\343{\333?\321*V\264\t\225\313?\345\264\242+\343/\321?\247z\215\270[-\337?\315z\323\"\022m\302?\267\202\001\337\310\227\275?u\3126\1772\027\300?\314^\266\235\266F\260?\356\211\326\323\014\376\313?A:\351;\307\031\305?M\236\3116$\371\270?\220\010\266\337\0245\305?w\301\345S\365b\301?\374\340\310x\236\034\324?J\\\331\233\236k\326?\035\023l\240\034\354\311?w\013W\031#\030\274?#\227\334\201j\236\315?\225\030C\272Q\204\314?d\021N\001\354\300\300??\377\347w4\252\301?C\r\237\247\023f\244?J\n6\362\234\324\331?\273\031\240\372(\037\304?\212oe\337\316\353\273?zQ\261\355\221F\330?Z\346L\221~\346\302?[l\353\213\252}\316?\025\245p|n\232\267?\007I\033\036-4\324?l\2119a\362\301\321?\343n\'I\213\376\300?\320\313V\316F\375\317?i<l}\354I\301?ci\347\001\032\317\306?\246@s\221\323\373\311?;\233\375\235\307\212\271?\231Xl\325\246X\310?\027\346\266\335\001\247\304?\225\316\272X\256M\344?U@t\035\2673\342?]\034\300\033\005\232\304?h\273\036Y\264\221\317?\304\342\322Y\257\347\311?P3\007\265\235\276\255?\303\'\366\000x\314\320?\230\2036\277\265\241w?l\235\035H\225C\322?v$C\000\003\260\327?\377e\243\345\323\262\303?\315\363\267o{c\321?\252\022\334}\313\362\252?\005^\303\222\306v\303?B\244~\225~m\267?\244hU\263\035\037\320?\313\017\345\326g\370\263?\342\322\330.\322c\271?j\375\317\217\366g\325?\364H(\"h\361\276?\323\374\032\021\330\021\306??\214\345\235\020H\320?\372\301\264\000QV\272?\016f{C\315\317\262?\247R\334\206\213\033\325?\024\250\254C\301\316\273?x\234\351\370D\253\304?\242wA|\024\271\300?\367X\360^\222\343\303?`\212\177\223\376\202\305?;\000\240\222\214?\307?\336\275\307\214\374\211\325?\325B\371\035\353+\255?Dv\013H\356\365\301?\256\016/q\254\027\333?\215LP[\324\273\273?rr\202\3408\003\303?S\343@p\336\275\301?^\227|\024\367\035\315?\262M\314\250i\177\277?r\367*\023-\202\320?\260[\246T\371\206\310?\003Q\215\035\250\341\263?4u\306\023\033\325\313?\200_\261\363\'\013\265?\362\340\301+V\010\302?\2526\310\274?R\323?>\244\010>@\326\264?\333\355M\350\002\022\302?\"8\245\361HR\336?\241B@\201!\262\305?\014\247KM\"\305\271?\346\207Q\335J\231\302?\244 \032\013z\027\305?\027\251\026b\014\344\317?\225\320-\331Ph\270?\024l\005H\222\362\257?\030\031zJ\"\t\261?\341s\241\236\260W\317?m\232\312\344\314\035\312?\245\334}\216\217\226\315?\027gg,\365\207\267?\231R\217\033\033\r\302?\"\226]\310\3241\316?\014\367H\205\334\205\276?\0230f\275\253m\316?3L\337\376k\337\352?\217\371\241NPu\275?\271\3618Vs\312\300?\206\263\273=\221\362\256?\277\032e\322\346\205\270?\215\026\356\374\245<\267?\02487x\357\300\267?(\321\312q2\207\330?I\007\242)f\375\334?n@\201\000\344\007\301?q.\2018h\337\266?\254.\240J\337\001\273?@\017>_vy\274?\2132\244U\360\005\304?)y\335qv*\270?\256\335\362h\025#\334?p\307\304{H\227\340?\323ae\004\271c\253?d\020\246\310$\032\310?\235\375y\001\223\247\265?\t7#\307\371\302\315?\242\246&Y8\335\323?\030\007\215\034\306=\303?\tj\024l\005\310\276?\346@\370\030\370F\277?T\351\323\234O,\222?\204KH\035}\t\330?\017d\366\337n<\273?V\032\r\355W\322\317?*\036h\034\"\"\262?:.\006\266\032\367\311?\306\214K\260\223\025\305?\352!\371\316X\311\246?\222KI\372\247 \300?\353tN#\225x\256?Xa\303kH\360\306?e\264\356\034S\002\304?\r0\230d\211s\256?9\177\260\337UG\315?"
      }
    }
  }
}
node {
  name: "normalize_element/component_30"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "4V\303\307%\343\260?58\235\246\307\375\326?\016\307S\214|)\251?\006\'=4u\034\271?\332\025\213\303\277\246\266?\215-\222\343?\276\265?\177j\330\311\302\322\256?K/\343\006y\306\251?\220\223\236\366O\010\317?5%\335\277G7\260?3\236@\214\233\020\251?\240K\301\345t\203\271?y\221{M\0365\251?\277:\214\036\377\322\273?\215\264\003\227\217\360\300?\343!Y\256!\362\304?\363^\255\301\230\200\255?e\264e+\365M\271?\222\335F\257x}\265?\254$3\220\307\211\264?O\026p/fT\263?\365N\n\225\255e\265?\264\020\267\037\375j\267?\316\037c\206wM\262?\\\217/\222W\026\267?\317\375\017\217H\204\262?\342\250V\013^\207\274?\202\231\233\341\231\037\300?l\341\242(\nS\264?\377\207L\335\273$\246?\272h\177\242\335\341\257?\021D\362\242j\314\275?w\3003\251\272\252\261?\346\375@8\355\311\277?\002\244JUY\342\272?\225#\270\037]]\267?\271\363\362\253\241#\274?\340\233\307\335\367Z\266?q\232\236\255\014u\266?\241\344\202\361\333\251\261?\221\016ea\265\335\306?\007r\007\354\225r\264?\030[.9\363M\273?\320^\272\237\014;\266?\352*\301\0108\211\244?\235P9:ob\267?Fp\325\325\032\323\257?A\3415\255\351\201\271?^\036\005d\274!\273?\306\337\337h\023\234\270?P\267\ngY\005\326?@\030\323\247\260-\272?\031\230\233\303C\205\301?\303W\tP2}\300?c\374\357\031m{\260?\000\211\373\317g\256\275?\303\366\332\006\312\372\263?\230\276\375\327\276\"\243?\016\336\323\254\236\331\272?\036(\212l\364%\226?\177\333\246\207\207\001\261?\222[\325\212\035*\272?\361\343\273\326\3266\264?gF#\305\036_\272?\336\037}\000Cp\307?a\361x\2636(\271?\016\311\257p\251\002\266?^\212\345uH\032\310?\315MM\342\251P\266?\322(\321P\253\201\266?\211\377Z\257\000\336\264?\001\321\037\334\225D\267?\235\375y\001\223g\324?G\321\347\311S\033\303?\031\225\275m\362\320\250?1}L\367|E\276?L\223\214{w\324\275?\354\026e\\\217\307\271?,.&\347\330\202\260?\342m\255H\257\272\313?\265\316\215#\265\024\300?M\3526nR\r\300?y\030g\307\236\341\300?C&b\017\302\343\274?\220{4\201\224k\240?\326\273^\353i\277\275?<\021\345\207!\244\300?\240\274F\315\202\311\266?\374\263\264\215\036C\273?\272\245rf\375>\324?\004<n\232l\223\322?,\314\323\235M\345\303?p\n+\025T\024\301?\341\034\277\001w\352\264?Uk\202$\303\\\240?2\001\304\377K\211\267?j\275\320=\232\323\225?\315\342t{\0219\305?\0310\343\316\316\247\303?\327\001^\006f\374\265?5Y\006I]z\312? i\000\007\236\217\260?\005\216\222\304\203\307\265?R\265\330K%\314\250?\326\005\240w\201W\304?\226\354p%O\232\267?KnB\221V\313\266?*z):g\213\312?j\351\360a\rO\274?\334zv\216;\004\267?\222\241:\210c~\303?I\211q\277\302P\260?\333\361$\276\032m\245?\034\235~F\245\265\305?,\255\245\321\373\376\252?\231\310\021\332\216\003\302?\202\202\016\227u/\272?\227\3418#\\^\257?O\341\202\030Z\260\273?\275\373\331K\367\023\262?\342\254\256a\213\177\273?!\217xcUE\260?mG\217\344\224\256\260?\202\265AXS\272\310?\035{[\210\214I\277?G\334\207\257\273h\270?Ey|\001\021\360\271?\004\257.X\276o\262?\203\213@\265\364\372\267?$1\314\377g1\302?,\363`\317\372{\301?}\004J\1779w\267?;\246\276\221\030;\262?\350s\2370\351n\266?\374%\nv\3015\301?l\311)\210!\274\314?iZ Ib\254\301?:\245?\330\202\216\276?;\033\241\210\r\342\326?\333IV\333\323)\272?\257o\004\002\315\002\276?_S\277\211#:\264?\366\276\nS\010\242\274?\026\267\372\177\017=\304?\314\332Ry\316%\273?%|$b\240$\271?\303e\335\213\244\347\263?@X\310\207\231\260\277?ho\322/o`\274?\313FO\340\211\030\275?\010 \001\030\331\022\261?\243\370\332.\222H\273?\247j\t\231.\273\277?\220\346\346 \212\367\273?\222#\235\201\221\327\301?U\020\202\334\345E\340?\305\003\021|\350\017\271?\323t\352\210K\247\302?;\370u\037\001U\230?\023-]\347\375\204\255?S\247\352\273\256\241\271?t@z\331bv\263?\0018\242\355+\036\301?\344MX\304\253\212\313?\363\377\022\007\274\213\265?\231?]\337\262\203\270?\006\300\376?\334B\274?\016\320\241\377*\257\267?\365\360\n\351\225\327\264?tsE\267\313o\265?`(\346t\347\266\304?\212\3021B\255\246\314?\320\205Y\264uz\261?\2161\306s\365d\271?\022`\024\341\177[\246?w\356\214\242Fb\306?\263\217\'\337\362\354\300?\267n\205\333\232\247\276?\177\034X\204\036\216\264?\214\363~v\234/\271?0M\263n\363.\264?y4\323\222\316-\322?W\376\240!(&\253?EI \334\2376\306?5\352\301\247\260\007\277?v*\t\036\031\212\302?o\024^$\342\035\245?y*\226\021\315r\262?\275)\252S%\027\266?\254MTP\000\256\251?\266\"4\371\233\215\270?)\354\310\257$\333\302?\311\232\000\337G\227\261?[\372\334x\223\271\261?"
      }
    }
  }
}
node {
  name: "normalize_element/component_31"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "C\004\320\263O\203\261?\014\235\251\240:g\326?\251l \251\372\237\251??@}\037\234<\274?\257\342\3161\222P\267?i\271\006\222\204\270\270?\366\341?.\210\000\261?\'+\271\234\250+\263?}\316JK\306 \316?\333\310\361\032&`\270?\005\223>T\352\367\260?%\205\271\252\332X\273?\240p\314kR\365\254?\270\002\271\255\365\021\273?\365\315|U\316\241\303?\260o\030\346\263\345\306?\022\013\204\266\377u\266?\240\264\235\332\014|\274?eP\000\324\363?\270?F\376\252m\324T\265?J\026\360e\264\353\270?\001\245/\3618&\266?\327\273\310\317\tK\274?\263:\324\027\213\244\264?\315CCRMA\273?(d\361\337\337\307\264?crhfm\240\277?\320\005\021\203\242\264\301?R&V\302\352z\270?\222\014\"\032)\320\247?\207R{\021mG\261?\362\261\031\262J\001\276?\265\036`\333\022!\262?5f\034g\366`\301?\241\022\363\206\335r\272?\321\030\"\261!\333\273?\304\310\365cQ\340\265?;\254\301\022G\322\270?\312f7\310^\316\254?Y\035\311}\\\257\263?\271\177%\212\242\035\306?)i=\375\031>\265?\214H&=\222f\277?\'\374\323\277\204\207\272?2\336GO@\374\255?\340\375\271\264V>\275?;\366\002\237^*\263?\274F\344\036\277u\271?\221\331\005\365\300\326\272??a\266\210\033|\270?:\266\207\205\246a\326?&\3439\327\007D\276?tC\334gX\266\303?\350\034\234\205\306\336\272?\302\232j0\204\321\266?\\\001\302\335\022\346\275?\374F\035\030\236i\263?\273(pn\360\336\250?xM\371$8\364\274?xcAaP\246\233?\025RN\031\327v\253?\303\230\006\333\016a\276?\316\253\247G4\260\265?a\253d\375\357\323\275?da\362\200^\352\312?\310\357\310\263&\361\270?\375\300\307\363(\373\267?b\2149\351,\334\307?\216\223_\222\014\261\272?\335u\231\016[\002\273?\320\311*#0\201\266?\3250]7\216\240\270?4\226g`\017\206\326?s\302\271\303|\362\303?=B[;B\347\245?\205\340\007\323o`\275?\017\257\356\317z\265\277?\225\274\206U\306\203\276?6z[\007\0144\264?\213\334\032\253\251\371\312?\213M\034Z\023\264\301?QL\004\310\325\252\301?e\2140\301\200P\301?;\305\245\210\336\262\300?\250F\236\332\317\030\261?\317BVE%f\300?\3333\215\036\246Z\301?v\244*\010F\247\265?T5\244\3768i\274?D\256vB\0374\325?HA\307y\305\324\323?[q2\360*\213\303?Mg\340\255\027v\302?U\336\271\360\266d\267?f=\330\t\377\207\243?\265S1\235\357\212\271?\264\005m:NF\225?!\331\177D\343\356\305?}K;`\027\370\304?{]!\324\216`\272?\252\233\036#\277O\311?y\350Sx\344\320\261?/\377&\266\260\336\267?\302|\201r>\351\253?\246)o8\r@\304?h\202\275\226K;\267?\020N\355\007\232!\266?\022\221\270\314\213\301\316?~\216R\263N\257\271?\350A\024\250\322\n\272?\030^I\362\\\337\303?=\024\261\372\266o\264?:\236\253\272\002b\252?\351\357zpD%\305?d\344\362@\340X\250?\221\245(\372\360j\277?U\212\333pq7\272?\317\002\311H\2614\263?_\362-\026\000\017\277?\236\360^*@X\265?\365\237j1\316\030\300?\021\323~\236\030\357\261?h~N\244\250\361\244?\232\272`\2550\366\310?\2319\326%\340`\275?\223=V\261w\315\272?Pc;\022A2\277?M\014\231\220\256P\264?\016\331\250\235M\206\266?\'$lT\264-\302?\330;\016IN\242\303?Ud`\\+\323\271?\300D\313\240+(\273?^\232\350\024`/\271?`\261\031\357\255Y\303?\274\031!{>|\313?\265\\B\255\205\263\302?}[\001\234\026p\275?P\004\241Wd\275\327?T^\266\223D\323\272?Qs\323\025U\007\300?&J\330=\315\327\264?\2159\220tTU\277?C\332\243\220\224O\305?M\252\033\307\306>\272?X\244\347\350\201\247\272?1\362\003n\025\370\264?/\004f\251\350\324\300?\236L\026\326\021\360\300?+UD{,e\301?\324l\203\262\247\237\263?=[5?f\266\274?\377\376/\377j\223\300?\220\322\002:\347\265\274?z+\006\2405\245\301?\331 \366\266W\276\340?1|j\023,\260\274?\304\220\331\257\364\007\304?\236\217\247\357y!\242?\363\310\250\375\231\353\262?8_\311\256\344\305\270?\262\355z\212\230\351\263?\325\317\257n;\273\300?\356q\256z#g\315?\226\366\316\2649X\266?\352\335\362m\316\374\273?!\227\276+\020\252\277?$\332\322\306\270\262\276?r\240n=\226\200\265?\247#\3557\364E\265?2y\347vM\r\305?p!\350\230\216!\320?R\377\247\202T\201\260?\203\325\024\245\335\230\272?\2034L5\377$\246?\342ca\234\200%\307?\277\202d\234\347\221\302?; _\373/\273\301?W\314\255\265\234p\262?\266x\222#\206\345\265?C\306\352)N\302\264?F-\014\022T-\320?\022\037\361\216\000,\255?vwS\200\336\312\306?\312w&\275:\212\277?\030\206\353\370\377\326\302?\310\352\005\210J\357\261?\033+M$z\024\264?\343\177 \260\332\313\270?\334\312;\034\227\320\263?\025\257\306\232\020\301\262?\247r3\014\272\345\302?\326XZ\367\243i\271?\321\252a\202\304\275\266?"
      }
    }
  }
}
node {
  name: "normalize_element/component_32"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "\313\225\266\3028[\272?M\337\330\244\274\345\325?RM\317\017\261.\273?\037\"\366\210\037\203\303?\352\255\344\327\315\024\264?@\246sM\232)\301?\314\334-\335\345\241\265?m\352\377\306\345\022\256?\316\231\371}\033\374\312?\273\311\242\302n^\257?\304\025\006\033\2152\276?%zI\376\210\250\256?\030\313s\313\256>\313?A\037%\251^\224\273?\026\351Z\210\311l\304?\006\243\350:\272u\303?\372F\026^\271F\246?L\034<\275\231k\246?\317\212\301&\337\352\315?\362g\221P\247\372\263?\353 \223\262c\250\303?T\333\241\357\333\001\276?\377\223R\337\030S\307?nE:\272L8\313?\303\346~\257j\316\311?\246<\307;\030\225\303?\022\222Ii\335\326\300?X^M\371k\r\267?\037\216\307o~\201\277?\345,\034\243\235\034\270?\265\306\257>oA\276?\007\216kF}\207\313?\204z7l\024\277\255?5uG\2240r\312?\374\021\366U\010\027\275?\017\301i\250\356\235\277?U0*\251\023\220\304?H\r\262\324\226T\310?\230;\000\320\313\342\314?\3266\334\177\030\354\300?c\300\224\254\2036\262?Bg\360\374D\223\267?\340\263\3576\3411\304?\310\225f2\235O\305?4<\363\373\311[\305?\021\373]\010\324C\261?&H\220=\207\241\271?.F>^1k\263?x\2019J\303H\277?M\024\000gRX\270?\350\254rH:\350\275?\013\361\336\327\234Q\310?\330\274\216^+\346\306?(B\277\366\231!\303?\224?aN\245\246\304?\261os\237&\267\311?c^\313TV\215\275?\322zF\302\301\325\267?\253\312\034\235\203\377\306?\241\324\255\212\257\367\253?\032!\246\276\330-\310? }r\230X\256\261??\233\202 3\\\312?\266\354\200Sn\016\275?a\260\212S\207\376\306?\324\3607\036\217\000\305?\266@C~\204\301\301?[\210xe\303\214\313?]F\257\333\2470\263?\360\032\306m\314\234\261?\301\035\255\014\330E\275?Kg\256s\326^\301?k\260\236\312\321\222\324?\315:\270{\206\036\303?\001/p\317\254\322\301?\320\240\333*\014\372\301?t\\~\301\035Q\313?\272\355$\035CR\265?.\335\025\333S\333\260?m\361\223\344e\277\271?\244\201_\360W+\300?\3427%#\336\357\273?m8x\233A\000\302?\336-c\037q\303\313?\240f\3360%\240\270?\010tG{\223\221\302?\375U\006)\0065\312?\200\362\337\322\035\303\304?\263\310\365=\212\275\273?\336\206\372X\037\301\321?r\334\262\016\nT\320?\302!\017\325x\017\273?\377$>w\202\375\305?\202\036(\277^D\263?3\251\035\325\033\373\270?\010\365vIqU\311?l\361\211r\362\255\306?\367\033\343Fn&\311?\017\030h\232W\205\304?+\226\365w\303\361\263?\374<\030A\373\202\304?\237\232\201\200k\035\306?\030\275\307W\n\332\305?{;M\\J:\277?\335\375\364\026Da\300?\034x\3211\311\203\314?\234\362\215\215\345\202\301?\317oo\351^H\306?\010\363z\327p\266\302?\200\027\360\021\265\335\261?`\020V8\211\316\304?o?\350\362I\233\273?Pr\274?4\254\253?\243\320\267\247\331\263\311?x\275\231pfv\272?\263i\356\346~\316\307?\347\311\370\241\031^\253?Z\262\014l\363Q\264?k/\213Q#i\303?\005\3121Oj\314\304?\336\027\033\343XQ\301?\\\227\rw\235)\243?\343Gl\337\362D\304?\361\017\303]\251\246\317?\366/ \346X\177\261?\234\376\257\344q\353\266?\270\311\357\007\030j\272?\266/\347\354y\013\255?B!\315\033\321\204\301?\265\370rq\344\331\315?\335\233|\006\026\270\250?\313\005\236\343\362\213\266?\2553\235!E2\311?\343\270\230\016\271\363\232?d\305\020\003\324\211\305?\314`J,BT\305?\013t\033D\323(\276?n\204s}\207q\303?L\342B\244\372\034\335?\244\345\037\001\314\212\302?\231\267\006\220\203\r\266?\354\347J\215\233\335\261?\217\3168\216\321Z\307?\377\230\224\212\337\367\267?`\303H9\334\352\273?\217r\322)\377B\271?TZ\005\205\317\303\273?~g\033\202Z\301\265?C\352\217\2236\023\301?D\355\021y\261\301\306?\215|\301\033\220\314\314?=\212\342q+f\265?\244\n\254\007\277\231\277?\261;B\245\310\\\312?<\361\203\220\177h\312?/\344\275\334\272\352\325?fh\372\364\3613\300?H4\310\367\241\237\305?\275\037\022\031\261\252\276?gxXM|Z\265?\322\337\360\'\317\341\304?ZM\232\260D:\276?g\2001y\010\005\307?\243vM\265\007\273\303?\236GS\2525\256\266?Z\223\222\021\\\324\270?\345\345\256\372c\247\267?_\002\020\247.A\262?\262\232\026\013/\300\307?\327\375\000\367~[\302?\361Y\241\277\005\026\323?\3747v#\010d\302?x\234\375\334+\316\265?a\003\025\232\2233\260?9\263-h\371\370\300?\257\201\347\275\265<\236?\377\315\315/1\023\323?Z\013-\227\377#\316?D\323\334\201o\327\252?\275\347~V\262\306\264?d4\324#k_\301?\211\376}\204i1\314?\201\367\341b=\034\263?@\217\334\220\002(\311?\004\005\314\346\353\236\303?\264\250\371q\316$\311?\233\370\223\306\242\310\246?\314\360\210\322*o\237?\210\262\340\023%\200\266?\232\031\034v\366\r\303?\023\310\352+O\355\300?\"\274\207\225\033V\305?\336:\270\241M\001\273?\205\356\227\361\344\212\310?"
      }
    }
  }
}
node {
  name: "normalize_element/component_33"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "\370\376}\373wS\273?\254\032\313\216i\032\327?\343\332\033?\376\031\260?MK\247\323\214\325\302?a\033\271\272\330\276\263?\007-\223\375\315\355\301?\300\376IN\266\231\264?g\260\007e\252\370\254?n\311\235\3364\331\314?@(\302b\341\337\253?\234d\222.\211u\277?\363\252s\261\016\354\254?-\277\350\377\020s\313?n\316\201\030\372=\274?\274\216\003r3c\304?\273\317\340\245\212\230\302?O\326\347\353\253\013\246?%Y\352\315f\335\253?\330B\254\330A \317?Q!\177\262\'\326\271?\322\351\033\306\024\024\303?\003\227\205~\277{\275?V\277\334kd\376\310?\003]\320\202\035\355\313?B\034e\251g\224\313?b\236o\355?\220\303?\352f\213\023{\002\301?\034\322\025]\370\360\270?{\347R\207\325R\277?\210w\360{\352\304\267?\307\311\270:\344\214\300?\267\314\373\225T\201\314?\346\177\352\006\247\221\257?n\377F\022\357F\313?R\233\177\216kP\276?\262>\2464\351\326\274?\027Z\306\033\323\262\304?\313\200~\242\\!\311?\335.\333\036\"\315\315?\304\230k\006\365\003\301?\221\004\242\246\344<\264?\353\353Y\r\022\355\273?\305\005\177C\321\221\304?SYhu\337\342\305?L\200H\\S\242\305?\230\323\337\367\341\263\257?\004\255\244;\246\363\272?\320\277\023i\321q\262?\262b\331H\351D\300?\224\334\323h\201\334\272?\205\233\233U\360r\276?(\337C\3641\200\311?\003z\334\025\314\250\307?\210{\321\303uq\306?\033X\364r\313\023\305?\305\370=\245\333\266\312?\214\013\315\226(\322\275?\265\236\354)\343&\270?\0067\342a\213q\306?^\262\311\230\275\227\253?`K\256\2638[\311?,\t~\213\266y\265?\273\245:\274\236\252\312?\246m\330\303R\265\274?\207\023\364\276\301<\310?\277\315@7\304P\304?\233E\365\304\335\332\300?\231\343\306A\312\016\315?N\353\013(\241\342\262?<Q\361\003\200\370\263?\202\310\231[^\017\276?\360\216u9q\356\301?\312\223\234\372\335\007\326?&\336\362r\207\266\306?>\277\016\355z!\301?j\205L\246\310\251\304?\006)\277\337D\301\314?7\027\313iY;\264?\314\343T^7\224\262?\243\033\006\230\236\325\276?*\r\353|.\311\300?W\266:\371\'J\274?\033g\221\365\355\007\302?\265\243\347\377\035\035\315?\273\302\016\245\3561\270?\260\t\3718\204>\301?\366h\310}M\004\313?\237\365\235\035xN\304?X\206\255\343<\277\273?\375 \031\022\372P\324?t\303mo\342\304\321?\244+\374\014\264*\300?e\3123\241\334E\307?\201I\"\342\203\252\265?y,g\003q\235\267?\023\330\023\222\t\216\312?.\370\2514\246\303\306?\217\211M\221g\n\310?q\3705v\257q\306?\335S\203zD\226\263?\223N\357\245\232`\305?\376\273\345\272\216\020\307?\253\371}A\003\030\306?Q\335\2145\204\254\274?\373\267Q\270\254\357\300?\035\3265\t\3074\317?\343O\255\356\363\300\300?e\276Sf\"c\310?GEi]\rJ\303?\254\020.\233;\245\261?UQ\233\274\361\203\305?\254\337^/\323\312\272?\377\321A\333\215\345\250?o\264\210\315l\374\312?`\330v\347D\223\273?\2719]b\241 \307?\355\215\304E\232j\260?\204\201\022_ \232\261?\313\333\372\261\225\214\302?e\350Y\302:\213\304?Y\213\027W\321\251\302?\352\035/#C.\244?\341\006+7\031a\304?5$&\\S\026\324?\300\305l\304\361N\257?\250\006qP\210\241\271?\377\356\236\265;!\272?wI\2101j\360\262?{4\332L\263\360\301?\363z\266b\r\204\317?fV\240*gn\244?\251ql\3064\226\270?\210\206\251S<\363\311?\261dT:\324\306\243?\311\276\376\000x\277\306?\002\264\231\202\266\016\306?\256\3757\013\210\004\273?\201\354l\3751\203\303?\r\016\030\354\322[\336?1\027e\364\253\222\301?]\374\n%\325o\264?\300\2534\025!v\264?\223\212\267\257\262\037\310?4(\266\\\337\202\266?\327fY\263r\210\274?D\256\314B\330\374\270?:;\n\361\367t\272?\333l\375\013<\253\271?3\205\333\225\356\222\302?\320\227\021\360\001\300\306?\326`\311>\220\310\315?\343ck\016\364v\266?\314\222\354P\316\t\300?#G\264\311S)\313?\301=A\365\036\215\312?\312\210\217xG\300\326?\212\373/\332Z\024\300?\202\372\236\252\245\355\306?\021\306\226\270j+\275?\rp\365\'\347G\265?0\367\250C\227\205\305?GN3\230\027\304\267?\003\334Y\337\263\372\306?P\244\347U\036\026\306?\233z\2521\213J\267?\034\225\376\322`\"\270?\243\310K\030|\003\267?\026\253J~kw\261?\007x\344\245!>\312?\301\257\226\335\301?\302?P\260\326\273\005\363\323?j\333\3514\366X\304?\203+\371\010\227\266\264?\242\217\231\016\024\255\265? \226\247U\357\316\300?\362o\327\030b_\253?\307.\017\241c*\325?7\242\227+eT\317?}|\005\023\306\351\253?\006\305T\317\211\212\265?\260\372\344\247\277\276\302?\256\311_\311qA\316?X~\331pj\375\261?a\235S^e\014\305?\225\\\2137\256\026\304?\037\236\270+\332-\312?\307\347\200\352@R\254?\337\363hOn\200\241?E\315\367V\233\264\266?\247\277\207\340\362w\304?\'\022\027C\343\020\302?[\207\320,\374\245\305?R\277\274\024\337O\273?H%\337\3469\024\311?"
      }
    }
  }
}
node {
  name: "normalize_element/component_34"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "\237?LF\276\340\273?lL\374\017\270G\330?d\307\312X\002c\253?\334\201\344\344\030\245\302?\226abGq\373\262?f\240\300\250\225\243\302?\013\"96\216\032\263?\023\222\237i\226\277\253?`5UK\310\264\315?\351A\244S\025\"\250?\036\202\003\212\363\230\276? \216\272E|\001\253?\232\231\316\213i_\313?G\367KB$n\273?+\326\340\3458\243\304?Y\024\355_\226\214\304?\tM\r\222\020u\243?9\'\257\373\262\247\261?\376\236\3725\311\267\317?\310\3057e\205Z\246?X\306\247|\337j\302?\032\256\352\271@Z\274?\240\205b\375/\357\312?\336\016\351\304\331\205\314?\204\306\327\224\347\236\314?n\330\310\013o\252\303?\265U\232\253\036$\301?z@\314j)<\275?\225<_2\334\240\277?\'\tk^3K\264?NQ\271\177\350\346\301?\240\211\030\305^\'\315?{lGH\017\211\260?\225\210\275>\335z\313?+\372sle\213\277?\346v\377\275\263\364\274?Z\340S\202\303`\304?\374\366\236_\316\013\312?\363\r\037\355\214j\317?\240M\033\311v\342\301?\217\"\034\307\3200\266?\273B\3529\223\375\272?\\E\254\351m\370\304?\016\367T\370zQ\306?Z\r\204\302r\024\306?\335\301\365\0311b\254?\353E\032\000\235\016\274?\347*\321\352\3107\273?\305\321\265,\350\210\300?\210`T\006\231Z\274?\324\037\3673\020\331\276?W85\017\341\221\312?\373\215\244\024\334\336\307?\312\377[\376\200\335\311?\3578\3168\320m\305?LXNT\314G\313?\374\332\334\223\345\366\275?\237)g4a\227\270?Jl\372\220\020\025\306?\247\336\362\017]{\254?G~\365\237\322\224\312?\031\244\350\232,\342\266?\361m\353\210\362\256\312?\023\316v\236\333\370\277?6\343\2755sr\311?e}\271\005\001\350\303?\373\252\236\304\3161\301?\347\322*\300\230i\316?4\314f\224\202\374\262?\036\314:\244\227\037\270?\031O\026T\332\266\276?N\256\272\362\177e\302?b\312\362;n\024\327?\034{\000\317\0318\303?\004\004\316\255k\017\277?\006C{\307\271\245\306?\013\334\335\252\273\327\315?\232\r\256\220$N\263?\274\304\310\372\034\013\263?\343\306\210\237Z\030\301?|S\n\0320Q\301?\272\242\277\220\010\237\274?\3176\350_S\246\300?\343\030\277\254-\325\316?f\005z9\320\351\270?\242o\373\263Y\324\300?\016\266\304\t\315g\313?\262\017kW\014J\304?\356:\346\377\377\306\272?;dG\006`\323\325?tKn\276X\362\322?^^\033R\216\207\300?\206\344\030T\021j\310?\371z\010\364\323I\270?p\340u\000;l\265?~\0077\000\270\245\313?g\335\007lC\317\306?\025\364\261\227z\021\310?\364eZ|\2718\310?\313b\007:\377\233\263?&\215n\020\357\361\305?\355D\334\253u\363\307?#\2558\242i3\306?\226\223\343]\024\216\275?\231\"+\205a<\301?\362\233\265 \003U\317?\217w\036G99\277?\035\026\n\333\306\324\311?\346x\230\005\371\352\303?R\350R\342\216\305\260?B\320\210\324\337K\306?\3101\"\351\204\344\271?\304\335\310XG7\255?X\241*\241\031\026\314?\307\n?\267\036\245\274?\243\227\273\020W\000\307?-\260\227\0134\326\263?\215\217\201\002\020\363\256?g\2204\030 \232\302?~\t^\362\024\371\303?V\2030\267{\371\303? \224\343\215M\244\245?\365\027\211\357\025t\304?!m\210\226\341\204\325?\354|8{y\227\253?4\'\3311H\326\273?\363z\322\267<>\272?\031b_,\270\021\267?Ra\215/\261d\302?\222^ }\235x\320?\340\rv~\342\344\263?\207Y\024\350\246\\\275?\024#P\237\022\007\311?\252(\233\310\2050\245?\344\353T\301\3642\307?\355ch\351\310\331\306?\311\373\364|&+\273?\241Nb\330\255\232\303?I\201\n\351\036\351\336?&\267\305\263\006\032\301?\351\341W\356\375t\264?x\231\037\207\332\031\266?\334\210\364\311\364\305\310?\336\ry6q\223\265?~\202\005\334eR\274?[K\003j*\276\270?Ohn\222\332\234\271?9)\362B?u\275?\"\007\217\260T\211\305?3\220\307\t\234\267\306?\016(\311\252p\232\316?\005\216\350\304<0\267?\341[\021bRo\300?7\207\371_\237\332\313?r\273V\226v\227\312?\255\260\324\013\"\330\326?*\272\356\3409\361\276?\202\253\372d\336\315\307?\362\266\254\244\020&\274?\225T\364\'\364\361\264?\256\353\214\371\375\376\305?&n\\\231\314\005\271?\311\001\206\250l\337\306?\302:\261.>\352\307?p\257\016xGc\272?\230}=\260\372[\267?\rf*\374\315O\266?f\266\211e\303\262\260?0x\354\365[\354\313?\256i9+\375\037\302?\023;C\006,\030\325?T\002P/r;\306?\300q\332\322\3618\266?\236\000\215I\264\241\271?.\241\205{\232\220\300?\221\206\372-\237\204\236?\3351\031\347\237{\325?\032\024\310J\236[\320?@U\2241\217\023\255?,\027\374\306o;\266?\301\255\007\010\360\032\304?\274\3646\003J-\317?\031\340\277\317q\233\257?\023\313DI\374\225\305?6\247\002V]s\304?DI\253\316(\345\312?\265\024\033\351\310n\252?G\3710\030\257\273\241?\366\342\313\021 \255\253?\340\002v&N\235\305?:\205\023\323\260\030\304?\033(Sy\371\345\305?\305w\263\035\213\241\272?\314_\027\001\362\376\311?"
      }
    }
  }
}
node {
  name: "normalize_element/component_35"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "\001\003\260\035f\021\274?\203Cwb96\331?<1 \270 \024\260?\241\031f\226t\274\302?.\316}\021\353\017\262?~4*\335N<\303?\372\2425\355\377o\261?R\363\032\220\304\230\252?[\ns{|\224\315?\234\325\235Of\201\244?\322\025\203\277\023>\274?\244\353\013\346\204\020\251?\017\030\216a\372\020\313?wW6\2469\217\271?2\337\376\2624\335\304?\236\246\224\254\312K\310?\342\350\377\\\001s\241?\220\374\027\301,X\266?\310\251T\213\263\242\317?l\365\356\362!\346\272?\354\310\022O\326\245\301?\337_\007E(\363\272?\2731|\305\314\336\314?\316\017+\365\217\362\314?\362\261\036k\004*\315?{\257@E\354\313\303?8\212<\341\3261\301?\003.\225\245@`\301?\322\017\307\023q\025\300?\262BR\212\244}\260?27\211\2105\361\302?\033\321$Nz\241\315?\035{\235\244^\017\261?\003\017\222YK.\313?\307\200\354\365\356O\300?Z\237\271!\242%\277?\301Eu\332\035\311\303?\243\3378\325\314\355\312?3+P\2253\227\320?\247\367\265w\0139\303?\371\007\345\013\307\344\267?\330\314\274}\237o\267?\312\351\tP\365Y\305?u\021\002\231m\214\306?TM\224\255\303\213\306?[l\273R\224 \251?\300A\307\2037\350\274?;l\260\335.\025\302?\025S\310\031\263z\300?\334\035\306b\243\305\274?\325m\353\317\307\372\276?=\277]3Og\313?\031\004\310c\025\225\307?\302(6V\312\001\315?\035C\327\360\272\237\305?\273\375\255\365)m\313?\201x\033\243\216\361\275?\245h,4\354\004\271?\355\302N2\353\345\305?\211\371\020YF\030\256?8\022\332\005\222\226\313?\036\271=Z\377[\266?\242\223O\326Be\312?\201hUg\217\271\302?\344d\221\017BL\312?\034>\276\304%\265\303?9\356\260c\005:\302?\271\3556\000\377z\317?f]\246\235\317=\263?x$\010\236\025-\275?\220\317\rH 0\277?\343B\3243s\267\302?\320S\226\201\000\242\327?\205\330)\356)\215\311?hJ\241\342\356\342\272?\\cD`\264\340\307?\nt\232\303\275\213\316?\273\025\2242A\276\262?_xF\327\\\240\262?}\322\n\205h\352\301?\370\376\272^\220\260\301?@\035\214a\031\336\274?B\326\215V9\035\300?I?&\3017G\320?\304\247\221zu,\272?G\376\271\230\001\017\301?r\250|[\362p\313?\202T\367\271\273}\304?q\332\356FhI\271?\211\025\274\210\271[\326?\036\032\215\261P\201\323?\267.t\246\202j\276?\277\213;\001\364K\311?_\201\023\312\365\310\272?\305{\333:\242<\263?\220\304&\215,t\314?[\0220R\331\304\306?Y\372\325\276\256\326\310?\210VT\350\257\234\311?\002r\214\333\235\362\263?\n\315H\231\341:\306?k\010.Y\214\257\310?\230jf-\005$\306?\233\235\332SQ\300\275?\206\t\226/\327>\301?\335\227\204\"\025\372\315?\221\226\237[\265Y\275?q\177m~u5\312?dI\024\265\217p\304?\301X+O*^\257?\275=hs%\r\307?A\027!\375u\365\270?\037A\032\343\375\027\263?\223\244\277%m\333\314?\277\"\035\360\211\215\275?.A\205\244\310:\307?\377\322\3270\231\343\266?\203m\252?\331\314\253?\225CD\227[\r\303?!\330o(\2476\303?\251\252L\010\210\017\305?\023s%\017\377A\247?\241\027I\026\213z\304??\327c\307\353f\325?\310\343\2312\230\010\250?\315\270\302\036\207\177\275?\302\230Z\332\234\217\272?EM\371\262\342\213\272?\301\237\325Z|\260\302?d[\217\215\003\371\320?\343+h\3677\252\251?\2655\"\030\007\327\301?cf\353Un\346\306?\205\265xKN\372\243?B\2632\264\026\363\306?\347\225\234\'_\217\307?*^\210|g\231\275?\312NVD\001\246\303?\276\303A\320>\307\336?J\002\341\376\264\365\300?\004\016;h\203\207\265?y\335K\257\007\362\266?\273\276\341\316\035.\311?M\253-\344-1\265?\021\027U\306\214^\273?\212\000\005\351\362~\270?s\303\376\321\2100\271?\324\374= \354n\300?\031\333l\370RB\311?\206\032\263\\\236\235\306?kTu\311\0278\317?\tb\025y\326\221\267?\313\304\354\346[\277\300?\246\313e\032\202`\314?\316\200\006\335V\241\312?\002\365\233\306L;\326?\346\370\371\323l<\275??d\205\263?v\310?\242^7?\332\214\273?\2464:\236\321\201\264?\'\336\340\217\313M\306?9\024;\243xX\273?/\211\350\024:\250\306?&\275\247&L\016\311?\237\257\027\022I\327\276?nQ\022\204\276\203\266?\377\025/\237w\246\265?]\213]u\371\343\257?8\324C\302d[\314?\202\014J\274/\363\301?\373\312N\002E3\326?\266J\321F\205\334\307?k8%S\027\006\270?6\366\357q\333\373\273?\013\3525\037\322M\300?\365N+\243\226\210\262?_\325B\221:V\324?\307\227y@\023\000\321?\301.\213\325[\r\256?]B\202\005\327\254\266?91\366\356\'T\305?\347\211\371O\275\t\317?\231\351\357\211\233q\252?<-\254\014\304a\310?\005\215a\232^\254\304?\347M\231)\032\\\313?\303\226&\276=|\251?\220\214\024KC\355\243?\215\372\373\367\246\n\220?]\2756\215\200Y\306?\010\r\365\242\023\225\306?J\331,\333\252\013\306?:h\327\006\354?\271?[\2106I\361\006\313?"
      }
    }
  }
}
node {
  name: "normalize_element/component_36"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "V\353\333\201\356V\274?;\243\231f;\230\331?\371\270R\251\273-\260?\317k\022\332w\247\302?V|\350\'A$\261?u\317\037r\261\244\303?#j\363\026G\231\257?+\233b\243\346\212\251?R\327\271\355k\262\314?\220\276\322\304\376\\\241?\307I\262%\343L\271?rg\204\211\3175\247?J\225\024\227d\226\312?\200K07@2\267?\344O\211(|\257\304?\322k\203x\374U\314?3\206\377\225\021\356\240?c^^\270\'S\274?-RL\321\326\260\316?eQ\316\323]2\270?\035\334c\nR\300\300??\311\217\213y\274\271?\010\341U\377\265v\316?RI`\035\016%\315?u9g<\370\246\315?W\306\0005\'\302\303?\034\010\277\220\262\036\301?\320|1\010j\000\304?\226\030}e\333r\275?\006\206N\375\363\234\260?[v\251\215\301\265\303?\276\335\234\216#=\316?}o\374\036/\203\261?\317\037\252[\003|\312?z\031S\035c\010\300?\336\357s#\374\360\300?1\317\323KO\002\303?\336L\330\300N\230\313?Z\r=\355\346E\321?\370=u\242\340\306\304?\202J\246T\323?\271?\022\034\205\216\227\032\265?\320\211\254Q\351\211\305?q\343\007\310F\211\306?\006:j\267#\375\306?G\366\224\336/M\246?\204P_H\347y\275?<\377\362\240\013\360\300?\025\356\241\354I:\300?z\234q3?+\275?\331\237\335\204\357\273\276?\340t\206:\220\333\313?\334]\375^^\316\306?\033;\023`y\214\317?\306+\345\274\314\236\305?^\374\261l\215\030\313?E\364\330\207\326\271\275?\017\372X\025oQ\271?y\376\010Q+\275\305?x_j\2138\013\260?+W\342{+D\314?4\032Y/\017\344\264?\254\252%\212\201\317\311?\237\351\302\233w\224\305?goQ\257Y\203\312?W2\220\377\263z\303?\n\307\rnT/\303?*\036!G\226\023\320?M\211=\027\272P\263?9Y+Y\234\021\301?\315A\325\212d\177\277?\344xJv\210\331\302?\005\375\321\254v\261\327?\327\373\275\257\362M\311?:h#\2251W\300?=\322\035\032\317\r\310?#\r\030kR\346\316?\360\230\342\363\210\246\264?j5\301\303\366\013\262?h@U6\300M\302?\006\271[\367.\334\301?\370r~\016\034\345\274?#\364\003\274\244h\275?\032Lm\360X\350\320?\250\206\303\363\316x\273?\030\265\276\362gR\301?\254*\323\346:8\313?I\317\006\366\036\202\304?9\t\335\331\342\220\267?>:\032,A+\326?\260\320\336K\247\366\322?\310}\217 \2638\272?\256`\317b\037\240\311?\325\322\026\266\352\343\274?\367\235\357?\343V\262?\030\025\265W\306\326\314?\374\265\333\177{\226\306?\201_\002;\'\213\311?\021\327\343\036Hg\312?xq\340\252\362\212\264?\306\231\330\334\316G\306?\212\377\202w\316#\311?\211IC\203\320\336\305?q\"\331\247\014\261\275?g8B_\252\364\300?\020\324\373V\203\241\313?\314j\221\037\267\200\275?9\303\276\261(\253\313?\263n\201\331D\263\304?\002v\204\277\2360\255?\035V\256s\260W\307?&\231\315\312\223\367\267?\276/u*\3659\270?\010\342\007\252\360.\315?\255\35442\305%\276?\253\3568\025\016\\\307?:\255\265\331SP\270?k\211g\231\335D\251?\224f\351\306\230\024\303?\310\355\350\226UL\302?\242L\335tO\307\305?B\036\3717\363\241\250?h>3\375\034c\304?\323\346?q\356\331\326?\004\344\t\214\016\253\244?v\244\256@\352\262\276?j\317K\026\016\274\272?\265\250\361\000\206M\275?\276\236O\347\001\241\302?o\350\310\362\3670\321?\'i$`y2\257?G\235\225\301\014\336\306?\034@RS\261B\304?8\214\354\304\221y\242?=\260 #Y-\306?\030`\226\253\\\376\307?F\210\346\222\216X\300?\245\0213\373<\206\303?\313\275S\020\"\352\335?A\364\026\242R\313\300?}p\256\311i\273\266?\032CEDMN\267?e\274\265e#D\311?\203\206\250\tum\265?\272e\032\\Ys\270?\312d\025\217\273#\270?a\207\260h\332\310\271?C\365\372\206\316\332\301?\255xPtP\216\304?\022RzP\227_\306?\346\240\247\250\312\234\317?\363|fF\310\213\267?\257\324d\332\277\261\300?\276\356\024u]\255\314?b\340\356\351@\217\312?\367\362\r\025{\371\324?\332\206\252\310\203U\273?br\204\273\234Z\311?R\250l-\323\374\272?\357gU\244\362\021\264?k{03\260q\306?hM\r\343W\364\275?/o\362\201;\025\306?C\027\334(\025\201\311?\234\271\253JgO\301?\017\226\254\350\341\224\265?I\303\373:\010k\264?\313\212\322\277\323M\256?\276\230\351;\030\241\321?f2r\317 \251\301?o\320J\231U\261\326?:\350\rU\003\035\311?F\371=B\261;\266?\360\252\033\260*I\275?:\030\344@\245\020\300?\363\312l\305;\226\262?L{\302\223\217=\322?\2756\305*xf\321?\324\222n\033\253l\256?\027e\323\235i\272\266?\327\227o\364fQ\306?\353\302r\370b7\315?+\241o\226\210s\245?\033\262\204,@\330\311?\361\237\333<\357\265\304?\355\341\370\305\230\300\313?\032<\315{\374\333\251?\205\322r\373@M\256?[\327VV\024[\227?\271\275\213\224\271;\306?\216r\230~u\324\310?\312\033\273\237\256\t\306?QE)\325\311\217\267?\247w\252\251P\320\313?"
      }
    }
  }
}
node {
  name: "normalize_element/component_37"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "\253&\270\363%\235\274?\001sbLP<\331?\303\241TN\275f\257?\331\275\366{KA\302?\373\326c/\317\333\260?\000qM=\257\321\303?\27698\345\305\032\256?\tP~K3\357\250?Q\302\017x\247\025\313?Q\366\376U3\252\235?\225i\241UG\275\266?\273\035+B\373\242\245? :\021\270\006\332\311?\336\315\210\017B\371\264?#zm\304\000z\304?7[\275\346\374\344\316?\351K]\234r1\240?\227B\2174\222f\300?\210\302\362\335iO\315?\324\346\225q\247\202\267?\211,\014p\305n\277?\023\347\023?\347\352\270?z\357BO\327N\317?\277\323d\306\333\n\315?0s\010\274\226\307\315?\016\022\310C\344\226\303?BA\240h[\343\300?\243\360\217\255\035\273\305?\252\\\277\230\341\312\276?Ba\253_D\266\262?\276fh%uN\303?\233~\370\025E\261\316?\225\374\355\212\227\251\261?5\360\025p\336\336\311?Om}L\374\265\276?+\336\261\240|6\302?\234\032[\024\345\256\302?/\243\014\340#\336\313?\031\005\245\216\254A\321?E\307\304\234V@\306?\013\271;3\r\377\271?\302\345\021\331\220J\264?\315tG\260\205\241\305?\255e\322\251\242-\306?Q\236\036\200y\255\306?\254}\021\237\001\026\244?f*\'N\254\333\275?Z\002w@\334\314\271?l\356\016G\\\242\277?\312/\002\261\014\364\275?x\347\305\223!\352\275?,\0104\304\360\322\313?\\\3576#\016\017\306?\346\323\303\3152v\320?\264\254\366\016\211K\305?\223\031(V1\210\312?2\351\003\212\327C\275?Sl\256\225.O\271?\374 L\003\237\234\305?\225`\251\342Q \261?\000\364\255o]z\314?D\335\007 \265\t\263?\341\016v\270\215\356\310?\254K\334\026\244\232\307?R\344\205~\352\273\311?\342\274I\035.C\303?\2755\374\343\307\\\303?:v\227^w\'\320?)La\243\201\337\262?\3023\023\237J\354\302?4\335 \227\216r\277?\365\360Q\276!\306\302?x\277jb\n!\327?\201I\217~\262d\311?\217\242\304j\320\360\270?sX\325#\361\230\310?\267\230\346\360%\341\316?a&\316\255\267\035\266?\362\347\350\254\247\272\261?\211\346v9i\375\301?AW\026\335^\270\301?\177\265Q:\344\250\274?~\210\274\316NR\273?\211\325\347\266\271\033\321?\303\326Ae\311\n\274?\232\032\221\275\030i\301?\363\367q\205\216\325\312?\344+&\333e$\304?/Q\343\374R\341\266?\274\'\363\265\205l\325?6`\237\037\227\317\321?,\320\005-\330Q\266?W.\344\251\370\223\311?t\304\003\305\355\"\276?\335fi(g\010\262?\231\252\370\3422~\314?\247\261\343\335\226*\306?\360\221\300+\361\334\311?3\005m\235xA\312?\230\226\271B\035+\265?D\247B\227\313!\306?%H\017\275qD\311?\306\314\\\345\253R\305?\207\226\235\307&N\275?V\253tL\035q\300?R\316p3w\025\311?\351\345\274n-m\276?x4\304g\241\023\315?\032\335\263A5\304\304?Z\203>+E\377\255?\231\327 \262\231\332\306?\025\322\000/J\010\267?\215,\311\234\2174\274?\273\250\253u\301\344\314?\203~F\354\212N\276?\221w\315\37799\307?\300r\3476\237\302\270?\251\371\241\007{i\247?oJ2\330\370\277\302?]xV\271\355\316\301?C\244\234\353\330\341\305?\364}R\234\214\362\251?\010\347\225\343\374*\304?\334\370\374\370\227y\327?iJ\246\233\250\313\241?\004\300\016\"mq\277?7\356\210\2337t\272?\260\362\333B\035w\276?\3400\265\313\325T\302?\013/rc;\376\320?\220\216W\222\317:\260?\007k}@\211W\310?\177\227\320_\023\322\301?\255\227\244\007E\300\245?\242\317\257\374\345\022\305?\034_{fI\000\310?\\z\217\216\006\213\301?cq\261\002y?\303?2\337f\226\251\216\334?\272\240\264\363\332\205\300?\372A\305\207\305g\267?b\243\232\374\220c\267?MiI\274F\317\310?\223\314\342\254%p\265?9c\247>\341\003\267?p\376\306\241\365\245\267?\355\307\232O%\034\272?,\030\372\377\357\312\302?\007*\2535\t\350\312?\020P[\317\202\343\305?\242\222\371\233\336\262\317?\272\245\223t\346\201\267?\247\351guhT\300?p\262\226\315\337\256\314?\325 \314\355^.\312?\274@2\345\217~\323?\276\331\266\215\336\247\272?\311\002\216S`\000\312?[7\316;\210\374\272?\240%\372B\351\007\264?\310b\245\306\247g\306?G\002\027\250\350o\277?\313G\272\2658\"\305?6\001\301G\275Z\311?\216U\267k#\215\302?/\017\253\325\335\220\264?\260&=v\221n\262?\330\177\005\177\253\264\254?S{<\355#\211\315?\\Ng\371J8\301?k\355\333\033\014m\326?\3050U\240~\246\311?!S\215J)i\263?\225MV\230\000\364\274?dIj\265H\331\277?\261\345\305$\204\220\263?C\326{s}\364\317?D..\021Ln\321?\203\237\003\216\256\031\256?\245\245>\005\312j\266?\024\3653\t\237\354\306?2\261\274U\0367\313?xq\"\307\304P\244?cbD\271l(\312?c\357\021\2462\211\304?\353y\241\372\263\321\313?\271\033\273y\347\246\252?\0258\377\315\220\314\264?\257feG\037\375\251?m\260^\257*\247\305?\332\251&y\217b\312?B\365\337\350\002\325\305?\301\236\232\276\343\003\266?\265\241\300\r\301\t\314?"
      }
    }
  }
}
node {
  name: "normalize_element/component_38"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "\331\335\217\035Lq\274?\366\265\306Q\315\355\327?%\251\347\005!\036\260?\227\3527P6^\301?$\241q\004P\334\261?\244!\321nn\270\303?\"\334\336\032J\000\260?J\351\200\301\301 \251?0\222\200\025\003\313\310?\370\327K\203=N\232?X\020\344O=\232\265?\267#l\335\245\213\244?\361.\027\361\235\330\310?\024\241P\320\237\226\263?\374]&*\036\016\304?(\373\303\243H\217\316?c\313\270\312\217\317\251?x\275\326\323~S\300?e\310t\222\364\003\314?\235D\032\233q(\266?\341i*r%\016\275?!^\346Z\005\310\270?\202\360\352\032\002\007\317?\226\347\032\226\241\222\314?\262kH\312\200-\315?/x\207\312uI\303?\016\354\216Kpx\300?\270\230\270\270:\276\305?\333\001\360\262\323M\275?`\223I\316\010=\263?\r\236\346=\376\355\300?\331\256\347\243@j\316?\267\230\353\251\337I\261?\014\362\030\275\321\311\311?\325)W\304%\021\301?aY\364D\223\350\302?\366cw\247Ye\303?@\017\350^\275\220\313?\351\320\257\316\255\'\320?\215;\262\255\367?\306?t1O\254(\345\271?\370\206\360\237\326\003\265?\307\360\\\010\007\265\305?5&\272\352\336c\305?;\317\216\nR\337\304?\362G\031\275\217\255\242?)\312.\343i#\276?\275$\2646\244\211\266?6M&\016\243\227\276?\365U\255\335ZL\277?\206\010\373 \022X\274?\313\002\237\177\2704\313?\240\255vY\273\311\305?\341\277lG\340K\320?h\231\313a\205\210\304?\372\0258\307#2\312?\036E\267\r\214\204\274? T\206\312\357\317\270?\241\222\245\234P\204\305?\250\205-\236\303\372\261?3/\\]\033\030\314?\336G\r$*\177\261?\266\211\242&K\304\307?9\366L,y\307\307?\272v\0334\361\227\307?fmX\365\347\022\303?\204nx?C\377\301?\345~a\333\235\323\317?V|\234\231\373\214\261?\\I\210x?<\303?\227l2f\357\345\276?3o\373<Kr\302?\014\323\001\215\365\324\325?\352\304\205\006\331\347\310?\014Irh\255B\272?\257\307\242\273\264\271\312?-\307\361d\263z\316?\304\305\361F] \261?v\301\326(\310(\262?k-\030\321\200~\300?M\002\'\035\335/\301?+\331\242\346Z\035\274?[18W\210\237\272?\311\ts\270\337\254\320?\272@L9\224\336\271?\252\007%\374\355\023\301?\367\322\305\272yi\312?\013!\255R\366-\303?\255\347\030N\241\214\270?\316kf\331\005V\324?Z$\324\251~\307\320?7l+[\303\303\264?\212z\025\247\307\247\311?\006\214\216\341:\021\276?rJ\277\313\254(\261?@Tp1l8\313?E\251\224\t\205i\305?\037P)\273\010\257\311?0\006v\377\317\326\310?\223\254Q|m\227\265?\016\344H\203\265\323\305?\016\220\247f\210\003\311?\245\026\010\n\325p\304?\303\313\321\270w\332\274?\205\371\353H\007\201\277?\371\372\265P\215r\307?\202\275\316\365\231\r\276?\354\345\305)=\n\307?J6\204N\373\262\304?f\360\234\322fA\262?\276K\210=\335\216\306?\301\233\364\022\361C\266?\231n\276\2032\034\275?\332dH\246\'\322\313?\202\317#\007k\352\275?\363\217m\002\324\240\306?H\016\2778D\036\271?\226\345ok\2403\246?hiq=?I\302?\2041xQ!B\302?\203\331\324\336\177\"\305?\326\312h\n\273-\253?U9\345\270\360\317\303?p\272N\353\202\026\323?\006\361\344G\272n\237?\025\030\032\236J\305\277?\264mP\257\037X\271?#:\340\307\214\310\275?\344\220[3\374\236\301?2w\305=\252B\320?\352\003H\273qU\257?\247\335\221\254!C\311?\022\223!\333\272Z\300?\225[*\324r\036\261?\027\200\222w\030\327\303?]^\244C\354{\307?#\007,\206\231\240\301?\374`\331\377\022\316\302?-\273N\215\021\365\332?\232}j1\202\n\300?e\201\322\367\352\310\266?\346\234=o\341{\267?e\245\031\360\321\231\307?s\341\320\363XG\264?k\203\023\321\257\255\273?\320\270\371\021\202\377\266?\363u\225\305/\202\267?;n\213AF\021\303?~\332\2721\303\032\311?i\252\340\035\004\020\305?\004\340\334\265=g\317?\346\250\265\306&\315\267?\014\221E-\334\330\276?(\347r wS\314?M\353{|^K\311?\273\245\356-Y\223\321?\001\036#i\317\226\274?z\240\"B\264\272\311?v+S\345\336\360\273?\016\000\367j\267\305\264?vDg\224\214.\306?^\005\216\212S\273\276?\277X\335\277\271\214\304?L\370\240\305$\254\310?\'Qd\352\004m\303?q\226\212t\334|\263?p\255\rM\215[\262?+\020p\0328&\253?\246\331*+\307\320\315?p\265N\\\216\227\300?\025!\366\273\020h\325?\004\373\221\035y2\311?\360Q\252=\037w\263?\316>}n\342\220\272?{-\234/\354\354\277?0s\301\346\n\331\263?\233^\275\345E\001\315?\272\321\215\321\266\361\320?\215pX\357w\365\254?\226\325\324\257\375\257\265?\255d\227\r\n\001\307?\031M\255E\253\035\314?\020\344\357\312m|\252?\376{\0140\325\207\311?\301\340I\364\372\037\304?\\#\335*\343:\313?\331\257\202\262\005\221\252?\370\337\214\222>\312\265?A\263h]J-\256?c\260xp\313\225\305?#\370\226t\277\303\312??\251\240\351\277c\305?\30444\347\336\030\265?\203\363\334T:^\313?"
      }
    }
  }
}
node {
  name: "normalize_element/component_39"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "\355|w\337\274\256\273?C\344\207YN\323\325?\241>>+\255\342\260?II\276\373\253\023\300?\016\360\341\350\343\207\263?\221>\035\367\374\\\303?\355\317\013\230<\365\261?\263;N\030g\350\251?\017[\202\245\035\353\305?\374<\227\300\345e\230?B\237X?\347\202\265?\277\326\252\377\241\320\243?\232.)\026v\223\307?91c\213V\316\262?\366\003\242P\344\203\303?[\3444\312N\r\314?\032\030]\004\344P\237?\303VW\245\367\004\275?9.Z\265\250\245\312?T\276\305\225C\243\264?;\375\r\313\200b\272?;\223f\216\r&\271?\004o\205\006\033\304\315?\207\312\255\263\233\305\313?\377\372\232E%\376\313?{Y\262\341\353\326\302?\007\256\331g!\303\277?N+\212\371\347Y\304?*\177\267ss\007\274?k\215\253\013$\032\263?\333\240\r\370\260\242\272?\204uNy\225\261\315?\023\235y\372\207{\260?\217\r\315\n\177\345\311?\001\354\343n\376I\276?\023/zg\347\006\303?L\013\272d\354\251\304?\320\263k\330u\303\312?\364M#\370\242\247\314?vr\213\233H \307?\264\357\\\250\224\010\271?\366\327\334\345\343\331\266?\242\\\006\333\t\250\305?\312\245\2526#6\304?\333\'u9\215C\302?\306>\214\006\254\371\241?\026\243\256\265\367)\276?ag=\216|\344\264?(\006\227zUh\275?n[\240L\277^\300?\267\356\232\033\311!\272?j\205\332P\340\006\312?e\257\341c\\\243\305?PD\313)\035\306\316?C\353<\205\267b\303?a\016Z\306\210\257\311?E.\252\330\247\202\273?in/\260a\342\267?\206\365Ie\277k\305?\246\254\372\352\027]\262?\003\255\036\002\327-\313?\304K\271\300\2721\260?\253\311\322\325\275X\306?LX\350q\202p\306?\345\376\355)nY\304?\321\343\302D-\324\302?\305\035t\253\025\335\276?\271\206[6!\312\316?\364\371\341M\242Q\257?e\320\236\005\200.\302?\203\375o\326\364\341\275?\374\227*l\224\342\301?#\361\263\020k\361\323?oZ\315\223\233\003\310?CQa\353\240\262\272?\330E\205u\331\353\314?\271E\027\326\270\267\315?\257\270\n\362K\256\247?\215D\373g\354\034\263?\316K\031\306J\275\274?\372\3466\225\320S\300?2\362\257n\207I\273?\365\317\006r\346\335\272?\037\2752\206qk\317?\032\026\364\365\264\367\265?c<\250\226=a\300?\257\372c\'\252\341\311?\t\370\356\274x\262\301?s\274D\355ex\273?\266z0$\205\344\322?\027w\327g;W\317?\323\223Zqo\323\264?\r\247\302[\304P\311?M\357\316\031\322\332\274?\373\317X\003\255#\260?\017Y\266l3)\311?m\307F\263\301h\304?;\323\024\231j\272\310?\345-a\261\251Z\306?\021FQ?&\324\265?J\277\354\272\221[\305?\304D\227\370\"h\310?3\376aqVI\303?\334,z\201;K\274?\343\377B\032\013\306\275?\333Gg\223\325\212\306?\310%\204\312\234\007\275?$8\213\235D\222\310?\352\'\212\372\236}\304?8@\010\177\301\031\267?\224\262\276\341;:\306?2\002\263\r\237\236\265?\344\355\236\302e\243\273?\242\336\320\267\254\022\312? KT\254p\004\275?\016\336\371sA\245\305?\353\033LN\343\032\271?t\320\004\016\221h\245?\346\217\307\336\033\233\301?\327<\254\017\2427\303?\2667X5\221\244\303?\177E\215(>U\254?K\2728\272\342S\303?\370\007/\231\341\201\312?o\207\322S\356\202\234?L\204@@T\240\277?\323S\036\274\372\241\267?\376x\226\275\370\344\273?\355\013\227><\227\300?p~\213\232$ \316?\026Q\212\213\340\325\253?\254,\324\021\365?\310?\210\335`p\031,\277?\377/\324\352v\271\271?\252%\314\235av\302?N\364\233\267!n\306?c\313\270\312\217\317\300?\205\002\201\221A5\302?\031R\311)\317\026\331?\375\317_\275\221\306\276?C\272\344\'\361\023\265?\017\027ja\327u\267?\342\335\301\352\360\331\305?\367\017\226o\205I\262?y\366{\263\344\351\300?\007\300\034\22667\266?\306\304A\235M\242\264?w\227!\024\257\300\302?\276R\306Z\244\222\307?\272M\234\002\267\363\303?\334\013l\230\030\300\316?Q\tn\365\263\020\270?n\275%\207\357G\274?\2207\022\313\332\244\313?h\225R\375n\355\307?\345\027\370f\250\005\316?\200F\n\341\250\007\300?\251\336\221\346\314\314\310?\252\240\225\300U:\275?\201ku\331\262\363\265?\220\223\236\366O\310\305?\177\020,\273\036T\274?b\366J\n@\244\302?\214\213\376+\206F\307?y\323\210\3646\021\303?\275\"y``S\262?s9\213\002px\263?\217\267\307\230\334\244\251?\t\242\216\221c \314?R\233\301\252=\226\277?\273\232\237\217\360\205\323?E\314\013\001\327\315\307?\036#Mz\347\351\264?\214\267\351])\274\266?\025\341\0341W\037\300?>\311\030}\327\260\263? !D\336\344\n\313?bX\216(\236\007\320?\320)\370\010]\013\253?\327\224O\202C\227\264? \212\275\250\301\232\306?\024\331\331 +\351\314?\335\255\374\227C\211\262?\324\225\225G\263\t\310?\325z\323\265u~\303?9u\253\010\263 \312?\377\017\257\237\211\246\251?\330\332|\325*\367\263?\323Q\224\237\342\245\256?6\325`\010\243\023\305?\250\032\004\360+#\312?\r\337F\363\225\272\304?\312\253\250\376\227\244\264?\303\016\204\340\310\356\311?"
      }
    }
  }
}
node {
  name: "normalize_element/component_40"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "\235)\031\245\360\305\273?\247pA\014-8\323?\202\250\223\035/\345\261?c\211%\352\247-\275?\200b\362s4(\265?\376\315w/x\312\302?\372,\324<u\034\264?[\300\013(\302\360\252?\371\232\340\371\027\221\302?\3665\201\330\210\026\227?6\341u5-\274\265?\334\312\357\215Q9\243?!\371\265\273(\366\305?D\303K8@%\262?\203\013\206.9R\304?\013\304\321\246\001\373\306?u\255FA\263\225\241?\216\244\2061G\341\267?F\225\255jS\371\310? \326U`L#\261?g\2048\2106}\267?# \311&\245\222\271?^\020\214\341\274\310\313?}\210;N9\265\312?$7\305\016#w\312?\220f\035o\241T\302?\343\356\210\027\377O\276?\312\327mi\230N\302?\342\217\264\261\230\254\272?\003\007!\0214\025\264?\263h\007Jt\220\262?\340\367]{\340\017\315?>\275.\320\251\274\256?\215\204\033\3101\324\311?\323\263DZo\003\300?r\233W\022,\320\302?\206\215\262~3\361\305?\305\362:$\255\237\311?\210\016\024\207R\314\307?y\266?\376o\270\306?\033\024e \343\222\267?\321\204\002\303\255\023\271?c`4c\205f\305? c\031\333\236\262\302?\301-sH\327=\277?c\251\201(\220\300\241?.s\006\273k\315\275?\200@\266\030{\260\256?\360\257\365w|\034\274?\\\245\303\\\265\337\300?\310=\007\335\370o\267?,e\322\014\315h\310?\306\nQ\232\332M\305?oF\344\363>\331\313?b:\rN\315\360\301?\303a\350_2X\310?\010\026\3332MI\272?(\0142\030\017\256\266?LR\333~\340G\305?\007\344\316)!\210\262?\241\235xs]\335\311?\264-\310ke\217\255?\"\274J2\003\271\304?\013\211I\362;Q\304?9Iy\001\204|\300?\225\005\004T\347z\302?p]\\\243\030\262\270?}\217N\353\243D\315?\0278\013A/X\253?\203\373\224r\335e\301?%j\222\355\266j\274?\003\347\013\250\3270\301?\037\355\032U\317\247\321?p_S\\_h\306?\320\346\221oQ\016\273?f\241\276\341\025\363\316?,\370Q3\302\240\314?\306^\023\305\360\000\260?\260\255\014\233\342 \264?\256\321\034\240\316\361\270?9F\376\325\3550\276?\200(\000\025z<\272??\215v:b=\273?\2405j~/\327\314?t2\304\363J@\266?\274h\237\371b\020\277?\325\222\022\253\324&\311?v\025\340(j\312\277?\3018\t\274\313\371\275?g\245g\177B\013\321?W\335\234\252x,\314?\377r?=<\037\265?\342\310\032-\273\253\307?\371\344\027\024\274\327\272?\373+4u\366L\257?\212?\006\002\317C\306?7\317\205OBB\303?\254\257\033\247\002\235\306? \\9/\331.\303?k\321`%\257\346\265?\206;\211\233b\264\304?\234m\265!\333\206\307?\375\345\322y\006\355\301?\036m\320\"\321\207\273?\231\300pXa\315\273?\273\374\252\003\360\264\305?\262r\322u\215\210\274?;vUB\245A\303?\237\2549\274\367\"\304?\005\203\304\2460\027\274?w\236\224#F\312\300?\373\220\\\243\212\007\265?Q\360GcJ*\271?:\221\201\270\202\330\307?\253\2647\213&\266\273?\224A\227k/t\304?*\261z\246\350_\270?\356\244<\365s\003\245?eB\243\246#\241\300?\277y\360a\226@\304?5\230\363}R\234\301?\021\014\272\231\336\271\255?h\"\026x\301\274\302?!\373o\021WO\307?\316{;@2H\232?A\333\251:]\366\276? \275\324\024p\353\265?i\t\336\002\234m\267?\362\333\034V\324:\300?\032W\226\307\036\n\313?!ULY\021+\250?J0\375\224(P\306?\313\204\"\207\317\360\275?\305\310lr\363+\301?Bl\256og\354\300?\232\213\275\354\336\327\304?\030nL\221t4\277?\004\366\rV\340\207\301?\276\2110d\306\362\326?\324\251\360<\370V\275?X0\207c\261\333\262?7\250\375\326N\024\267?\221\312B\253\373\326\303?\254\332\373u#\003\260?\253\323\266\236w\034\302?L\334X\300lQ\265?\035\036\2341\307\320\265?\261x.\257\003\367\301?\337\326\202\203b\220\305?\004#\205k\033\252\302?\207>*\216\233\313\315?i\250\ns\246\374\267?\305\335\237\331\025\375\272?\303\303\3347\274\265\312?\014\010p$\0276\306?m)n|\360Q\314?\277m\025\340\225\306\301?\330\301Q\212\007\250\307?\227X*\271\324R\276?\024\005\372D\236$\267?b\324\362YW2\305?\332:\257\346=$\271?\000\021\333\020\365\030\301?\262Z\022\000\031\003\305?\305\311od-$\300?\274E\232W\371\016\261?\350\230^(\201I\244?\261\312\231\256\2469\250?QV\016X2:\311?\250\217\317J\253\270\275?K\245\254\232x\253\320?\243\307\224\264\207\242\305?Y7q\201\352p\265?nR,\022n\r\262?X\320wa\262K\300?\234\241g\234N~\262?<V\366K.\000\311?$\3015&\255\300\315?ZQ\314?\317\246\250?\201q\202\314T\\\263?\373;\246\261g\326\305?BT\356\371\362\246\310?\234\366\2538\211L\270?\354\330)\322\324\035\306?\213?\255I\207\254\302?\376\241\357\'\220\275\310?\301\030\277`\237O\250?\220\356\311\276\211s\262?\301y\253\2155\314\262?\352R\332\035}\214\302?\237Se\0371\350\310?L\345\035B\275\342\303?\322\372\n\273\360O\264?\320\254o\327\200\005\310?"
      }
    }
  }
}
node {
  name: "normalize_element/component_41"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "\340\'q\312\232\340\274?\336iV\251\3456\320?\244\riO\'+\262?\325\344\304\177\003\330\271?%\335\277G7!\266?\250\221\022\2227\006\302?9BH\016\2778\265?\274F\337e\005\r\254?\331\322$*\264\251\275?\027\262\t\034H\230\227?\334\351d//\316\265?N\374\244\034\304\265\242?\202\270\364-Hz\304?\331\237O\332\327^\261?\026#xg\340\014\304?\2343\351\211\303f\304?\004\001\007\364\217\254\242?t\224yg\221F\262?f\220\343\320 \332\306?\304\326\367\327\256\255\252?*\022A\014\334P\264?<\364\335\255,Q\272?%o\210\n8x\311?\263\254u\216sn\311?\2667\324\374\354\230\310?\2574r\333\223\207\301?\314C/nf\236\274?j\033\344\315\230\004\300?\337U\334\246\342@\271?lv\237A\025G\264?z]\207\266\330\367\250?\251\022\036\232\235\270\313?B\243\314\352C5\254?_\233/$\227\347\310?f\303\256\256\211\323\277?\226\233\255^s\376\301?xn~\034\375J\306?\247\342\214\202\\9\310?\010M\316-\315\235\304?\2668\327\356&\321\305?X\202\t\377\311\257\265?-\226\001\353a}\272?\353\001?\037o\266\304?~BW\321\010\376\300?\\\374\366@\356\314\273?\007\355\177\307\212\366\241?\302\211\023X3\304\274?ZI\303\332,\037\244?]`\245n\246\303\272?\273\257\213!\207\250\300?2\203\216\334\356s\264?\227\007\322\215\374v\306?\334\244\322\352\014\325\303?\300\000\263\\\3452\310?\210\250\"\022\016H\300?%*\242\306\207\220\306?$\017\225]h\342\270?\270\021\216\332v:\265?\212\315\3625\376\026\305?\261a\215\200\370c\261?`B?2\2412\310?\307\376!\031L\245\252?\221:\234!\236\352\302?-\014.\251\034\313\301?\213L:v\302^\270?\246\204\341\325\322\331\301?\321\335\340\321\347\037\262?a\034\\:\346<\313?5qp\276\030\227\247?\'g\254&\035\337\300?\345@Q\321?\336\272?:\001i\331<I\300?C\"`\271MT\316?\266M\0349\005K\304?\254 RH<\035\273?\026\016\255\3432\215\316?\335F\342i\"A\313?\200\277\024\365\264\211\267?:1\024E\202\010\265?\330W\rxO\324\264?\340\230\373jb\017\273?\220\241\245#g\376\270?\303y\274\271\215@\273?\300\010@\372+\306\311?\022S\357\227\271\272\260?M\214t%S\034\275?iAq\305\232Q\310?\273\212\321\342\250\266\273?\203\207\374B\256\245\276?\307\256k\266\035\223\315?\034\344\036\340\203\366\307?y\256\236|B\302\264?\207\255d\275\324l\305?\304N%\301#C\270?!F\216\310\005\324\256?N\230\271\213\363!\303?9\273s0\264\035\302?\"\013\267\315k$\304?\"\004Iw\216\003\277?\375\rJ\000M\360\265?\203,C\320\\\335\303?\204z\341k[V\306?qL\315 ip\300?\320\215]`^\231\272?\266t\353\206\204\'\271?\333_s\227\217\347\304?\262+\300\206\306\344\273?-\274+\270\250a\275?A\034\351\341\013\240\303?\3026\rJ\313\332\276?\373\246\016\304B\305\301?\212>$\036~n\264?\303\263\353{`\211\266?\013n\001\'/@\305?d\010\356\252\201\022\272?\027E\000Q\337\033\303?C\356\013\260\333\334\266?\177V\207F\361\326\244?\"8zq\354\035\277?_Z\021\213\321`\304?OSE\235+]\276?f\367&~s\034\256?\017\266)5\263\n\302?\270\335\357C\352e\306?g\251\035Gqc\230??\240\371\275\311\306\275?^\207\273\221\261\216\264?p\037\022\3560\316\261?\202\247\031\035S!\277?\223[\036a\324\222\307?\233FDE]\352\243?7\275\351h\345\366\303?R\307\232\371$c\274?\343\260M\215D&\303?\377\214G\263\366\032\276?\227D#\303\035\364\302?\013\273\244A<X\274?\326.\376\232\322\230\300?\265[\201\327\035a\324?R\022\276i\215\320\273?1x==[,\260?\210{\241\212_T\266?\250t}\r+\326\301?.\226\352N\354\253\253?\211[\252w]$\301?A\034\303\032iT\264?2\252N\377@V\270?\226\272,r\304\344\300?\002h\243Y*\006\304?\217H\234\224\320=\301?v\227OL\232\243\314?\350\247c\216\030\317\266?c\200j\332\312\355\270?ID\235^\316\221\311?+\370m\210\361\032\304?\n{\022\214\016>\314?i\304{\367\217\221\302?rR\356\367\361;\306?\377\352\263\373<\343\275?v\344\025v\273\330\267?\350\025\354\022\027x\304?/\365h\264\231\346\265?\350S,V\213\212\276?\344I\351\321\010A\301?\"V\361\331I\343\270?\306\016\317\267\252\221\257?\226u\251X\317%\257?\333\200D\035\232\325\246?\014_\224\335\"\251\305?\026U\316\375&\253\273?\373\2149?-\225\312?\323\347\216\361m)\303?6\314L@~|\265?\360\317hR\332\200\253?\207G;\2361t\300?\372\031\363G\014\223\260?|t\030\003S\\\306?\231>\314Ba\356\312?\2324\020Bu\260\245?9\210\207Db\201\261?\206\211\"~\247\304\304?\244\016\251\244y\200\302?\3274\207U\320\365\273?@\235\t\205\274\351\303?ML\313\323\257\260\301?v\333\355\311\257\036\307?\031\200M\243\267\342\246?\350p\240\314\256\027\261?\302}.d\2778\267?|\020\225U\367\231\276?\315\362\332D\3446\307?\030\2132]\200\344\302?\247\006oO]\347\263?\250`\"\030\346\310\305?"
      }
    }
  }
}
node {
  name: "normalize_element/component_42"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "b-\035\367\326U\255?|\327!\260\322\332\251\2771\316L!q>\270?\370\023L7\264\301\\?\240%\372B\351\207\244?\256_\227~\025\242\260?\365Jki\364\276\231?\235u\334\334\327\002\245?]\2249\223\277\306\264\277\003\226x\032\022\362_\2770\271\325\234Q-\241?\374\333Q\333\007\322e?\361\247\310LbC\225\277\262\334\203$t\026|\277Y\326\242\252\256\350\253?\220\327(\220~\240\223?\322\221\316S,\235\247?\350\"\360M\364up\277Y\216 -\177\322y?g\222\370\337\301\204\244?\335v\270U\304t\217\277\031\326\231\352\345Q\235?\363\330\340\216\201\206\214?/\333\2250\2570\267?\025x@<\277\346\264?\231\212\"\336\031q\271?\t\244i\365z\234\250?\241oEAt1\237?\374\371\310Ce\027\216?)\254azSu\243?4\215(\030\216\032\211?t<\"\2035\376\256?\304\033\030\307\350\203\220?\312>\305\372\3213\256?Uh\365\025q(\230?>&\323\032\343\300\224?)9\246u\273\341\260?#)\264o\230/\267?\2646\341\354C\317\251?xS$n4\321\253?\357<\211\271\270Nz?w\203=-\014\177\251?\275\331\363\360\366\004\246?\014\013o\210Q\r\222\277\221\377\336z\010;\201\277\307\252\26055\262\234?\351s\270\315\211z\240?\344\021?s\224\213\246?\312!h $x\256?\230\220\346\372\004q\212?\031X\355\270\3460\242\277;\374\201\347\350\265\263?\226\225\376\334\322\225\236?j\357|\324\231\332\274\277\211\315<\303\030\264W?Mpz\257\013\323\262?\200\207y\301m\216\241?\333\277\250`1C\253?\033\274rgm\355\254?\316&\t\207\263b\201\277\255\343]\315\270\253\253?\373\275^\253N\030\224?7\374n\272e\207\241?_\031|\343i\316\221?\220X\222\t\346RF?\364S\276\225\\-\232?\333G\302LH\\\201?\247=7\312\200\007\253?\302\201\235Vb\202\242?SM\263\272\201t\240?o\352\272\362\204\036\232?\003\322z\317\263\037\243?\276##\232R\364f?\277>B\346-\313\201?\301\216qX)#\251?\023(A\003\332\353\265\277\357\215^cPS\273?[S\327\334\374\177\227?\014L\251vF\216\252?P\313\213#A\376\261\277\247\\\346\026\350Jt\277\204b\366u\212\234\242?\002\336\360%\3166\250?\307)\303\203)t\252?\2351\'\303L6\225?\001\320L#ri\242?H\347J\2447\323\266?K\r`\3263\240\232\277\020\016V\231\262\236\225?\231\026\275\237\217<\226\277\332*G\034@,l?\241\241\306W\027\304k?S\341\375(R\260\261?\313i\274eh\353\215?\220\213\237\003!\222\262?\035\240\250*<\201\225?I\274\324\271\266x\253?L\211\3232\032E\231?PEa\177(\204\225\277\022R\010\373\256\274\235?\023\277q8D\363\253?y\3068+\024|\260?\226E.&\240\003\252?#5CcS\322\254?\n\213\326\306\342{\232?y\301\034G\360b\263?v\272c\0311\237\250?I\007\313\250\227\267\256\2778@\252\r\300\231\265??\211o+4E\215?\030\177}\242\"\266\251\277\213\227\021X\345\264\247?#\217\240+#\213\263?\"\014\035\352`\305\205?,\304\215\325\222\000\234?+\222wZ\363\355\233?\340M\345$\374\241\237?\337\034\004\326\327\336\243?\034\r\020g\246}\261?<\306p\320\271\266\267?\213-~\377X\033\244\277\036Q\307\201\\\004\266?$]\037\025\200x\262?\307_\331S\022\334\274\277U\223\226\200N\367\226\277\327\276\336\317\271s\250?=Z\225w\347\346\233?8K1V\207\033\246?:KB\202\337\017\271?M\354\334\337\231\003\212\277\221z\214H\315\204z\277\204\024K\260\211c\261?\226L\24157\215\240\277\377>\302\264\230m\262?\017.x,\021\003\247?d\376\222\323%\203\234?\324\213\031bnW\241?gJ\215\376\007\300\247?2\315\360v\357n\246?\346C\3745\354\006\245?\223o\375\216\275\353\207?{\r\357\251\004\332\233?\022(\220I\256\261\253?\230\255\234\215\372\303u\277\370\263{\231\370\010\257?\3416\350\205\032\t\227?(Y|z\324\256\242?\353)\375zA\350\221?\257\212Q\206\223\374\242\277d\235\224\303\323\235\244?\305\317\257Ht\030\273?\201\347i\266\256u\216?\353\374i\020\327K\222?\276rin\030\224\273?\000\344\211\302\\\302\237\277\205\243\360H\330\221\256\277s\353\177\312B\205\253?<-?p\225\'\261?\306jw8O\257\207?\270\317\t%\274\322\243?\301dW\030*\030\246?\274\223\233\035\2630\221?t\023\311\030\236\345\233\277\375\204\336\333\'Y\260\277\263\376\"\252\350\366\255?\013\324A\342G\312\210?P\265\362\237)\314_?S\207=6\307\216\237?\256\033z\201\025\204\233?Xy7Sw\036\230?\365\342\335\364\333\225\255\277\347\214\237\373\257\311\217\277\267\017\007v\355\354\226?\256=N\371Y*t\277\226r\354\020g\224\257?-\177\220\365l\007\207?i\350\215\375\246\\\235\277\225,\217\204i\327\262?p\227\266\345G\357\241?m\315\273\211\330b\254?_S\311\373\226\013\263?T2\027\360\3464\257\277\020\311\017\343\325<\224?\032\"\033\006\373\310\232?n\325@\266\326^\245?\325\265\235\206\r\356\247?\214@6u\220j\246?\261\025Z\364S\276\272?\266\346\214\375l\261\223?\31499\302\3601\263?\201\230\2236\246\276\260?&\210>H\344\365\253?\n?6\236\017\234\235?=)\273\342\247F\250?"
      }
    }
  }
}
node {
  name: "normalize_element/component_43"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "\362\252\265\315\3401\254?\227+\344\223\023\302\256\277a\323\035\240\010\235\265?O\370\327\270\037lx\277\274\237\270\273\205\260\235?\3258\250\270\002\356\255?\312\302#f\000\354\223?c\255\033\233\217\376\244?\3613G\271\250T\266\277\350{\0252\2720p?\243{d\340qk\233?\246\314\337\032^dP\277]\333d\037\'\366\227\277\037\270\225!8u\214\2775\346\352\321\230l\244?\270\206\022`j\341h?\345\317}Z\301F\245?\271\277\323\224\377\361g\277bt\016\330\264\326`\277)\362h\006\230\311\244?O&\250\300Mo\226\277\316S/U\357\304\230?\301\367,?\330x\214?\377-\376?\031\246\264?\316\203\017\263\004\n\262?\270\374\265,\307\372\267?\023\027\311\034\240;\246?\354\305\035]\017\240\227?o\254\313\366\017\214]\277\344\322V\367X\222\245?\301\363\270\223{\306\201?m\357\350\271d\240\247?+\274\335(8\020\210?\266\361n\377\246\204\243?\210k\277\3710\"\233?v\245\206\262\307vt\277o\303\324\010\220\260\253?\206#\272\372\300t\265?\266\212\r\374\371\315\243?\004\242\350\000\017\254\246?t\242\2270\036\316A?\324\367\342\327\204\276\251?\272\207\332\357\266\366\240?N\271\321\346\211\376\232\277)\235\202\333^\373\242\277\177^(\310\036\215\234?\232\311\017\023\017S\231?\261\276\n\273\353\026\244?+\324\242Wf\276\250?\335!:\016\000xk?\327>\003;\025\250\247\277V\275\006\301\006\353\263?\366\314\353\270|L\225?\275\346\212\217\245\210\301\277\036\202f\264\256\001\204\277\327\302\236\t\\\275\260?\263\3029\222\347\324\233?\205\226E\306B+\253?\374\273A+eV\243?\335(\347\310 0\210\277\313-6x\"2\244?|\333?[v\244\224?a.\007Lp\202\234?\210\324\177\231\231\340\220?-#>u\201\322\215?+\010P\031 M\210?</\025\033\363:\222?A^rP\2000\237?\013\256\010\352\323\253\232?\220s&c8{\232?\341\241\251P=\317\232?\330\365\202\204e\302\234?.\013\024\033m\001s\277j\204\213\320`7B\277\362\254\002\207\340P\243?\226\363\3434\346#\273\277e\354\2354\201\340\271?\324\200\365Cb>\211?\240\007N\350\273|\246?\277\243\366\275\256\250\263\277y\304\317\034\345\242\216\277\217Em\367\177\311\236?\"\377\030\257\203\307\252?\211B\271\327\303C\247?V\367\363f\007n\224?#g\236\262S\331\255?\'\0046\335n\246\262?\357\347\247G9\351\236\277DS\314\372\372E\220?\266\346\364\340\341\202\221\277\226=\222],\266`\277\221R\025\302\206\2010\277\210\254J/%\243\260?{\200&v\370a\204?\214K\307/\313=\263?I`\3268Yr\222?\377\234\177D\3365\246?\253\016\031\214\232zp?\030\216\304$\214\001\222\277\177\353\244m\345\355\220?\217\265pmi\264\250?\335N\353\316\304\210\251?\260\215\035\371(\310\244\277g\274J\312\037\004\252?N-\322\371-\220\211?\211N\333.P\254\260?\306\271-a\322\267\245?\233\340@\355\\=\261\277|\207\311\276\245H\263?\014\016\340At\207K\277\227\3316x\236y\261\277\023\2758c+w\246??\320#\251\371\350\263?\236R\334\363\'\352_?.e\227\252\337E\226?\271!rl\320\246\215?\013*\204\267\002h\236?x&\270\201\320\264\252?sI\252\366\266\207\260?\037\206\356C\362V\265?b\005<\214\360\306\250\277DZ\213\230\327\346\261?\233\030\215\332\317r\260?\330\213\025\363{\264\271\277\030\010jG]\252\235\277\266\321O$\327\316\247?c\273\246\000K\300\225?\244\006^#\005\363\247?\371\373v&\365\344\263?\326\031h\t\365\236y\277\350\272S\256\256\022\221\277T\001nK!f\260?\311\346\204\262\353<\250\277&g\017Q\330\207\265?\205\223\302)d\310\244?\300\266<\336\375T\223?\352O\265\362\237)\234?\"g\217\207&\237\255?m,\2115Z\343\244?\342\2550\323\257\332\240?;\356\027\220\026\227\211?\363E\345\2400\232\232?X}\035T\274s\245?\235\334\376{A\"\205\277+\211\240\365\346\363\256?\234\ne\237\317\231\177?\203t\237\206\351\'\234?\215~4\23427\203?\230e;\036\264\320\232\277\267\211\237n\274\025\241?\r\202\037\271[0\267?\377\202\211\261\337\"\220?\373\022\345c[,{\277\322qe\353A\212\271?}\0270-\\\351\247\277\301\215\217t\330\r\256\277\210\273\214\370\324\005\250?\302\025P\250\247\217\252?\036\223\2417\320\324o?\314\227\361\230|\021\241?\002\257\340\310M\036\232?\350W\233H.\324\211?=\007\352\"\362N\244\277\340\374\365&`\235\265\277\211\330\225\323\364\222\257?\253D\246j%\356u?\234\263E\237}Of\277m@5r\2360\237?\0105\200\rA;\225?\262\265\257\035;\221\224?\rs\037\014~\023\242\277ibJ\274\355V\243\277=\007\255\277\331q\205?w9\265\313h\370w\277\251Q\001]\037\311\250?\240w\024\373\214\212\202?\200\n\211\254\034\367\215\277\177\217i\211o\n\253?m+q\250\325\023\250?\360\253Di\007\r\247?\241`k[9\240\261?\204\346\3066\241w\263\277\3317\026eMd\202?\253\312\264\271\016.\225?\262*\275\224\214,\240?\270a\244\257\321\206\241?\034\250\332\016\020C\251?\341\301[\217\336\312\273?\237\362k\310\230\353\213?\270:!\360\227\001\260?\002NE\343\266\241\254?\310n\314\326\355\370\246?u1\366\363\340\315\224?Dv\367c\007S\250?"
      }
    }
  }
}
node {
  name: "normalize_element/component_44"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "\"\247\301\312\'\177\253?\\-\214\001\315x\261\277\\\364\253\277y\377\261?\202\233/p%\255\213\277\206MF\220\250\"\227?\230\240+\266\356\213\252?\220[\037\0308\207\214?>u\347\264g\311\245?\316a\240f\246\006\267\277\347\244/8\016\262\210?\275}\300}\3118\225?\344-\3400\224\275l\277sC\363\003\316\207\247?\375\024\016W\343y\236\277\361\237M\222\327\030\222? f\001\243c\270\206\277\266!\357\352\217\017\245?K\017ksayW\277\236o\016Ny\261~\277\376\357X\321\276p\244?.\376\375\374\323\032\236\277\221\340\367\203B\203\225?y\020&\270\235%\222?\241\034-PP_\262?\n&\277\304\2465\256?As.\251\0006\266?D\226]\024c\267\243?O\035/\315Bu\212?oy\366\2463Av\277\276UA\206:\036\247?\233V0H\377m|?\021e\276o\273Q\241?OR\000\217\037_\177?\241v\377%\227i\242?@\261K\335`k\230?\022\314\371\253\305|\200\277C\355=\260qj\246?l\355\255\343 \352\263?\307\262\257(dh\234?x\233\317j\225!\250?\303\233!\224x\362q\277\306$3I\362}\252?\301\217(\274\035D\231?\036\335\2265\242\225\240\277-\234\004l\220\024\247\277\247\333\266H\n\307\234?\026(\243v1`\222??\365\240\204\277}\241?)\247$\210F\271\243?-\227\336\025\371\251u\277xA\242\333\333\305\253\277\324\350\0039\220D\264?\220\312\335\177\025\364\203?\313\354\264\264\241\302\303\277\245\277\2414\3677\224\277\263 C\260r\264\255?4N\"F\370\254\225?\321\244\361dgl\252?\306<\213\333\361\361\224?7\n\241g\331\261\216\277\225\004n\376\333<\232?\002!\224\"\362\220\225?\367K\010y\344\337\226?\276\363V $R\221?\272i8\007\375\274\233?e<\r\302#\304Q\277\373\357\211\3018\302\232?\333zP\307\230\370\201?\300\227\016\022\254\356\214?\377\254\2368%\305\224?M\222\254\230Q\371\235?\"#\242\303<^\224?\331R\235\224\235\014\203\277\322\261\023\366\236\336}\277dQ\340\266\031\033\234?\322\262tY\332\026\277\277\332\235gL\276b\270?\021$\010\272j\\g?\370!<\310U\246\242?g\342\317P\331\271\264\277\201\327C\010\203\303\227\277$\207\016\325\"\017\231?\026\260\371\305`V\255?*^S\212\227S\244?R\254\016\021\033R\221?\231\2009\\\246\204\253?\362\310\r)\200\016\257?o\177Joa\330\240\277PkI0\235\"\204?~r\370\312\332\253\201\277\311%+\022U\360b\277\257\354R\210\037\032h\277\332m.6a\206\256?\327\'\372(\225\203x?\'y\212)Lp\263?0pq;\321\001\217?\020h<S\340K\241?\340\306^\326a\330\217\277q~t\376\256N\214\277\r\211\234:f\013v?r\027\371\246\375\227\242?>a\242\2444Y\242?\360\375\216Z\301l\217\277\253\202\261\273\311:\247?\r*\375\306\317-a\277\324\340\033\342\326\337\254?\206C\317c\035Y\241?\205\312\030O\237\305\262\2771\243\004o\333\006\261?\035\014!YSh\217\277\374\355\227\301\253\364\264\277\205\310\204\300\023x\245?p!\275\0302\355\263?\265K\300T\330\261v\277\277\272*P\213\301\221?*\377\275\210tGh?\\\330\264\001\301\344\234?\345}\177\367L\376\230?\374\313\014 \036\267\256?\014\003\255\370:4\262?\306\t\341\013r\233\254\277\316\250\0329\342\373\247?`1\253\3667\010\255?\215\200\266G\002\034\266\277\252x\024\310\233\345\232\277\302;\022\222y\242\247?\353*\271\227\357q\220?\324\246\010u3\321\251?\271>\232T\256\234\253?\216^\000&\030\352j?S|\363P\030\352\233\277\005o}\225\322\354\256?h\342 \230\330\271\256\277\250\322\235\307+\007\266?q\256a\206\306\023\242?\002\376\230\362\373\340\207?\036U\311\327\320\223\225?D\332@f\331&\220?\276!\217\013\307&\245?\032\255)\344\330\347\230?\007&\317\2467d\212?\240\271\024x\243f\232?w\271ND;~\236?\311\303zW\310R\213\277\222\t\273\322y\'\257?F\341\006\276\232\352\202?\310\014\240T\005\347\223?\033\033a!\330\220f?\223\222t\206\017\020\177\277\360\216\245r\207\013\234?\205\315\rAf\313\263?\223`\247\341&f\221?\014\007hy#\225\237\277\334(Rd$\260\267?\363\334C\016\206D\251\277m\311!\027\331$\256\277\344\343\304k\037q\242?\214\301:\303\021\372\242?\206jx\352\371\351k\2776\304\307\023\200\000\235?\000\033,v\335V\204?Y\262\002\372\177\000\202?h\230\351}4\263\251\277\027CF\373\260B\273\277^\366\033\210\215{\260?E,\270\330\0325B?9FO\035\355\260x\277\323\027V\262\342\242\236?\205h\320w\207y\220?A@\034\366\013\016\210?\323}\010\303\343O\244\277v>\302\204_W\246\277v\224\253\241\322])\277d\333\203\277H0y\277\331r\255D@\210\242?\267\273<\332\216b~?\002\360\037p\374\007c?E#\310\326m/\237?!2Lpa\022\257?\211\3633\237\272\214\240?\321\212L\031hY\260?\252\276\237\214\204E\266\277\016V\345@\3444Q\277Y\261\227$\321\366\220?\345\325\035\2614\365\226?\363\341$\220\274\272\227?\005\262FY\231\322\255?\360X9\242\345:\274?\323\254d\256\251\177\220?\240 \256%\257\221\250?\251NtN\315\224\245?X\360.Y\rp\242?\236\346B\267\'\340\210?\332\233@Za\317\250?"
      }
    }
  }
}
node {
  name: "normalize_element/component_45"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "\267\210\227\303\310t\252?O\362])O\311\263\277\272\260\226\204\tx\255?\222\300\264\342\372\373\223\277\003\316}2\371x\222?*\226\334\332\"f\247?:\316\235\373\323\217\203?VP\300\222\205\221\245?\200\227|`\205\343\266\277\321T\357s\363\302\224?\037\321\317\227\210\376\217?\031\274\\\202[\220x\277\271)*\212s\256j?\026\202\233\023\033\366\245\277\304&<\345\364\234d\277\270\014\344K;D\226\277\010\300\257\371\007}\245?\265\340\335{\314\310O\277_!\265\201\"\263\212\277\300\205\264G!)\244?\261\263N\200T\317\242\277\010\332\306\232\357\262\223?\200\033Hh\342U\224?\2507\272\202!6\260?\344y\272\004\361\313\250?y\233\372\352\361\225\262?\356\322\002\213.5\241?=\222r\307\000(m?4g6\365\245\252e\277[\303L\250\316\r\247?\"\302\001%\354xw?\342\263\022F\365\316\227?\210j\rO\366iq?\274N\004 \327N\234?,\245\307\354\265k\223?\352\203\203\302B\333a\277\001\215y\3557\262\242?\347Ze\272\230\345\261??\303a\212\3560\220?\022\232\272\261\364/\241?\203;\212R\306\350~\277\353\300\275[\356\006\253?|wY\203_9\220?\217\244\305\225\212\370\242\277]\244q$\247\341\235\277\263D\331\356-\313\234?`\003\020\341\331\312\211?E\033\236c\342\204\235?\032\365s\267\251\211\237?\032{\\?\360=\213\277\234U\026\272O\344\255\277\233\r\321\2378\253\262?ZO\356\341\201\343\320>fw\215\005\241\226\304\277\315\207(\245\356j\234\277c\321\036vyO\252?A\300\265n\336\223\220?J\334\024\243oQ\250?(\252\031z\r\277x?\220\217U\313O\n\222\277s\325\007U\024\366\213?\227xYv57\226?}\325\227\223\272\336\220?q\322\013\251h\315\207?\330\240\016\257\024\227\242?\313\025\314\002g\325\211\277\336nQ\177 \355\237?f\332\221\371f\354\202\277\310)\375.\263\242r?\025\003)S\372y\217?q\213,\253F5\240?\333\252\204$<l\211?\344\373\022\214\253\023\211\277\217\202\000Is\214\205\277\3607\351\234\360)\222?\217\207\216\202\177\210\300\277t\240\257\242\004\322\266?\231KG\214\340wj\277\327\317\310\013\334\306\236?v\313>*&8\265\277\002\\\223\345Y\206\236\2770rV\021\\O\224?\021\016o6S\252\255?\357\260\257\223\377k\241?\034\201\364$\033\325\212?|\355\003\n\241\365\247?R\252\257t_J\252?\220\314A\325\212d\243\277:i\034\025\370\275o?\352\342\224\213\301[A\277R\256o\256\001\024:?\335\316\235\3447\032r\277\302\360\370\223\204\206\253?\345.\367\006\265\230e?S\221\005\252Q\330\262?\374h\364Gq\276\207?\251\r\351\030\331\223\231?\\\301d\032\265\021\240\277\230\2364\375\247U\207\277\270>I\r\257\034h\2770\033\334W\227\263\232?\340l\202\216\247\374\227?\350\034Zi\364\230\236?\234\342*|\241s\244?*\032\214\215P\236\221\277v\354\000\205\003\354\250?\334\310wT\365%\225?\n\200\010\251\217\313\263\277p\352\274\363\257\330\255?\361Fo\203\235\014\227\277\360\001\025\351\331\207\266\277\000V\216c\000\265\243?-+\262u\'Z\263?\214\033\204\247\372\017\211\277:\351\2318\233\211\213?\242\371@K\207\351{\277\220\376\217\372\210\353\232?\224\223e\225\215_\243?L\373XT\323\024\254?*XP\ti<\255?\211\374\327\022\"{\257\277\2066\313(@[\237?@\355\023\347xj\251?\271c\022w\272\310\262\277\246\224\242X\030i\230\277\335\005\364\ts\227\245?L\014\200\363\rE\210?\270\301\251?]\005\253?$?a\327\226\004\237?o\351\r\001\004\317\200?\310X\320(\033\336\241\277\010g\367\261p\374\254?\230\3602`\034\236\261\277\344\275\341sd\273\265?d[\013U_\315\237?V\013\267?\301\014p?~\377\312pZ\365\217?\270\"\236\335;\031\205?\035\303T\024^k\243?p\204hT\260+\221?=r\035C\375\267\211?\365\344\t\240\362\221\231?\267\314\337@%\007\224?\027\266x\016\353\341\215\277,\235\235y*\301\255?\330\036\322|\211\t\222?\013\360\r \244\360\212?\270\232h\234\365EL\277\014y\275a\306\007\206?f\025\357-\320\341\226?\307\327\323K\342\345\260?\001\216\337\t-S\216?\033\374\203\234\205\252\250\277L\3537_a\313\265?<\026\'3\350\310\252\277<\0279PO;\260\277\312\251L\032k\313\231?H\312\275\220s:\231??\257\032y\220\006\202\277\351P\346\034\305\004\226?\324G\020IU\\\032\277\026S\002\305<\351t?\307\363j\227n\306\255\277\337\214t\350\357\003\277\277x\002\224\230\375\300\260?t\300\035\304\250Mg\277\250c\216\030O\232\200\2779\317;\302\'\245\235?\362\331\300q\247\341\210?\201\305\315\350\310C_?LcX\036\324\340\244\277\316\244\272ql\354\247\277mbA\224AK\201\277\335&+r\307\034}\277\003\236\303\233\206\277\232?2L\202D\316Sy?\n\013!\371\340;\215?\306A\0072BE\207?\354\214\364D\005\276\260?O\001^\326,\346\223?>\360\003 \206\007\255?\0133\036\271\366\004\270\277i\0239\332\367\374\202\277z\t\275\032zm\205?\250\245\361\277 \337\215?\216\326\237du\"\216?\"R\364<\217\274\256?xnj8\026(\273?\364yPF\030\343\222?\034\244\226\234\311\355\241?\236\371#\254\220i\234?@*\206*\203\n\235?k\200I_E\234\177?KN\346Rn8\246?"
      }
    }
  }
}
node {
  name: "normalize_element/component_46"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "\200o\361\365W\275\247?*\234\206\243\t\346\266\277\251\030\216\267\372\211\252?h\023\372u\264e\227\277Z\276\034\340\303\321\207?\301\367\001\277{\204\244?eY(\200\3779~?\233\344\366\264\213\265\242?j\235\014\034=\357\265\277\357\205\260\267 \235\232?\237J\010\201U(\210?wr\312\377\2137\203\277\371\217\037\006\307 \226?L\336^\244\340\301\243\2770\245\271\013P\367\202\277\345R\241)WR\234\277L\274\006\364\367\217\244?\366\351\374\004\345\360x\277\224\314=f\230\301\225\277\276\304\227\n\243\271\244?6\200\2303\304y\247\277\305yLe\320W\226?iZ\263\2543r\215?|\010\3357T\022\254?\251\035\332\3244\200\244?\272@\211\234\254\273\247?\240\034Y\207\020H\235?pB\034IT8*?\343\366\037\'\271\264{\277\333\013\244Bwt\244?D\254\347lM/k?|l\230\217\016\211\221?\230\346#\027\006\246_?\220\302l7\376\232\211?dn\274\020\262\371\220?\331\020\3373Yv\201\277\202#\014\371#\351\235?\347k;\022\324\225\255?\001i\317\312\225\370\206?\025\312\241\311\356\227\237?\261\r&\017UB\201\2774n\256\275\366\234\252?\214f\273\373I\240t?\030\\C\016\351n\245\277a\224\2521D\365\206?\006\271V>u\363\233?\001{\301\261\253\354\202?fQ\245T,\370\227?\263B\371\321\\\346\231?\016\373\373\224|O\225\277\017\370}\261WU\255\277t\257\361k\264\264\253??s\272R\355\330r\277r\3036|\347\244\303\277E\340E\3502\370\240\277\262\245\322E\306G\247?,\030\331\361\006h\204?\321;\013\376[\"\244?\353\307\276\025\235\355p\277\"\276lk\246\243\223\277\247\236\002\351-\341r?NZ\305\326\304\346\225?\341\210S\205\275\213\202?=\324\305\214A>x\277\333h!}j\'\244?f\037\357K\271\237\226\277@VZ\300\260n\237?\220\'&\3108\341\224\277\232(L\\\352\307V?.\351\305\334\367\240\206?:\252\261\274_\220\236?5\354\246};\325v?\344\257\177\215\332\263\215\277\367\210pJ{\256\203\277]\260\276\373\217\276\200?-]\233o?>\300\277\360\212\231\252\237\252\265?#\367\014\222R\221q\277Y`\222A#\025\232?\243q\217B\345!\265\277P\265\"\331?)\242\277\346\004\216\200\341\307\220?\305\325J\346-^\251?\365\251\315yr\277\234?b\203\350\275\357\347\205?\020\232\312\223\205^\234?\256_\227~\025\"\246?\271\200\363\211\014\020\251\277\000\344\240^\322\023T\277&\2005\343Ang?1\242}D\375B`?\377k\023\0031\304r\277\313\021t\2549\335\250?\372\351\257\277;\345\020\277\r}z\343\331\"\261?\267\231\242\r\324\352z?\030n\nu\242n\221?\0054\324\322#\340\244\277J\204\321\242\372\253\210\277\001\251\202\216\254\265\201\277+\245\331\317qT\221?\270\256\235\312\227\207\214?B/\324H\350\272\236?c\206\337\260\341\247\241?\017\251\324\262\326\314\237\2773V\320\361\'\343\244?\014 |(\321\222\240?\005<\316\014\231-\264\277\002\250\223\200Y \252?\374\370\251\374\373$\220\277-\325:\256\234v\265\277\2232\266\313\017@\240?z\030\302\200\021\363\261?MS\200\377\030\000\223\277\367J\356\3524V\203?\230\232IC\251\227\215\277\243OKv\343\022\230?\031\303\324J\254\202\234?\242C\010\021n\007\251?A\277\233\340.\n\246?U\217\'\216\253\255\260\277\377?t_\323%\225?\0100qS\037\"\246?\322\331_\374\210m\260\277\203\027\025\"\364\364\250\277\003\335\272B\357\362\236?\021\274\376}\366\276\201?~{<\314\025\340\252?\361\037\216Rb\007\210?\254\311\343J5\343\010\277s\212r\217\303e\242\277\324R\302\021y\322\252?~\353\322\245\320\220\262\277 \376\200XM\217\264?\267\307B\334\353\220\236?U\036G\355*\026r\277\201\275\236\274\2030\207?`\274\005c[>v\277+^\t\375|\366\222?\352!\202\300\266\275\212?\332\034Ja\234\307\206?\361\263i#\331N\226?\251\2752\266\252\001\213?1%\033\332\303\010\214\277\267\252\'\036\020\033\251?\002\230\322\375\023\221\224?\230t;\313\221m\203?\207\233[:Ig>\277\263{d\0069\016\231?\245|\357\014\246\243\222?K\301>-K\343\254?\257\365\264\337\264\302w?Xlu4lf\252\277\375\206!#\264\246\263?\244\242\n\257\277\315\264\277\307\277\004\253@f\263\277\r\037\227\214\361\316\224?\020X\355%\203_\221?v\277\000~j\025\205\277\2455\032\201\367\334\205?\246i\321\264$=U\277\235\212\326\275\225-\031?\257\333\230\205\023$\260\277 \007\215\257)O\277\277~\252V\233\tJ\260?\361\256M?\265\265v\277v\023\373R\337\374\201\277\3219\351\304\270\367\233?t\304C\340\224.\177?\310\222%\262\2202b\277\203\367\275\234\305\312\246\277\036g\0310\350\207\260\277z\034\236\017\343\366\212\277\221\337\010v\357\355\205\277V|9o@\244\223?\350\3365{\257@u?\341\266\247\305\217\032\213?\243\327\004\360\315qI?\242\207I\324\345v\250?\317\374\3179\366\356\202?/\2333\264\227\363\246?\335\351\\\276\346\266\270\277\266\377\330Vy#\213\277\021\2134\313GMI\277\206\345\3727b?\201?\307s/\220\235@\203?VH\376\002o\270\246?D\'\261\217A\263\267?\243\240\360\346d:\204?\305\357\006\316\242B\234?\251o6\251\252\310\225?\030\026Pf\213\275\226?\347q\326\257\215\333\204?\200\2270\322?L\232?"
      }
    }
  }
}
node {
  name: "normalize_element/component_47"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "N\237\340\014ET\244?z;\265?\277\213\272\277\253!g\0352>\252?\214`bzb\240\230\277\222l\265T\314\253t?\213T\340\260\251\375\241?\315\257<\001z\005}?\2460J+\031[\235?\370$p\036`C\264\277\230hj\273\004\005\236?\340IH\372m\265\202?\310AU\301\262\026\212\277\260O\274\247\313\222\225?\036\352~\033P\331\230\277F\357\177@\232\303{\277p\273\276y\353\250\236\277N?\'\013\377\354\242?\303Z^\264%}\202\277\177K\3326\207\311\236\277=@Z\020\210\337\245?e\037\006\350.\361\253\277\214\0031\316\264\004\230?\361\325=\233\035\365l?c\275\235\271\221\366\247?\313\335\320\\\363\037\241?\352\336ln\252\300\215?\330\236)\331\211I\230?F\256\371\303_+R?xz\226\001\026\342\215\2776\335s\337\270,\240?v\2231\241\366\031/?:\316\351\211\031\247\216?Z\\\026%~KD?\341\320\303\0371\271z\277\243\276\t\336\300\177\217?\355\371\360\345k\272\223\277s\265\333OB\300\226?4\3071\023\276W\246?\202\242V\361v\037\210?\201F\261(a\260\233?GO\301|\332*~\277];?/V\200\251?\007\270UMfux\2775\001\207\2343\254\247\2775f\211\003%[\252?:\267>\351\232\202\232?Y\210\030\363\226R\177?I\367\025\231\360\263\222?\375Ry\032\264\200\226?\236N\005\036\020\317\233\277;\225\375\324\'\242\252\277\275\305\356\373j \231?V\000\211\257A\"w\277^\024r\342\001^\301\277\215;\255\364=\227\242\277\350?\260R]\232\244?xNH\245\267\303\177?\004\257\204Xw\330\234?\314\035!\366Nt\205\277\032S1G\357Q\224\277O^\272\0027v\\\277d\237\002\213\274\337\224?\375\313\026\222\221\210P?\32725\343\026\356\236\277\213\270k\317M\027\243?+\266GD83\236\277\363N\003\333\310B\232?\352\353@pqa\232\277\256\350A\007~\320j?}\014\0319RP~?\020\376R\372\232\311\231?9A\025\343n\243@\277WV\242\005\313\205\220\277\224\030\307\362\365Ot\277\326u\037\265\306\3663\277\377\373\230~\245\315\275\277\310\320\327J\355\347\255?\305\345\340\350\026\371V\277\t\300wO\251\010\227?\004\205(\374\245\207\264\27742?l&5\244\277\010\240\324;5\307\214?\262\335&\244\201\224\241?}\213\247N\242\206\226?b\303\204\345\220S\202?G\277{\034\r\255l?\016\343E\221{\333\242?H\013y\377}\030\260\277AA\\K^#u\277\340\376)C\2770e?%\300\251B\025\224h?\206_\003\205\356Pl\277\300\026h5,_\246?\320\253\331\201uG_\277\253\326x\237\231\026\255?\265\337\257\t6\234<?\305de\214\363]\204?\301\251w\007d\356\246\277aC\nz|6\217\277\355\331R\213\261\341\207\277\306\243\0104\316b\202?.\016\006U\245X~?a\264\352\032\375\315{?\315\3178\3155\336\235?\035\207\277\373\352w\245\277\\\302\372o\300\017\241?\200\3136LArs\277\267\000\237\345\232\376\263\277\000\310\241/\321\341\246?I\005>\324\360\014>?o\361\237W\004K\262\277\365\221\022\275\267\342\227?\347\372\241F\337\254\257?\003Q\215\035\250\341\230\277\265\032c>Xzx?\335\236\321j\tx\224\277\007s5^,\237\224?\356d\264\261\271:\231?\340\313^eV\267\245?R\374\311,\003M\236?_\201\362\273\014&\261\277HO\262Q\255\360\222?Q\266\270.K\'\243?\266G\201\233K\305\255\277W>\252\345\367K\260\277\266c\006\004\034=\214?P\r\330.\235qz?\370\2709\014\033\242\251?\241k,O\212\320T\277\241 \343\027\177W\221\277\372\366\016\264\2134\240\277\333\275\310C`^\250?\365C]\205CX\262\277h\301!\332\342\250\262?\272\231\234\235\266\215\237?\212|i\032\254\351\212\277\223\264\260\341\310\207\201?\264\034\350\241\266\r\207\277\337+\234\237@\252y\277\n\251p>T\236\205?\027\310j\365\000\326\201?{\307h\236\325b\221? \256~g\331e\204?\274\244\355<JU\205\277\032\nQ\036\023\262\242?z\000\334C\372\241\221?j\336\004\356_\252\200?J\237\254\321\330\202a?\023\272P\233f\361\226?\304~\034\273\256\331\216?\300\327\245\200\223\361\250?\332\207\243HJ\274|\277\336u;\235Y\202\246\277\020\304[\342&u\261?;\227&\310\257\357\273\277\3101\340\314\262\036\270\277~\361\230\303\346\312\223?\006\200\004\2479\327\212?\034\242\334F\233\224\202\277\357@\036s\376#\\\277\220#\r\326N\200p?\234\337[Q}\371r\277kS\344,\306\242\260\2774\241\225\360\216P\275\277\272\334\220\341\331g\256?\3219\337RE&}\277\221\032\330\377@\206\200\277\234\235\315)O\300\231?\376sT\0222\300`?\245\275\240\t=0j\277\t\320u5\007u\251\277#r\030\321\030[\265\277\215\275\n5\262G\216\277Sw[\245\230\334\220\277\350=\264\340\\\373\216?\301\035\0207\223\256r?\036Bq\324\305\376f?H\220\267M\322\253j\277\017c\327\230\005J\224?\2411VE\377\236d?\265\221F`\007)\237?M\265\220,\322W\270\277\364bwm\256\033\214\277\034\031\026i\003,\215\277\305\240\3602\363\177o?\001\377\316\325\332$|?Nu\245\276\\&\223?\211Z\322\005\200\240\262?\2343\230B\304&r\277+\362\3151~\354\230?\342\312l\237ts\214?\001}K\316\303\350\221?;:\227\252\000T\221?\373\225\214k\225\303K?"
      }
    }
  }
}
node {
  name: "normalize_element/component_48"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "\371\231\214\300\336\030\242?2\311QK6H\276\277)l{\305\227\254\252?\034D\267\323\340\372\227\277\'\222\327\247}*\027\277\024\321\223XpD\240?\t\372\001\313\356\"\200?\031\323S\261\037\314\225?\032l6\313o\025\262\277\330F\203\256Y;\240?\237\177\2725t\251}?\233\3349\336.E\217\2773\n\216:V\003V\277r\234l\347!q\204\277\006\201\232\374D\325W\277NG\271a\377h\236\277I\263\0178fg\241?\3330\264\201\016\317\217\277\3432Z\206\271V\243\277\341\003\231o\r\004\247?\033\007\250\272\221\303\252\277kD&\234\272K\220?6!a\243\242m\201\277\'$/\361\233P\244?\263\354#\231\320\202\234?\030\275/;\177k\221\277\340\355\220N\234]\224?2\322\312>A\302m?\255F\256O\304\030\204\277\n\036\353Q\324s\226?_R3\246\213\r`\277ZR\360?\362\001\217?\314\2129\354\344*\033?\027\305\250\364\336\333\230\277\206t\236\317\2053\215?4\233A(a9\227\277a\017K\325\006\277\220?\314\205\246\371\036\206\236?\210\035\363%GF\230\277\352\t\234\203\237\354\227?\356\305k\354\177qr\277\275\266r\2071\017\250?\317\377\243\035\324\321\217\277\351/\335\354[\"\251\277\221)\214\036\331\013\254?D\230\313\333K\371\230?xVQ\nZK\200?!4\260\305\326\202\212?\233g\006\240:\036\225?\267\212L`=e\240\277r\262w\300!\306\246\277Z\227\"\022\350\300\220\277\240y\357^\244\006y\277\374rf\273B\037\273\277\270U\'\237\322L\243\277\350t\235ii>\242?\3559\256\033\366Hq?\211\276]$$:\220?\373F\324A\347\000\214\277\035\tMuu\205\224\277?\213\003\272\277\022y\277\212\214 +~\247\223?\343\347\032\301!\257z\277\377\247\013F_ \254\277\351\030F0\304\240\241?\000\006\226\344\377\334\241\277\321\006\375\330f[\222?;\345\367TS4\234\277\320\243c\200\244\205\200?\253\230p\006\204xr?}\372\201\013\257\255\224?\027\013\307\034\231\201y\277\334q\0268\321\225\221\277\365\032\270\214f(h?\344-\3400\224\275|\277\242\330?\214f\236\271\277X\372\ri\r\213\263?\007\376\035ug2s?\361\241\305\3133,\225?\330H=\004\210\224\263\277\257\265\224\177o\313\244\277vu\260\306%\003\212?s|\354\342\301\014\221?$\037\216\212\014f\220?\247M\2701\037\013\177?\265*)zWr\224\277\316f\226\203\'\224\240?\315\033\362\222\251I\263\277q\217\236Ux-\177\277\260SeE\370\nG?\207ui\027a\367n?\345\263~+\300\024Q\277k\377\337\345\335\351\243?>\310,\'\023Jn\277\252\307\270\rc\005\247?~\304!\256\253\350x\277\242\352i\035\333\206o?_N\236\354E8\247\277\363\241\372\275\003\362\223\277\244\330\256)\300\022\210\277\032\034_ZX`]?6\322f]\"ek?5\257\333\201\351\235R?\302\037\355\233\325\344\230?xZ\036n\376\224\251\277\300\253n\300\252$\233?\236\355\0238\300i}?yl\311\177\210Z\263\277\360\331r\3426\020\244?\327\310\241\212\212T\224?\331\375\007\261c\276\253\277\327\000\271\205-\304\216?\246G\237\313\336\226\252?)\304m~\r\322\235\277o5\016\234\003in?\260\302\310\363b&\230\277\177\334\033\317\251\\\221?\325&\244\3560\021\224?\322\251\344\311Y\313\242?e\205\023\262\242\357\220?itS?y\034\261\277\360\345\"\344\332U\224?\177\375\032\215\237m\240?\240T\223\221\307\224\253\277v\344\013\004H\007\253\277\'\017n\337a\342h\277\353\rJ\332\205\315u?\240\304O2%\321\247?\036\276\354\241\364\272\206\277L\034\360.TT\241\277\352\256@\202Od\231\277^#r\217\337\272\245?\270\212\322\231\014+\261\277\332\220\361\273\370\301\257?\334g~\375\\\251\240?\201qR\223>\177\234\277,\t\021\357\207?}?\344]\036\000\253\002\215\277\320\257s\364t\205\223\277\215f\266B\2207t?$\243c\004\335)x?>\364\373\003\207E\210?\002\030\234\257\374s\201?Z\277\003}\316O|\277+\205\025\256\024\360\227?\207\216\001\377\262\200\203?\371A\322\261\307g\201?\201\355\206\213\341\214w?Vn~\320n\205d\277\346Z=\362\312\237\212?\226\210\"j\303\335\245?\361\312\031}\021\334\224\2771D-Q\346\264\237\277\306\353\345jp\312\256?\216\364-iH\271\270\277\337AV1A\177\275\277-\377\r\031\020\323\222?\354\352(\343\354\221\206?\207\014\237\005\205g\200\277\356j\250\007\273\027\212\277\217\234\311Z\352\360\211?X\357\325f\032Ow\277\"\301\037A\233c\260\277\252\177\013\020\327z\267\277\370\375\267lVx\253?NM.8\026#\201\277\215\035;E\232\272{\2779\366\271\310\247A\227?\022\231)\025\243\232A\277\346K\347D4\032\202\277F]J\341j2\255\277\341\017\375\342k\262\267\277gz\01017\342\214\277\351\332\344\336fk\225\277\270\336\314n\201\222\213?\256\262\351\032\303\"r?9\317\311l?\002\213\27700\375\333\375\333q\277x\233 \262\224\241T\277f\036=\241~\347\\\277\244\352\267\254KX\220?.\213B\370;\007\267\277\242\256\234Z\t\037\220\277\212r\275\373PZ\233\277\261\341t\210;\273E?U\n\204\024qw\200?\262(Y?\027\274\201\277*\367\021\336o\313\251?\207\3574\001\325+\210\277P]8\221\022\033\227?_\213_v$\236\201\277\276?\224\036<\311\214?\313\244\024\341\027x\231?E\345p\367\203\313\230\277"
      }
    }
  }
}
node {
  name: "normalize_element/component_49"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "\350\003\355\001\377\003\240?\372\232}\317\\\350\300\277\"\376R bl\252?\251\002\341O\3744\230\277;\265+\333$\222j\277\242\363$-\270\306\233?7\201\354l\3751\203?\311,\272v\0334\225?X\361\260\3121\313\256\277\355\211_\305jr\240?\212\220\035\3108N{?\027.\030MH\032\215\277\357\034\2104C\r\237\277e&~\260\177\343Z\277kAM\377\"\000i?\246+\233\343#\374\235\2770\300\"\345E+\237?j\250\310V\324\266\226\277\270P\340:R\277\243\277\245Q\273>\367\016\250?v\0048\t\032=\251\277\006\370;\002\">|?\304n\0058\260a\223\277\237U}\346`\301\241?\343\007\000\361g6\227?\311,a\276\323\234\241\277\231\365g\341\340B\216?\037bX\0057@{?\212\214bGP\355m?n\334\312a\3439\214?\356O\276\255\257\006l\277o\253`!a\202\222?\3455j\026L\")?\340\313\252\363\233\316\242\277\274A!\363\342s\214?\262U\373\324\256\222\226\277\371 s\201\245\234\206?\220P\3252\211\342\224?\261|`>\216#l\277\326\375\022\332:\204\224?\313\223n\302\362$_\277g\317\230[\267\307\246? \315\327\263\207\300\224\277\220\n\371&\241\202\251\277\242\324=6\362\016\243?\247l:\375\376\237\227?B\002\014\354\255X\202?\346>\251^\315\355}?wfR\250Ff\224?F\256\357Q\354Y\241\277\206hmM\314\020\242\277\212\241o\347\317r\251\277\n1\305\214X\332}\277\342\362q\320\322S\261\277\337\326sX5\226\243\277\261\351dP=7\240?QX\n\3122\231a?\177\344\357A|\036k?,E_2o\204\216\277\302I\266\224\325o\224\277<.\022)\271\002\203\277b\250\007(\264|\222?\303\276jS\337s\210\277\303q\324b\324\333\261\2779}h\337\017Q\234?\372\013\361\323\256\305\243\277p\357\202\327\032\211\201?\'*\266\252n\363\233\277\255\242N_ \037\210?k=\2277\364\007d?\261\032\302f\275n\220?\365l\225\341\361M\204\277\314\327\014@\010\240\221\277\335\372<\210\225\270\207?\034\026\354\204l`\204\277\\\014\263\nzs\265\277\316JATmy\246?\332\31037\370%\203?|5\257\006\002F\224?\014\020\334\263t&\262\2771\223\345z\224w\244\277A\210\345H\307\322\210?\006\rQ\023\352\332X\277N`\254\002\304C\205?\367\270 oz\226~?\013FlJ\216H\244\277\224\302\274\307\231&\236?~\274Ze\333&\265\277\234\200Y\263+\263\204\277\003\200\213\227l\021H\277\277\210\244\200.\306r?\351\305\017\351EZ[?\031\264\305r\241\253\241?O\324\3602e\325w\277H>0\371\377n\240?\275T\331h\032\303\211\277\233\317\3271PGW\277\303\025\035\267\002\204\246\277\270\017PL\244U\231\277c$\t/\262~\206\277\357\037\243\355\254\236r\277\340\363\332\244V#a?!\235\037\036@\301`?\341[\370\304\261c\224?*DK\024\335W\251\277\251gNR\361c\226?yb\037bX\005\227?\277\210AVs]\262\277\222r\302Gn\224\241?\334\027\310\232.\027\242?3\353*|4\327\241\277\340\2665p\247w\204?W\010nNl\330\244?\362\0031\262_\325\240\277T\240j\202\025\230o?\251u\246\306\007\032\232\277\344\036\035\347\316\375\211?\'\267\254\026f\016\216?\310\374\346B\010o\235?;)\371\374#\030v?vS\251]<\321\260\277\004O$\017y\010\227?N\326\032\335P\027\234?\207\371\355I2;\252\277\373\316{\330\025w\235\277\0269\007y\204m\214\277\311+z!\311\036t?tD\303\004c\264\245?\"uu\246T\262\215\277m\0238#\224\010\250\277\257\250[R\302\007\221\277\037\025/\261Z\342\242?Y&\240\342h)\257\277\271\210\001\250h\000\251?=\312\261\212q\335\240?\027\243\toj\373\243\277(\236\241\"\310\355y?\216\r\264m\336Y\217\277\236\242\377\362\204\266\234\277.\362\016\227\354=T\277#\035\244\373\307\257`?O\242\266\361M\361}?\022\217.\260sE\200?5\317\036#1%X\277\375#\035/\356P\216? \220\3417\331\224X?\2370r`\203\317\204?c\020b\253\'\232w?U\0214\207 \336\250\277\370\255;\265\261\024\210?+\273L\214\346z\243?\205\222\217\376\0233\235\277pm{\227_\301\220\277\336.\221\221\007\260\253?\220\366\225\300\023\236\260\277g\001\323\234\316\253\301\277\307\352\301jMo\222?\273\264\375\005d\252\206?n\241Ee\254\376|\277\307\025\303GW\370\223\277\227\\q\343\251V\225?Fx4;vC\177\277\016\243vx5d\257\277\027\020>\272/l\257\277\336\316\310d\224\016\250?5\376&\017i&\204\277\215\307\017\014Unh\277\t\356B\236\035\243\224?M\224\0135\r\001U?\321{\271\010\271v\211\277>\021)\245\036\244\260\277Q\\\213\237\221\313\266\277\362\034\231`\233\001\210\277&/\213\271\006\336\230\277rI\376\365D\266\213?\\\034\0028\327\337s?\rG\004\241\304\000\240\277f\360\227\031\255\330t\277\277\373,\224!\316\210\277\002 \320\224\373\357A\277#\033\316Pj\234v?\310\300%\363\324\222\264\277\210\362\034\311\231\261\216\277\037\203\352&\376\026\241\277\377\205K\262\001\035U\277qa\2162\243\236\204?\213\023\026\027re\231\277\2657\036\212\0076\236?\270\371\007\020\214#\225\277&\330\316\343o\374\224?\370Cn\261\233L\242\277\217R\336\316\213\001\210?\3319\005\255K\203\236?\213)|\251\344\013\245\277"
      }
    }
  }
}
node {
  name: "normalize_element/component_50"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "zI}\010\223\252\231?\276\261[\\\307^\302\277\371\321}\364\336\374\247?\266\214\260\265\262\325\233\277\216\320g\361vEo\277\026\r\332*\017r\223?n\330e\341\263\301\206?[3\035-\023\355\240?o=\3619\003e\250\277\346\022\273t\233\211\236?\272\214\375\215\277\262\177?\022\241S\210.E}\277\215G*\005=\321\243\277|h\361\362\014\313s\277\377\212\3242T\360d?{Y\311}a\350\237\277\255R3\321\013j\232?\331\200\027\234\022\'\235\277\365Z\\%P\253\233\277\303\324\037,&\340\250?+\223zL-\246\261\277#?C\201<\220\200?\353\235\305\343\206\005\231\277\317U\300+\354\343\240?\265\222\002}\265\262\221?\033\023\365\221z\240\230\277\372\273(\216\304J{?\032j\276\221\023\002\202?\014j4\303\212v\230\277f\264-\201\226\331\204?y\250\342\320\237Yq\277]\264S\265\325\223\230?\357Q\233\022\362<F?\310\017<\216\204U\244\277\023q\177\235\267\213\216?\266D\262p\'K\226\277sm\347|*\007x?\003~4l\371 \224?I\326I\314\237\256\213\277\256/c!r\256\222?\367\364\016@5!W\277fT\251q 8\246?xL\252\244\270$\221\277\0054\317\031jw\250\277p\247\276=\031-\237?]L\262\\\326\307\226?\224\370om\307%\201?\250\236K\277\344Iy?\376\361=\247I\276\222?\261Y\276\306\337\n\240\277^\301\207)\311\356\231\277\010\375\306\203\237\313\252\277\375\256\276p\2355\206\277\375\223\336\210\005\366\250\277\034\267\310\3301\367\243\277\"\201q6>\017\235?\370!\210V\233\275[?\330\327\020\325\301\345\200\277\252\245\266]3\274\217\277\201\023]Y\232B\224\277yP\341\354\374\371\207\277\337i\007c\021\261\221?]!<rU\355\213\277\214\306\327\'Kp\260\277\221y\320+\037\373\205?\232J\033\033u\005\245\277y\225\020\007d\nQ\277\314`\255V\375|\233\277\017\244\033\371m\234\205?#\205\371\305\201dU?\201\363\005\324k\030\215?A\214\252;#\005\203\277\014$-7F\"\220\277\264\306\342/\024M\223?\371\263\217}\337\253}\277\335\205{\237\211\264\262\277j\300\312\350\032B\246?\311\327\274\257l\024\201?9\2616\257\262\002\224?%Y}18#\260\277Uz\371\337B\005\244\277\3559*\343Q\275\210?d&\363\275\3664\222\277\371X\006D\244\200v?\026\267\331q&\032\202?\335\300)\033\362\251\246\277\333\376\251y\rH\234?\373\007\226\305\362\236\264\277\350\022b\274S\362\213\277\310!$\003\'xF?\377B\'5\310\345v?5\332\235\372\257\217p?\031\020\357s[\246\237?\222\022\302p\234~r\277K\362\027\013\'\217\223?F\r\253\032\262\361\222\277f\337\010\227\375\326x\277Jq\300t{\305\245\277\222\026M\270n\202\237\277\264\255\357\216Or\206\277\222\366\3652@X\204\277\323\017\326>\236\017o?\340X1\013\326\000q\277\007^\014i}_\220?\310\215Ax\313\r\242\277\233\270\272;\351\177\226?\366.\035\364\036\307\234?\272\211MpY!\261\277\0079\314\360\317\247\236?,\326\301\330z:\244?w\231\340\"\227\002\221\277\373\312y\202\241g\207?e\376\265\3429`\235?h\245\362q\313\031\242\277\373\202\203\256^\364~?\2453\337\252\263\246\232\277\322\322Y\211 \236z?$\026\003\264E\203\204?\005\032K\334S\007\221?\254]\243}]\232c\277JoR\255\222\203\260\277\327\262YNr\"\230?\370\254\204Q\275\363\227?.\236\31032?\251\277\342\341\267\315\306\335\227\277X\342\260\035T.\211\277A\336\013\311R\266s?X\360\233\365;\252\243?\023\313\247s\267~\201\277\006\327\213\212\000\363\253\277\'A\364\256\276\335\201\277<\257\365hQo\237?\202$\376\276\005-\254\277)\030w~\257\363\241?\247&\025\033`\327\236?\311\253d\341\232$\234\2774\034{h\262\216y?\017\004\216%(U\221\277ld\010\024r$\247\277)g\210`\245Mp\277\207\331\221\013J\250k\277\034\212\373\302=,r?I\024\205VZX}?\345\376\352q\337j\215?@\224e\021U\273\220?\272O\235-q\373=?yQ\201\264{\311\211?\322\266\205\332{`c\277<Ue\257\334\252\255\277q\272\317k\230\023\207?\357\324T\375\347\274\241?\363\255\031]\001,\232\277\226\300\234\217!\266r\277\035h\301h\257n\252?\031\307\030\275\362\327\246\277\000\034\350\222\213\240\304\277\205Y^u\3019\223?G\tv\323\230\326\207?O\275\r\350\207<r\277Es\317\200\233A\223\277\243\305Qm\373\024\231?:\352\316d\026\331\216\277A\302\213\031<\247\255\277l\327\2574#\025\266\277\260\350\345\226\247\212\244?,\270\367\'\363\272~\277\220\346\353\331C`t?\266\275\342K\326\030\222?\347\245/r\271;\177\277\247\343nf\255\316E\277\373\262|\251\024E\262\277\177\270\331\217|t\256\277:}\nn\016Q\201\277\325\263\234[S\346\241\277\2222\303\365\021\300\215?C\305\211\306\022\212x?`kGU9\013\243\277o\004:w\341%\201\277\254cv\305uT\211\277E\200\243\202b\342\201?\013\266b\226u\263j?\263\034\346\240\213\323\260\277\262wS\205\227\304_\277^\366\244y\353\357\235\277\213\225\371\220\265[b\277\0336/&\264\347}?\036\243\007\001\243\022\221\277^>;\333\001\251\215?;\337\032\233\307\250\205\277\233\323\317\025Q\205\220?\312\3668\013/L\252\277j_>.\261\377\204?R$\350\372\001\271\233?4\362\007pk\354\244\277"
      }
    }
  }
}
node {
  name: "normalize_element/component_51"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "x:\016\276[\031\223??\350Z-\020z\303\277\331\315\2217\356\004\244?R\236l\017\352>\240\277\323I:\363@\236\\\277\325\325\345\340\016\336\203?\211\357\202\220E\375\212?\35547~_^\253?f\344\221\027P\252\241\277Hq\271\272\226\242\232?\014\303Y\247P1\204?\241\317J\321\377\257p?\303v\324\361\310\272\241\277hEU\305\264l\220\277S\317\\\211;<V\277}\r\034+\214\210\241\277$\302p\302Em\225?\305\342\353\366O\363\240\277S\3610\001\200\342~\277\316LL\361\232R\251?D,Xf\356\372\265\277>\023\355l\300\316\216?\3406\343\314`\240\232\2770\020\336\000.&\241?\330\r\340\317\036\237\210?\177\210\r\026N\322t?\224\376Q\340\014\032d\277|\320\360\274\r\227\204?Z\310c\3238>D\277*p\376\233!\231\205?\270\014&h\r\212p\277\r\365\024i}\362\237?\264\243\376\233\223\356Y?g\252\004\344{\341\241\277\353\335s\356\343Y\221?\261\217\377\026%g\225\277\203o\324\351\304\016X?\356\327\346\304\363Y\231?&\335\262\0355!\221\277!\327A\266\020\n\222?b\315\013\364\254K]\2775L\363\342R\002\246?\004\276\204\005Uu\177\277\210\275\362Nu0\246\277\365\372\351\370\225\362\231?\034\305\305\223\325[\226?\321\274|\350\013\354\200?\251\275\377\304\005\366Q\277\313\313\246\313~\267\220?\023[\261\'\320\023\232\277\317\352.\232\337z\220\277OD\207\014 \206\241\277U\246]!\263\200\217\277\327\003\331\367P\276\251\2777\273\336\313\267\035\244\277\232\241e\233#D\232?J\323\252\332\221\221c?\030$\020\276\026E\222\277\364\244mxQ&\217\277\200t\223\023K\234\223\277\031e!-\332\213\214\277zV\341\265\234b\221?\254\266\332D\337=\211\277L\033\234\365\032\234\246\277\343\200\024w\347I\200\277\273P\257J\330m\245\277\263\213\210\2639\006\204\277\217\361\344w\363\204\232\277@I\366\022\247\266{?bK\001\374b\325Q?\261\356\001\265v\255\215?&Xr\316\265Sv\277\202\326\221]H\013\214\277\026\002\370(\325\236\231?0\037\234\2219}J\2770\233=&\013\305\260\277\327\2660$\212=\244?6\237zq\320\310q?O\250\216\362\037\024\224?\242\2548\005\224\256\253\277\007\031\347\300\211 \243\277=\233\343I\303\n\212?cO\022}\004\037\237\277G\310\020eGaY?b\251+(\327\327\210?\275O\215K\340\314\242\277bN\257\030\236,\233?\324\346\341\377\354\031\262\277\023\371\034\302r0\221\277-4\252\350\034\367n?r\214s\272}m}?\016\360\220\241\344\207z?}\311\371t\322\201\234?\333\304\037\376\307-I\277\350\354\3366\305v~?\364D\252\004\230\355\227\277,\017\036\342)(\204\277j\245\311\362\231\337\244\277\325?\203\253\016I\242\277\366\013\210\246r.\207\277\336]\352\304>1\215\277\217=\'/\305d\200?*R;\245~<\212\277\330-~*\331w\212?\033\237\323p\355\353\210\277&\325\353\324d\337\230?\324\016\3470Kz\235?I\201\264\350e`\257\277e\\\314*\307\277\232?y+\326f\037\010\242?\237\347\376\323\325i)\277}\024W\220\304\235\221?\222\273\271\014\300\205\221?f\302ZuP\233\242\277\246,W\000\322\205\214?\356{ \356\364\307\231\277\377\003\235*\216\354\"\277\343\244\211\247\271=z?\266=\2066\034po?\263\310\244\366\212\275{\277f\370\277\213\r\311\257\277g\021\352\037\315#\230?dJ\230\'\337\205\224?Y\373;\333\2437\250\277\004\367\352\200w4\232\277\332\002\373\025V\035^\277xDs\007+\372u?\374\031\275\236\330\330\241?\026\273ir\262\206k?\204$r\025\031\212\253\277\273\265c\"YKW\277\005\313\355k\030\226\231?R]\266Y\231I\251\2770\3754\266#\021\226?}\325K\005u\307\231?n\250\231g\205\037\211\277\362\316K\014\234Hu?\004\202\032m>v\223\277\344cQ\272\357\366\260\277\220\374\177\244\241\251s\277\264\334\234\301\024\"\202\277MH;\323#\304g?\317\224\3666\230\256y? #\342\336\343\351\226?p\2545\333\257\027\231?\351<\360RfZm?\002\020.\037t\311\217?\350Y\343Ht\212\216\277\032]\224\217\223x\252\2773\224\\\303\341\014\207?\022\030g\343\363P\240?X\223\002f\031=\216\277w\232\372\260F\214r?\014\201Y*:U\252?Y`\372$\230\346\241\277\023\r\013\033\211C\307\277Ey\310\217V\207\224?\371\363\022\010\340\013\222?\"\3419c\261\260d\277\321S\245\254-\334\210\277\326\314\2775.\036\231?\245\252\326\260I\370\230\2779\316\027\302\004J\253\277\"=\313G\340|\244\277\2318\3233\246(\241?8\216\343}\330\257d\277\207\361\206s\216\263\215?2#\204\223\251\214\217?|\'\243 1\247\227\277\220\326\336\310\270\271\213?\211\376\025\241\364_\263\277\344\254Zb\375P\237\277D\226\360w4}r\277\304\260\303\230\364\367\240\277\037\336\0206~\331\220?\353\"\231\226\327\230\177?\202kr!$E\241\277\372\256\274or{\212\277k\311\'\207\366\201i\277\374\375\237\031}2\230?\326\246:\257t\350{?9\250Ie\224\253\250\277\360\223G\220z\352\211?\335\225\346!\026\333\221\277\027\371\t(SSb\277\347\214\220\320\202\217r?6E\217\376\350\262\200?\244\211+\362\341\025u?\274]Z\315m\324\200?\221\277\363\014\223\t\205?\254\233\324\225\244r\256\277\331\325\356\233\036\273\203?\244\237\272\003\206\366\223?\321\266\237.\200`\234\277"
      }
    }
  }
}
node {
  name: "normalize_element/component_52"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "\023\025\242*C\250\214?\223\240{\263&F\304\277\374y\302.dW\237?\210\346\033\200\366\353\241\277\033WB\310\220\233e?\\\202h\272\222uL?\230\331E\243\3133\220?\310\036\033-yO\263?\246\352\201\003\030\236\226\277\023[ID[B\226?\274\000\022\205J\347\211?\"\367#.\310\342\221?\340A\334j\020\305\240\277\232\216)\355Gi\236\277(\"\320T\340Hv\277\342h\357\325\214\341\242\277WP\317\275\262\313\220?\316=\r\340y\036\243\277|\357\375zv\332\215?\347Y\251\235\352[\251?\236\302r\315\342\232\256\277\304\232\365\"\r\200\224?\372\213\345\005\364\234\232\277KN\203(\263\317\241?-\215]w\372\016\200?6\317\365\243\377\352\244?E\237\\A=\367\206\277\333\nZ{\261\215\206?S\302\353\261/\004q?\366\004\226\027\361\201\213?\202\225\013\341\rsf\277\236\006\375f\021s\243?\365\372\254\225}\025h?qR\177Z\230\307\232\277\275%\255\266j\360\223?\353\004\035u\300\352\222\277\335\320\224\235~PW\277\257}\272\347\3448\240?\020[\003&3\210\222\277\264\342]&q\363\221?$J9g]\006`\277\373\227\365y\304\234\245?~\201\363\276\376\337i?\033\217Y\3033\013\243\277y\227#\025\332\372x?\223\303\260\216\246$\226?\355\026\315?\004\231\210?\014N\230\276D\255j\277C\240\334\2616\230\216?R$\3023_-\222\277g\035\346\257\266\200\201\277\343\374\345D\317\356\207\277\010\210\344\214\252$\223\277p\226%I\366Y\251?\014\307\351\247\334\235\243\277\302\305\304\305\325\361\227?\201[\351H=*o?\350q6\"\272\225\231\277\320\371\216\271\351\321\213\277\210\001}\350\243\010\222\277\232r\270h^\224\220\277o\330\232\323\203\207\221?\271\372\322Wg\347\202\277\304\271y\357\027\317\222\277\326\272\201\300\322\022\220\277\226S0\232\375\320\244\2777\270!\204O\214\221\277\226)F\223\024#\230\277\177\001\321T\316ej?\033\241bF\277P\\?a\252W\231BJ\220?\372S\364\321\363\270i\277\010\302\035\301\360\276\210\277\317\032f\257\021\235\236?\215\351\263J\203\267|?\327\371\274\2048F\256\277c\375da\217V\241?\351\240\314\270\t\364\"?Z\\\026%~K\224?\245\242\341/\216\023\247\277\375d\006\326\343Q\241\277\240Q\260\202\274w\214?Y\364\213h\364\320\243\277\001\236\301\232[\005W\277K\216\357\026>\336\222?\364\235\033w\243\277\246\277\022\251\243\302\\{\232?\3061\365g\3755\255\277\026\317\001\313\0171\223\277\321\213\364Q/\300z?\234\214P\212[\247\203?\256\265Z\324\345\234\201?\227\002?\2336\222\231?\'\375>\2253\021\207\277\026\023@\326\370\361\\\277\001\2321\232\317\230\233\277\014\0070\317\304 \212\277\260DL\373yb\243\277[W\004\263\315\203\243\277^\316\261+Ix\210\277\014m\r`\"\302\221\277\005W\004\365\351U\215?\255\033\003ssx\224\277\345\354\325{\265\231\206?!Q\330\255\264x\214?\307\214\030\277\356I\231?\253\203\257\364I\n\242?\314\005a\200\332.\254\2770\371q\304\362\230\227?\\\343\347J\3727\234?\221W1\246\252\032\216?\314%\336\314\253\344\230?M\321W\261t\025}?\273\363\316\345)R\242\277\337y&WX@\226?o\203r\214xs\227\277\300{\264)8ky\277\240JB,\337Vq?~H{` 8\205\277\310GXB\341-\200\2772\245\266S\301H\255\277\267$j\026&[\230?\202\322\321#\246A\222?\324u{%\235<\247\277(\2218\274\004\315\223\277\216\357\317hR\332\210?\007\350=\034\304\321|?\312i\323\001\336<\240?\237\377\370\364\323\335\221??\327\274\1773\376\244\277!\365*tV\362v?\266TC\272V}\225?\374\317UK\036u\246\277L5\377$H\351\201?X\363\261\365\353\322\223?\337\004\327\3034_\231\277\302\357~\223\250B\\?\306\200\214\203\302\325\224\277\022\220\217\023\257}\264\277WGQ\021\356hx\277\035\261\215\255\244k\213\277!t\245\245\277\205_?w@S[\\vw?\017\207\242\311\220&\242?}pg\364\335\214\241?\335gga\347Ww?\264\353d\304\223J\223?\272\027\242\207\375E\234\277\010*\222\230h\334\251\277\250\234\236\223\270p\207?\354\345Ga\266\033\235?\335\241\361\334,rP\277h]\202\327W\354\211?\305S\326\tD\\\252?\257\225\211\210\206\270\240\277\355\257\257YTb\311\277\373\335\246\005P\010\226?\240C\224\272Z\252\217?\216\350\025\204/\242v\277\336\214:=f\325d\277\201D\006\376_\221\227?+\260\036\374f\220\240\277\025\326`\366\277\027\250\277\307\336<\351\005\036\244\277\035~\016^\201\t\234?\372\264\212\376\320\314\213\277\357T\266\313[\316\227?0\362a\337\026x\213?j\004\253\202\002\003\227?;\210\034\251^\201\203?\302\257G\227\355\371\263\277\226x; \333\302\247\277\251\032\2537\344K*?\216\344\350\255^\236\242\277H\304\304\201\270\364\223?D\034A\343\357\002\204?\344AW{\010E\260\277_B\264?\030\304\220\277\326\274\371\371.&\213??\365^h\3557\245?i\350\377R\217\377\211?\344\tk\000\302\311\236\277\025\002Q\341\0346\210?\212y\213\304Z5e\277o\3659\312\003\211T\277Z\240\003\351g\214\204?\213u&D+\275\243?\355\264\025\230\000\340\344\276\210t\240\320\260\355\236?\216\027B6\337tr?/\030;e^\\\261\277e\303\036\003G<\204?\212K(Y[l\207?\234;\241\247f\256\202\277"
      }
    }
  }
}
node {
  name: "normalize_element/component_53"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "O^\340\311\331\001\214?\213\321\320\305\372\224\304\277\021oG\177\002\004\230?ps]\n\245\265\240\277\316\317[\334I\273\202?\245M\306\022\205\177I\277\344\245\2456\224\201\223?\266\311\222Mz^\267?\312V\321\376\213\220\207\277\353+\274\211)\252\223?\367\265rR??\215?\232M\016\014\021Q\235?\010\242Y\237\223Z\240\277\227\3543\3026=\244\277\372\272S\324u\265\200\277M\3401\227\257&\243\277\334\257\223\336]\205\215?\235\325\370\010\331\322\244\277\313T+\215D\332\237?\325\350\313\2161\320\250?MM\255\267\000F\221\277\303\366+N\311\372\230?\301\301<6\222\234\231\2772\305\010 6\n\242?-\256\207\265L\024v?Z:\276t\225\231\261?\006\340\205\376 \312\213\277v\362z\024\324\016\210?u\227E\332&\022\227?+=\252\314Z+\222?\022\227o\277tA:?\025\313\244\273(\320\245?+\262\233\356|\014t?\010\271\026#\316g\215\277\322}\311^\240\270\226?`\204Q\222s7\217\277.#qf&\336b\277\252k\217\014\251\n\243?\356@\000\035\244\257\221\277M\206\350\262\306\020\222?\344\372[(\267\362T?0\220\031\010\377\253\244?SP\010\037u4\211?\371+*\003\203{\236\277\273O#g@A\212\277\'\260\243\353n\020\226?\303\316h9=\340\221?\206\226!\000\313Yn\277\323\220|\033\036\237\215?\335\r\031\304D\331\204\2774\250Gdi\361s\277u\224\203\331\004\030\202?x\365\307\007\177\267\225\277\212o\036\nC=m?5\353}\304^\021\242\277\303\365\300x\032\361\225?\263G\003\323\304\226q?\201\310\200\276\275\003\235\277\021\024\223\305j\344\204\277\371t\017\345\030\204\216\277*<Q\332g\n\221\277:\032\224$`X\222?&q0}\252hv\277\237\033\341\207_\276p?\246\225\204<i~\220\277\252\215\245\240\277\366\242\277d/\377\024\323\364\225\2770\337\355\206\334(\224\277\350>\255`#bu?\014\000A\370\321\"k?\277c\352APT\223?\273\370\342X\005\324u\277[F\316\350e\031\210\277\316cqXJ1\243?Ij\367d+S\213?\306/\037\275\237\"\250\2770\234\316\302\\Z\234?i\350\360\'b\305d?%\243Q!!A\224?{_H\306\353s\243\277p#\024D\245]\235\277\273\307\331A\023\313\217?\354F,\035\004\001\245\277\350\336\247\320\227\343g\277\315NK\033*\240\230?;\267x\224$\261\250\277\241H\016\020\200C\232?%\220\347:Z\303\244\277\205>\375\014\024\035\216\277\000F\247\031\030\232\177?\036\277\037\315DP\206?\271G\355\200\026\013\212?\340\327M\313=\224\226?o\316In\233I>?\276\221\035t9\300|\277]\316\242\000\034>\235\2775y\341\0060\360\216\277\240\364\222\272\365~\241\277\371Ra4wi\242\277lw[^\303P\202\277Q$<\372\217\347\223\277` z\345\211\006\226?\372Y\321\213\177D\230\277\270\030\345\224\336\t\206?\343\rJG\"\374\241?\220@?0\240G\231?\232>\357QuK\246?\2656\343\355n\211\250\277\3369\260\366Y`\225?\177\3053\313\022[\225?\342\336\026\333\215\006\234?\224\026^\344\306v\236?MO 8\243\360=\277\255\304\365U\335\026\241\277\340q;H\020-\236?\211\271\270N\242\254\223\277\253\331w\003\324\355\177\277\375\005_\361\004]{?S\n6\205\000\246\223\277j\215F\340=wz\277\205pl@\373\306\250\277_\250u{F\253\231?[\nRm\2231\220?sY\233\262\022t\244\277ve\267\231\201\377\202\277%6\'H\317\241\230?\223c\253\376\032\246\204?\323\205tRA@\236?\203\253\241\254\226v\235?\271\037\256\244.|\231\277\027\351\277\263\257\317\207?\354)K\n\262\271\222?8\374fI\035p\242\277P@\236SL\202P\277f\361o\213\212\034\220?O\266j\237\332U\247\277\355i.\007\337\323C?\014x\352\250\242,\223\277\301\254\374\244m\213\266\277\357\322lo\316\300|\277^z\335\035w\034\217\277\377E\005\213\031\232X?\231jz\021\354Fw?VMfu\330h\246?\233\255z\310\255\254\245?\003\340\242\n\264x\177?|\007\344\267\215\253\226?3\244v\376n3\242\277B}\252\216Eh\250\277\337\364\037\263b\241\212?\'{\305\377\217\246\231?mL\\\202\344\201\206?\316\256\224\310\262\036\224?\274?\317\200)\354\251?%M\206Z\010\257\240\277s\220\022\3466T\312\277\002\274wg\374\341\226?\030\023|\202\255\332\211?\234\220;DZe\201\277\347J\225\014&\034\203?4\004\244V\310\367\225?\321\305\331\206\347+\240\277\253X9\n\311/\243\277{\370\273B\342\310\240\277*C\333\205t\345\226?\263x\303\023\0007)\277v\370f\371\214\324\233?\216\025A\013%m\210?\213\024\002m6L\222\277\013D\2230\301\\\023\277\204\252\267W\375\311\263\277yT\241&\237C\263\277X\302u\355T\276t?\202\265AXSz\242\277\"\364,;\326\"\230?\"\376.Z\352\232\211?p\333\311p\324\273\243\277<\347\021\035\256G\222\277!\177;\031\264A\236?b\203Cwb9\255?\032I\'\267\222\302\221?H\216<\\\347\351\214\277]l\241\376\217 x?\250*I\253\025\376\210?\377\235,6_\205A?S^V!\030\031\222?\240(\236\355\260\r\260?\227oR\330\022\340^\277\336\377\307\t\023F\251?p\021x]HR5\277\275\270H2\217\242\262\277\222L=\301\264^\206?M\']#\027\326t?\243\207\026\343@k\205?"
      }
    }
  }
}
node {
  name: "normalize_element/component_54"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "\257\231\254\354\343j\316?FTn\303\244\217\323?tV\241\007\222\305\316?$^x\007sy\322?\314L\323\341\315\254\322?4\310\200\223=\'\311?\222[\000\013z^\320?\327-\310\267\363\364\321?V\2610\370\277Y\320?+54\313\211\t\321?\2222\206\222\371\002\321?q$\3036Q\'\323?\0254\213\"4\032\323?\206.\355C\372G\323?\203m\020\"#d\323?m\243\307\020|\303\324?E\306\354*y|\317??DY\256m\340\322?\302#\231\361\220\213\325?\250\221\010 \3044\313?XQ(\260\245l\324?\335W\374\336Z1\317?:R\374f\002H\324?\225\023\001\017\213\337\322?\305T\2634\333\010\322?\267d\234Y\'[\321?}j\277,\"\207\311?\313IoR\255\222\311?[\352\324 \302;\313?\256\235S\211\345\250\321?\257GA\355@h\312?\3277\375\307\254\030\323?&\022\376\245B\005\324?\321;\3456\2716\324??u\327\322\326Z\313?\322*\356\320\224\303\314?3\300\005\331\262|\316?\266\231=\342\355\307\323?\014\002E\333\032\231\310?\275r\362_v\310\315?\354\375Z\037U[\323?\222`\276}\234w\316?\253\177\371,\033\222\321?s\326Q\034\332\234\322?\232\023\002YR\305\320?\271\273\367\005.\316\323?\224\022\333\r=\252\320?\214\243\206\367\233\367\320?\324\321\324_m\264\320?\347\204\301\026j\326\322?\335\364\t\316P\204\325?\374H\235\302B\224\323?\367\301\001F\372\341\321?\330l@\337q\245\331?\247^p3\000\347\321?C\247EOZ\220\324?p\357p\364^@\321?\332\365\373\2232\210\321?\352\313`\371\344\"\324?\221\303\033*\252\344\317?\031`\357c\244\025\306?s\232\027\275\331\232\322?\337\360\023\353z\000\323?\272\240\n\364\223\316\323?\366\266\202n{\267\324?&\345\375\236\251N\320?\321\212V\213\333\352\316?\016\334\327:\236\332\322?\246\037\325\374mY\316??\r\255\210y:\320?\373O\272\321 \325\321?\025\241\013\374>\242\314?y\002\243\303*;\304?\242*\321R\254\254\323?\200\3670\251\021\242\320?\377\344\236\227R\243\330?\026c\320q\204\370\324?\360o\000\230\223\331\322?72Z\n\362:\320?\204\315\323\225\334\\\324?\027Qs\357jD\323?e\367\027SF\"\317?N\273eu\025\014\321?z\036~,\264;\323?\216\030\330\213\352\262\321?t\365uv\270\361\316?58\356\355\306]\323?\331\317l\233\005a\323?\216\263\254\245\307I\321?\267\203\2274\324\225\321?\003\007\034Xz\254\307?!\256{\257J\267\323?\342:T\300.$\321?\344u\234YM\"\323?\226\275VV[\260\320?>VI\224X:\321?\214}>\324\372\276\317?p\235!J\3537\326?\307\000\266\247\327\222\324?b\023\333\325\222k\323?)@\310=Sk\323?\205\244L\363Y\241\301?\305\244\241Ah\357\321?\305\220\227\223\"B\317?s6\013\036 \344\323?\177\342[\263\360p\325?n]\004\2424\357\320?\002\247\273\016|<\324?jg\245\004U\247\320?\365\300\"\0328\333\322?5\311\t\277F\305\330?\200t\034\005\251\020\316?\021\305\344\r03\306?t\303\r\375\265\352\324?\034\2745\004U\320\320?\263K\325\357\"\t\312?^\301O\177j\232\323?k7i6i\034\320?r\350/\037\t\256\317?G\016Z\r^\273\322?,l\037U\301\006\324?\364\257E\010\030\350\321?7\255-\237Y\320\315?\306s\256\017\210c\331?\004\002\230\220\341A\323?0\037\355\3308\375\313?U\2704j\375.\316?\035\244\264\362#b\316?\n\327\231\376\311X\321?Ct\r\325\302\234\324?cC\346\263\004\345\321?q\013\373\025\351\340\321?fP\230\360~\216\325?\235y\256\37155\311?\204\016\321 \271 \324?zg\226\377\356\317\326?\006=\020c\026}\322?N\230\332\231\334D\321?\270\nZ/#\010\306?\312\356Z&\351\370\317?\234\325\223\335\362o\321?_\271\362\032:\304\322?w\204a-/\032\324?\230\023Bt\371\260\317?\267k\201\276\246g\321?\020JS\225\232c\305?-\025?\271\262\263\314?\336i\310\376\315Y\322?\255+\367\346]3\325?7\215\253\231\3161\322?VRu/\372\241\323?\271\364\026\254\304\276\323?\000\327\302\352\227\241\316?~\242\272\322\225\034\322?\221(BW\023e\322?\375\004\006\377\021\274\267?\223\352\335M\'\241\321?\361\200\376\267\234\017\322?\337n2rb\004\316?\370_[\375\340\325\315?\032\240\0337\210\030\322?\246\250\036\\F\271\321?\346\336\366\026l\351\315?\203fL\313\214\032\326?\236\323\357l\326\263\321?\033Q\017\016L\307\320? \226\344\270\007L\322?\016\252L\262\207V\317?\314\035!\366N\264\323?\336\034\251\034e-\322?\210\201\244\013\216k\323?\244$\320\322\250o\321?\243-\351S\207\217\320?\230\2447~\326l\322?pE\324\327\002a\320?[\215\032\203\266+\326?ug7D&\312\320?\315\273\306;{\237\323?\374\301#\236\252\212\320?\332\350\246\021V\352\321?\252DbM(\356\320?HU\'(\304J\324?\t\266\344\315\356d\323?#\005\235\260\307[\324?\000\0349\332\212\240\313?\335\255\217\373\024\357\323?\226p\026f\t\301\316?\021H\3161<\220\313?<q\001\264\"\364\325?=\317t\266M\037\317?\t\323\203\304n&\322?\232a\267\220\306o\316?\001n\203\313D\240\321?\270\355\367\233\273\203\323?"
      }
    }
  }
}
node {
  name: "normalize_element/component_55"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "\321{w\354\346\360\316?\010v\001\321\301\252\324?\245\327xF\341\016\320?\023\246\275\373\302\017\322?\367\214\337<\036\270\322?[j\272\'\332\030\315?_\251C{\260}\320?QJ\274\307\217\024\322?e\345\205\336\\(\317?\266\265U\256\217\305\320?\246\177\334\215$r\321?\241\024\371jQc\323?\036\371\203\201\347>\323? 7\335a\374\234\322?\373P\256\230-\363\322?\371e\000\r\016\315\324?\347\206P\354;\033\317?\265\244\231\252X\265\321?AZ\371\353i\265\323?\274\365(\311+\261\312?7ePh\267\210\324?-\262\223}4u\316? v\004B{\315\324?V\021x\244\035\236\322?\335Dy[\363G\322?Q\366J\344x\301\321?\355S\334XSP\311?\225\035\236\002\271\264\311?^\235\325\225\336]\315?*i\322a\026~\321?J\204\314\351@\203\313?\351\373\212\344\024\305\322?\337\3609\262\035\314\324?\270\t\311\222\3212\326?\331U\004\334L\265\313?\267\\\356\255\367\244\320?\356j\311\025\244\272\314?G\273\360\324:\251\323?K\211\'2\250\363\313?\000R$*\027\224\315?\366!eG\207@\323?\243\303\016&o\307\315?wb\275\356\000\321\321?\231\023\223\273\370\360\322?q?}WF\373\320?\021\332\240f\260x\323?k\337%6\364V\320?tm!(\2645\321?\020\006H{V\016\321?\227\345\360\353\265\020\323?\343\007\000\361gV\325?XC\223\330vy\324?\202:x5_v\322?m\270\353Lqz\331?\213I\364<\374\330\321?x=\325w7\274\324?x\232>\316C\254\321?K\275\377s\276\026\322?p<\002,\260\317\324?i3\242B\342/\320?\345 b/\206\005\310?T\031\240\026~n\322?K\357_|x&\324?\353:\233(\036D\323?,u\366\271\315@\324?\016\222}\021\346\266\320?K)iw\250\343\317?\366\267Pn\345I\324?\214u\273\250\'=\317?_Y4`:\364\317?\251N\346\243\265\367\321?N0R\336}\304\312?\177f\333,\010\254\304?\016\262\004\320*>\324?\300\325\007\200\2242\320?\211\205\3577\271\303\327?G\021\1778;\236\324?\311*\n\223`l\322?\240\227E\271\030i\316?K\237\244`\220\213\323?\337E\203\007\022C\323?\330O>\2766\373\313?\257\316s<M\343\321?\220\356\311\276\211s\323?;\2577\205#u\321?\316f\037u\205\010\316?>@\374\236\206\377\322?\370JN]a\360\323?\325/\246\323\231\337\320?\361\304\2324\207\360\320?w\334q<\377s\311?[/\346\344\316\327\323?\264\363\211~e\354\320?b\304x\254\235\021\323?\366\315+\016\317a\320?\n\377Ew\340\201\322?CG\025?r}\320?\216\343\202\221i\275\325?\347T\021\362j.\324?\205\356*U\266p\323?\2617\316\371k\212\323?\237m\271#1{\300?}\3639|t\270\321?\273\202\356D\251\372\316?{^\352\032?\312\323?l\033\220\316\n\266\324?\301\227\231\0045\275\320?\370\332\255\0213n\323?\232\210\2423u&\321?\242\366\375\311O\322\322?VN\215-\2122\331?^NdA\274\t\315?\204\021\034\0239o\305?\031t\271\366B7\325?7B\336)\037\255\320?\254\302\311\252\306\032\312?P\374/\017M\304\322?\017V;A\235]\320?\331\035_6\222H\320?Uw\244{OE\322?\273\231\030e\022\"\323?\217?\261K\335\000\322?\217K\221\206\227C\316?Y\253\001@\321y\327?,\230G\352|9\323?\"*\227\nM9\316?\003\205\344\336\250\307\315?EL\005\354\325\r\316?qd\331$#\315\320?\307(\360\312\005\031\324?\332\261\263\026\326U\321?\230,\034x\035\300\321?U\007\200\367|w\325?%\334\010\344B\000\311?\352\300]\351\301\314\323?GQ\341\264R\373\326?\361^\307\025\235\240\322? \372\346\345M\021\320?\314_\366\362\010\034\305?;\332\316}\215R\320?\246\242\203\276\214s\321?\256{YJ\376V\322?\300Z\265kB\032\324?InfW\316\\\317?E\270\243\341\217\000\322?\352\nt\365|p\311?\\\354\024\260\277\032\313?\276d\256\317F\325\322? \223\345T\315T\325?\257\036\016JL\033\322?9\270\341h\250 \324?\263\255\217\034#\230\323?O\301\271=C\243\316?\250^=B[\373\321?\013g\022P<B\322?\330\335\307\307\252%\304?\234r\333wr\321\321?\203\213\214C:\022\322?\365\234\277\314!p\317?\261y\311\275\310=\320?\"\253[=\'}\322?\365\005\030\211\025\235\321?\331d\321\227\205F\316?]\367G\371\370-\326?\027\033\021\221<\345\320?4\253y\271H\324\322?.g\320\177\370!\322?\022Na^\255\376\316?\226\235U\321\345\016\324?\370Y\021\247&p\322?\\>F\004\331.\323?\027X2\215GE\321?\017H\326\242\204\207\321?\226h8\201\303M\322?\367\235\357?\3436\320?FG\337\225>\203\325?\201`\000t\247\372\320?\251\356\333Zp0\323?\232\013f\220\336\227\320?\006\354\005\307\256R\322?\272\276\230\370f\245\321?\006\222$\306:\356\324?J\374\250\213\2668\323?\237\367\357\2171V\324?5(\014]\230\253\312?\235\251\221\017\332\350\323?\023 \027\220N\301\316?\313\233cC\256\t\314?*P\247\026\363.\326?\313\305\243JP@\320?\233\024:=\\\343\322?\235M\230G6\213\316?aF\275Oq\326\321?$\303\340P\256_\323?"
      }
    }
  }
}
node {
  name: "normalize_element/component_56"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "P\256T\0206N\317?A,z+;\262\325?\247\025\203\340!g\320?\374\315f\003 V\322?O\rR\365\315\313\322?\372\336\002\260\321W\320?u\003\373kV\226\320?%\324\377~\2408\322?\024\322J\274de\316?UA\303\2356\243\320??\032\036`\205\262\321?]\332\025\237\247&\323?N)c\007\213&\323?\3212*\'\334\366\321?\327-\031\377\362\224\322?\337\250\352%\223\001\325?\342Z47\273\302\316?\230y\335\350\204\314\320?)\263\317\3200\026\322?\326q\224m\364\362\311?\346\2038\353`8\324?=\205\262\251 \352\315?]\025\243\014\'9\325?\225f\261\034:\300\322?\265u\204\224\036t\322?o\314HC\341!\322?3\372\362~\263\177\311?\277\202\030\016\242:\312?\331\261\273\207\036M\317?\032\225\340|\006n\321?\023\n-\3057\217\314?jM\351\034\340\242\322?\210\323D\375\000\024\325?\205\224\327\376Y\211\327?W\253F\0242N\314??%0\233\325\242\322?e/9\300\\\243\313?\301\310Gb\264\224\323?E\3315\003W\327\317?VF\254\220\265\360\315?\217\001\241A\177\013\323?.\342\231\242\354E\315?\300caP\362\337\321?\270\272\357Z:-\323?\310\311Z\311\342,\321?\265\316]\352\2367\323?\034d\200\256\367\007\320?\254R\226\373\306\222\321?(~\323\216\367W\321?\365\226Th~G\323?\026\217\026]\232\037\325?\310\364&\264\0340\325?T\234\325\310\317\342\322?\374\320\375\203\345;\331?\204\352ebZ\276\321?\317\023\317\331\002\002\325?\226A>\263\347\374\321?j%\351\244;\213\322?O\036\244\024eP\325?\216\032\227\232\3224\320?\360\n\332j*\331\311?G\'\333X:3\322?Mn\014\350\"\021\325?\246\3554\331\014\336\322?\2158\324W\246\313\323?\314\003?G7$\321?n\031O\210\251b\320?\020\242$@\'f\325?\013\310ER^\255\317?\240F\226\326#\260\317?x\nw6\375\374\321?\330ws(\253x\312?\336\3318\021\346>\305?\277\305\237\265\226\332\324?\t,\317o\327\014\320?6\203\033\320\242\374\326?\334\245\276@\321[\324?\034\0263Z\370\356\321?\313\010Vr\241\264\314?8k\004\243\021:\323?\355\032%\22611\323?~f\241\201~}\311?\\\341\375\273\265\241\322?\322$AP\037\225\323?\3418?\261\2159\321?\200\344\r\230\326\222\315?\350\375&\344\350\t\323?\300vQp\210C\324?\324\335\337\032\204\213\320?\363\2427[\307X\320?\247\350\272\203\347\004\305?R\320\t{\274k\323?\005O\264\272\273\337\320?\023\344\261\260\361\352\322?\022RYB\256<\320?T,\235`\026r\323?1\310\356\346\317\025\321?vpib\245\265\325?1m\201\002\304\344\323?\202\267\204\237\337g\323?\013\241\307K\336\260\323?\002\316\241\370p\212\300?\256\276@d\037\261\321?;\364\374\272\352\271\316?^\r%\232\r\240\323?\206\272\376\023\022\037\324?\002eyu\223z\320?;{\205\n\260\275\322?\241\376Uu\306?\321?7gVL+\271\322?9\010Q\366Jd\331?\335r\213\177\363p\314?\304\016L6j\272\304?&\257O\2625\370\324?+\235Gyq\230\320?W\255\325\351\0033\312?!\037\311\354\371\350\321?9-;n?\223\320?,\034\030\253\223\264\320?\373\363\327\245\362\010\322?\026s$X\233\215\322?\340\220\326\260\220\r\322?\350[\223,/\322\316?\274X\302!\356\346\325?\330\306\2235\316,\323?`\262r\341\240\372\317?\226\207\267\224\024\224\315?\354\354\347\361\324\223\315?\360\320\301D\315\241\321?\322\215H\305\023\202\323?/U\217R\016\310\320?\301\316\250T\344\253\321?\303\234p\024\370!\324?\207\340q\267\017l\311?\025+\264\275\'\240\323?\223\370\303lU\024\327?\214\373\345L@\267\322?$\r\374\025#l\317?p+\253S_\302\304?a\336q\367*\223\320?D?U\260\206\336\320?\374\033^Wf\006\322?Pb\313\203\330\037\324?\31318\316\226A\317?\246g=&\231\217\322?k\352\315\214\244\233\320?\234\250\252r\317\352\311? Y|\347p=\323?\016\367\262i|Q\325?\t\347\324G@B\322?P\311\374Mo\231\324?/\352#\210\244j\323?^\370\313kH\003\317?\023\361\001z\024@\322?\366\327\261e\207\005\322?\276\037&\375\227m\321?vY\356\372<\316\321?7\272\"\257\t\364\321?,\013\211(\344R\320?\254`\n\305\014c\321?v$\333\034\216^\323?\201,Xk\247\364\320?t\262]l\035\306\316?\026o\006\255\367#\326?\034\016P\274\370R\320?\357\346\324\216\025N\324?\261N#\2321F\322?\367\020\260\3754\323\316?l\233\027d!S\324?\\\310`\033\252\257\322?\3036V \202\303\322?\220\274\217}r\357\320?\343\"}\256DM\322?\004\371-\310\003\"\322?S\004\240\240\000\t\320?\035\032t\024\260\325\324?\3363\025Y\240\032\321?\211\235\361\311\377\356\322?\315\247T\252\300\200\320?\262W\355\324; \323?{\3757\2312<\322?\321+E\302\\*\327?\204\303\003\261\t\374\322?3&\2630\372@\324?\271\210\304DP\343\310?\322\021Q0\2111\324?g\230B6|\312\316?\216\203\001:\202J\314?\362\263\207y3C\326?\251r\351~\237\310\320?\266SE\201\326\255\323?\025\3265vc\343\316?\244\364\037\256\251\'\322?m\316\361l\267F\323?"
      }
    }
  }
}
node {
  name: "normalize_element/component_57"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "\364v\201\033\364(\317?\233\022Ug\321u\326?\302i\221R\250%\320?j\2729\275\324\355\322?\324\353(dm\007\323?\323\212~S\251\260\317?\2275w\025\316\245\320?\371sS\310jz\321?k\206r\247\026?\316?\234j\036\241\025\241\320?\202H\204\0330\225\321?2.\250\261\265\245\322?nas\224\327\230\322?\230\013\016\217\372T\321?\221X4\230\344r\322?\027\272\337\217E\224\325?n\227\027\017\330]\316?\032\340\267^)\204\320?\356D7e\350\004\322?\220vv\016r\322\310?\021\375\373\010\323\"\323?\212BmI~\254\315?\365\255]z\376\213\325?NX\304\253\n\237\323?\350\343\3564\030\021\323?\233;\222|9t\322?\260.\377\005\250G\312?\273r\007\373\300_\313?\271\365\303\235En\320?G\337\334\023\257\210\321?\246\315\226~R\205\315?;\010\2030\214\373\322?\033$\230\370\020\345\323?cW\251\214\276c\326?\312\023\032\036\201S\315?\"\223\027\217\016\214\323?\215\234\367\222\325\323\313?\351p\3370\362\216\323?G\263\204E\335X\322?\337\264*\323y\036\317?\3778n\354j\266\322?\225`\270\r\177Z\315?\333\004\371\210\201\026\322?\361\301c&\356\004\323?\207(E|>b\321?Dm \377\372x\322?f]\2759E\217\317?\003\263\320;\006\345\321?\310\3765\3752\210\321?\362\036\237D\017r\323?\351Y_\020\320\276\325?\242\000\354\004}g\325?\306\345\323\276\024\371\322?>\225\316\345\330\352\330?C\020\265\247\303\216\321?\257RI\266\035g\325?wQE\010\307 \322?E\361\365x\313\334\322?\324N\266I\221\261\325?\234\034\231\242\267\323\315?\353%\356\372\312X\313?\346\027\334\021y\353\321?\351kG\205ra\325?\343J\274\212,\334\322?\236\230\033*\313R\323?j\346k\304\003R\321?\243\317Q\213\344\262\320?~R\004pg\252\325?\222}\300\236\327!\317?\370: >\355\306\317?\237T\347\220U\343\321?\276I\032v\364\014\314?\335\253.^.\r\306?U\252\026\241pg\325?s\234\350\256}e\320?\303\210\204\274\014\251\326?\246\351\300-\260k\324?\260$g\3133[\321?\2162\311e/\035\314?=$\3135D\366\323?x\265N\357\361\010\323?M\306u\257:\302\321?\2544\243\313\r\371\322?\274\365\275-(\221\323?]\242\323#\250\002\321?Sv~z\001\360\315?\020\030?\033&\353\323?\027\233&\321j\177\323?\211`\216\261\"i\320?\361\030\014\030\236\303\317?+\237Z\207\347\210\305?\266\234\203\033\264\r\322?\337\220Z\3514\031\321?\271\241\255s\241\254\322?\360\227w\036\332\\\320?\264\245]8Ov\323?m.\326\356Y\242\321?\357\236\277\255\024\262\326?\275\023\021\320\r\345\323?x)z\202\362N\323?\307\331t\004p\363\323?0\232\370\027\377\206\302?f\347\341\302\211!\322?\325\233\254\254\310\203\316?\304]\307\374\377_\323?=!\2655\224\315\323?a\313[\020\362\203\320?\315\205>\026\252t\322?\320\030v\260\257\211\320?B`\020Q\177\217\322?qJ4\331#:\331?\205tC\026\023\242\314?\005f\365v\2328\304?\302\255\215A\277 \327?\r\n\260\263\024\265\320?\340\342/\315w\347\312?\232\310\215\241\352\027\321?l\266\030Z\242\265\320?0\271\271G\"\023\321?\277.\356\377\0266\322?\220$1\326q{\322?\307\261\031\323X\n\322?l\233\211\271\t\226\317?\314J\344\231\317\315\324?\026\004\032bx\t\323?<\374\213Y\\G\320?\314\316\271\023\240\261\315?\273\200Z\266\035-\313?Vl\001\336X\251\321?\201\276*\240\033\375\322?Q\010\245\256\003\'\320?c\024\326V\204\254\321?K\261\020\016\327\031\323?\001\' \225~\\\312?\\w\031\034*\250\323?O\000?\217\303\023\327?7\'\202z+\271\322?\014c\2263\227\370\320?X\014z\026T\371\304?\372\340\221\205\243\\\320?\377\345\263lH\244\320?\367S\222^\234\344\321?\037Se\202[#\324?\010\316\341\246{\247\317?\322\336i\375\360\035\323?~\202&\352N\265\321?\357H\277\364+Z\311?\222\202\033\347>r\323?\346\016\264em\021\325?\036\333t\374\376\352\322?\333\032Xa\017\332\324?\263z\364w\320;\323?\333?\310\022\323\316\317?\342\200!\241\351)\323?\340\014\243\305\276\251\321?\361\033\323\321y&\305?p\334\314b\016\324\322?\006 A3\200\236\321?\3752\205\277@\277\320?F\033\267\000\203\320\321?\235\342\277\340\2353\320?y\333E\313\223\341\320?\273 U&\222n\317?\316\214o\to\370\325?\271\3650:t\310\317?\275\321\202\250\337K\324?\"\032\226l`\036\323?\203\272>/\271\352\316?_\231u\316hn\324?D\244\241\244\222\352\322?\262\252\310bGu\324?\360\243\262\022\007\221\320?b\010\003F\314i\322?&\350\374\002\344\345\321?l}\177\355\332\n\320?]Qf]\205/\324?\367b\227\3043*\321?\206\034:\301\'\013\323?\272\212\377\032\2249\320?E\206H\222\217\371\322?L\216\330z\310\214\322?\233\205\364\026:\317\327?\257O\311\321\315\262\322?[\364\256w\010\356\323?\212}b\232r\320\320?\231\033\355g\232\030\325?\264J\263\360*\350\316?\300uN~N+\314?#\263\202\370#\031\326?\366\316\245\016\253\005\321?\033OZq\3276\324?x\023\27378q\317?\210b\023\025\201|\321?B}!\235\3473\323?"
      }
    }
  }
}
node {
  name: "normalize_element/component_58"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "7\305qMr\241\316?B\232-0\226\017\327?\242\265\031\334\023\372\316?\275v\3115\216\303\323?+\352\\\351fS\323?\253R\\P=d\320?K \263 \205\254\320?\206F\032V\235\307\316?\310^@Fx\257\316?)J\327\206i\303\320?\002\342\246\355\374.\321?t1p\272\021h\321?\301\014\024\030\265\262\321?\002\272\227J+\275\320?XT\345\367\r~\322?\016;\022\203NU\326? \310-%L\n\316?\200\230\335\303\300\273\320?\224h\006G\202\026\323?\336\023\031\215\344\201\307?\223`[S\341\216\321?\'\316\010q\020\255\315?L\356\025\265\262\277\325?\000)\240?#\347\324?\204\003k\346\332\241\323?\275\371\255\240\340\267\322?7\033\351\024\375\204\313?@\245\330>\325\002\315?\377Z\366\325i\005\321?\270\213\245R0\306\321?\222\201Z\021\327_\316?j\225\267(U\220\323?/`\023\343F\033\322?\020\327\203\254\033M\324?:\272\000\352\274|\316?6\216I`\"\247\323?\260\214\376\261\277\025\315?j\205+\230\337\206\323?\226.\360!P\231\324?\342}\'\366h{\320?\336\371n\210+F\322?\345\004.\016\265\315\315?\260\211\2751\263X\322?\023\330\253\256\224\234\322?+\312|r\332\224\321?\227\215\345\225\237\177\321?\306m99q)\317?\3651OI\376)\322?\373lz\326\211\231\321?\231\314vZ\276\233\323?\255d<T\227O\326?\t\257*\351\313,\325?^\310b\034\325\311\322?g#\303iB\214\330?\363\"\212\376\rP\321?k\207\255C\257\313\325?\206\021\353\"\277\035\322?C~3\272N\006\323?1\357\004\n\333\000\326?\343\n\2758\320G\317?\016\345Ku\357\213\314?\266\224G\305l\232\321?\314\007%H|9\325?\303\000\243zT$\323?j\376\322\2010\000\323?\216\'3\362:A\321?\177\342\370\2105\350\320?`\344\322\351ZJ\325?ZMIiE\372\315?\203?k\232Q\025\320?\207\316\373\227U\254\321?\334\006\004&\257\317\316?X2\336\216$\014\307?)&\002\344j\325\325?\314i\325\002\t\027\321?o\243nX4\254\326?\365K\202?\025\232\324?<=\320\271\304\271\320?\272\025\200NZ[\314?M\023\266\237\214Q\325?\221f\316(\315\316\322?\277\247N\024\334\000\323?\r\256\351\334\025\003\323?\007 \314%\tm\323?Fl\032U2\322\320?\362((TV\344\316?\035[K\330\351-\325?w\344\221=\027\315\323?\244\344LH\250o\320?\2341U\3737\031\317?\306\327\355\237\346%\306?\351\374y\362g\032\320?\204\272\277\257\316\207\321?C\251\t\027\374Z\322?c\rm\271`\264\320?\001[\375\217N\310\322?\025W#(o!\322?\021gR\376F?\330?\010%\217Q\345\016\324?_\356=\243G(\323?\337\205\311.\372E\324?~\213\031\244\212\351\305?\232\276\377\330\351\334\322?ZC\225\331\241S\316?\345@\n\374\263\017\323?iA\222\323\203\264\323?\351.\223%\226\273\320?\372(#.\000m\322?\004\221)EI\315\316?l\216\205~,X\322?\2401\325\304\351\301\330?\327\313\313n!`\315?\035)\232\2100\336\303?\255\334H/#\002\325?\261\216\355\371\275\364\320?lv\273\226D\001\314?\001\245U\270\333Q\320?f\355|`C\307\320?\273\035|\211\372b\321?\234\376\204d\025\267\322?\366\242\345\\d\304\322?\275\206_8w\376\321?\243W\364hY@\320?\240w\344\301v-\324?\200\3703\233K\332\322?\203\242y\000\213\034\320?\225\330\006\005\335\022\316?AG\374\241\321\221\312?C\252e\301}\312\321?\361\203e\377Kx\322?\340s\021\363m\000\317?o\241\017\274x\304\321?\316o\351\257\217\"\322?7A\030\233\375\321\313?\254$zeS\330\323?9\332\275Q5\376\326?]!\033dl\252\322?weu}\2579\323?\307\253\256n\265\301\305?,\201\374\273*\017\320?\373\260\210\250\\}\320?\r<R\330\240\352\321?`\256p\213,+\324?\206\373\204\220L7\320?\034\351\327\231\354\246\323?\223\343#i\004\211\321?C\316w\307\224U\311?\256\013\017\377\210}\323?\323r\nlz\242\324?\346\232A\375\340\334\323?\213\235e \023\354\324?N\362-\3608\014\323?\334\365(\025\272v\320?/\212\261[\352q\324?\2214HYp3\321?\226W\353\032\346\361\316?\216\345\232X\2316\322?\335.\345\220\225\036\321?\n\323\234a\017\362\320?\370\031\177\361\370\265\321?\000\322\t1/\261\322?\210%C`u\374\320?o\373\251\347`\032\320?s\307+\250Y\264\325?Z\264\347\317\nN\317?$\231B\330\nI\323?\345A\01054_\324?\014cE\354\2278\317?\3242J~ae\324?\253L\204Ok!\323?\321fe\223\255\342\325?\253\300\257\342k\'\320?\005\212]}j\014\322?\17786\2456\235\321?\036E\3068\271\036\320?\272\267\302\276\024\223\323?O\002\330\326\010*\321?\273b\377\242\357a\323?\210\277\235yv\217\317?\265\370\223\177\315\\\322?\\S\256]\313\245\322?\206W\256\221\006\322\327?\367\207\024\240\371^\322?Mv\277L\014p\323?CG\207\224Z\300\314?\177\262d\271eZ\326?5\240\360oV\030\317?Z\357\002\350\241\275\313?\005*b_R\277\325?;\332\214a\273\014\321?$0\020\343\271g\324?\376\312}\204\367\033\320?\027e\\\217\307.\322?\t0\212\360\277-\323?"
      }
    }
  }
}
node {
  name: "normalize_element/component_59"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "\323\345\210\r\372\370\315?\007\277\ny\317\204\327?\210\2671\352\030_\315?TW\030\004Q\265\324?\334\316\347qR\227\323?(z\314\177\311\277\316?LZQ\200\261\251\320?0\315\223\274Q\243\321?\350\366F8#\006\321?\321N^H\255\016\321?k\230\372\251\214\247\320?\016\250F\316\023\246\315?\210\332\255\232$\254\320?d\372\346}j<\320?\342\240\013\212\351\231\322?\"\265\206\333l\017\327?W\347v\001\277\336\315?J\362\371\264\314:\321?\323\274\360>\037\351\323?\002\211\327\t\360\034\306?^\256\362\302\245\274\317?\250\372\247\261C\320\315?\343IL\374\303\311\325?\242c\327[\2421\326?\214\251\177\006W]\323?\272\347\325\r\317\343\322?\035\320\305\353i\343\314?\250u\331\267\254\345\316?\0321\251]\360b\321?\371\211\361\004<\025\322?\334\035.F\030\027\317?h\205\rB\205\322\323?\370\263\253\322\016\006\321?\203\243Qrh\300\323?\372\247\276mR\203\317?\035Im\325\272|\323?{\231+\372x\345\316?(\'\332UH\231\323?\330p\216\303+\354\325?\3717w\332k\230\321?3\016\375,\371\254\321??\235\360\347\033\336\315?Z\257\313\353\346t\322?Ro\006\262\260\035\322?D\336\271\312\357\301\321?\331\213\376V\006c\320?\213vJDN\330\316?W\033pQ\276D\323?5\211:\246\000\216\321?1\213Nk\332\362\323?q\321\rp\350=\325?\376\335\245N\354\263\324?H\312/\346[]\322?\031+\3021\361%\330?\344Q\3626\253\010\321?\\\004^\027\222\024\326?P6\013\322\221\376\321?]\252\266\301\247\376\322?\354\313\244\026\342\302\325?k\211\215`\200\320\316?\304\315\237\362\214\226\315?GK\3363$D\321?\001Y\030\272\303\332\324?\\\203\233\345\342\212\323?\037\r\242\023\024\017\323?\332d\333\t\371w\321?\032<\334\246)\026\321?\231\177}?\370\232\324?(FO\367%\316\314?\014\031\227\303Qf\320?Q\255(\237\312[\321?\020\235\003\243I\344\321?2\3110=M%\310?</\316Eg,\326?Ne\201\021\\\356\321?@N5\006\337\314\326?\360\377\374!\252n\324?\177V\330\215\360\026\320?\310{\252J(\353\314?D\236\333\206|\320\326?\226\037\346\002\377\212\322?\336U|4\266F\324?ot\337{\311\360\322?h\016 \256b2\323?L\322X\242\203\263\320?\0236\314h\225\r\320?\337\177z\037\206\327\325?\366}B\272\373#\323?\014\225\252\255\013\221\320?\363\034J\032\307\273\316?\275X\236[v5\307?\257\277xH)\017\314?\354\177\270_\311\013\322?\311\313\026 <\000\322?\377\251\014q\031(\321?jO\262\235;\326\321?\203\236\230\270\377\217\322?1\t\211G\361\320\331?\355\014\036i\032;\324?jL\014\362H\366\322?\t\313\240&o\212\324?EN,\3362\341\311?\322RN\273e\225\323?6\376\206\201\225 \316?l\326\375\211\350\274\322?[\031x\341\023\272\323?\242JI\346\303\371\320?l\320\377\301sn\322?A\3340e;z\314?n\206\305\357@\031\322?\034\335d\373`\036\330?\301@\376<\207^\316? Zh=5\204\303?\032\325\257\225L%\325?\334\200y\017j;\321?q)&\360\000\357\312?\017\237\372[\220\032\317?\255\2524\265\256\311\320?T\334\007\014\321\242\321?\260!hg\371c\323?\230-\037jW8\323?\307U\004\266\205\362\321?\2361\214\3562\271\320?\326\327\263\032$\332\323?*\234Vj\363\250\322?\337\361\251@\206~\317?Pm\202\005\266\236\316?P\243\n+\207i\310?\305\2423z\177\355\321?\344\037\004\204\331\333\321?\212\334\367\233\225\334\315?A\306\331\375\365\355\321?sZ\030k}\246\320?\264~\356\\\374\323\315?w\362\271x\027F\324?rK\200\241\024\333\326?\227P\037S\007\221\322?I\314\254\330q\271\325?&\036/(\374\'\307?\324.\"aJJ\320?\202\324S\317u\346\317?\017\301>(\222\t\322?\342\256\204\014\351\262\324?L \212\241S\262\320?\030M\374\213\177#\324?\227\005\006U\022\225\322?\311\246\340\031\002\272\311?\310`\033\252\217k\323?\361?M\273\005#\324?\365~\006H\362\304\324?\251\335G\037\007\346\324?\300\243\303\314\t\335\322?\202\244@\200\273\025\321?\360I\272u\035\273\325?qZ\270\370P\254\320?\312aFd\227)\313?O\362\033\r}\203\322?\204\304\224M[\221\320?\364\375F\316\321\351\320?\033\005\261\001Km\321?\334\275\353Rt\233\321? ?\341\r\345\273\320?}\\\2228h\205\320?\257\t\374\360\022m\325?\344\224\341\301\024:\317?\\+\031\201*.\322?\212\022\200\301f\247\325?\256\2542(\332\242\317?\022\202%\274\334>\324?\032\352\037`\207S\323?o\370\240\021\2631\323?\234pL\242\240L\317?\037\003\337XC\216\321?\236\233;\234\356L\321?\275>\364V\275\271\317?N~\341NO\003\323?\323+\005\247\265\036\321?\306\377\217\246\211\275\323?\004w\361\225xt\316?\355DjV\215\020\322?\331S\354\024\035\274\322?\000<\3274E\331\330?jds\257u\004\322?p\216^\000&x\323?\221(L\311\206V\320?\201\255TH\340\254\327?\270\304\025@\306V\317?\272\345K\361\266\'\313?\\\201j\201\022F\325?\347\"\031\315%\360\320?\t\240\377\273\221\333\324?o\221\2449\354\235\320?\201\321\020N>\017\322?\206\361BV\2213\323?"
      }
    }
  }
}
node {
  name: "normalize_element/component_60"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "\251\340g\221*`\315?U\tYZiy\330?Z\275\201\321\376*\314?j\rf\222\337\242\325?\t\362\273\0024\236\323?\200j\320Xz\373\314?\322\230P\216\360\240\320?I]\206\215\037\033\315?\332=\365\037\004*\321?ESR4\312k\321?\271#\006\373[\024\320?\376fP\327T\302\307?X\255[#\3238\317?\r\006\372\353\345\234\317?\256\344\206\206\225\257\322?\367\367\306\316\343i\327?\254J\365y\231\034\316?\376\211\307\316\246\346\321?\354\230\275\343IO\324?)\275\350\213\272\337\304?N\347\372\246\377\330\314?\243+\227\341\315\007\316?\371\350\375\024\001\255\325?)\370\\\\\231\006\327?q{\r\267\377\305\322?\357v\321\030,#\323?\346[JVx\251\316?\314I\324}\223u\320?T\342\322\342\240\305\321?!\332\3306\326o\322?\366`W56\253\317?\21595\273\341\343\323?\272\214\223\251\037\207\320?\277\005\353\2258\006\324?\204\356 \343B\377\317?\177E\363\n\210l\323?\344\r\223\035\331\204\320?\024\277\314\361\266\344\323?,.G\365\301E\326?\016X\341\262\344\323\322?iY,\202U\016\321?\006r\266\244\226\262\314?\323\t\250=\023\204\322?\340V+\'b\260\321?sQ\324iB\322\321?\220D\026\006\270\"\317?\2653r4L\217\316?\313\001\336\251P\002\323?R\361\211\271\307Y\321?\376{->\276\n\324?\024\367UBB\327\323?}I|Q/\366\323?B\305kp\270\365\321?\333[4\336\002\273\327?\222)\010\3464\300\320?q\246A\205\256\032\326?G\365O\320#\317\321?\206\301\275\261\356\377\322?\233g\013Y\364&\325?\314\\\362\325\024\\\317?m^\356\366\315{\316?\263\3144\367\026\352\320?y\204\344\256oq\324?\020m\033\324\353\347\323?\271S\247\364-B\323?\025\215\265\277\263\035\322?e6\303ki>\321?-\261\232\375m\356\323?k,\330{.i\314?m\313\362\010}\257\320?\001\035\372\257\362\362\320?I\236\232\264q\360\324?\372ee8\364O\311?Z\312v\341\256.\326?I\276=\310\345\321\322?\2005\270\301\021\343\326?\266s\355M\004\030\324?\360\357\243\202\331\360\316?y\rip5T\315?(#\214q\216\222\327?zZ\270\213\264=\322?\325\214e*_\270\323?\304\372\256$S\347\322?\373\220p\207q\352\322?\251\312$\016\314\266\320?\367FTx5\230\320?sQF\277*5\326?X\217\027\254\032\177\322?\255\2053\241D\251\320?\001\014\330\311q\213\316?\345\324E?Wq\310?\345\033]\347\327\275\310?\256\\\201~e\231\322?\2719\2447-\217\321?\216\331W\363#\253\321?e\004\257\361\364\345\320?\032oV=\223\357\322?\022\r\321o\377\224\332?\216\302\036\250\215)\324?\367`\262\356\250\274\322?8\362\311U\357\332\324?\034\327\003\t1\347\315?\200\010\014\272\006;\324?~7u\317\316\352\315?\034\330\265\263k_\322?\227\2760\311c\316\323?Vy\n\322\357/\321?\364\024\246\340\nW\322?^k\323\376%\256\313?\276\005\351\224\r\314\321?\345Gi\'dV\327?\351\013&\240\267(\317?\364\276O\'iV\303?\365\372|\\g\330\324?\270t\030\010\014v\321?i\014\340\036e3\315?\203\030\307\314.\255\315?\243\217\311G*\312\320?\215a\375\210\'\347\321?\177$M\005\332\022\324?\007F&,f\216\323?\256A\331@,\356\321?S\220\375\376]7\321?\333TY\353\366\237\323?3\375\216\2702n\322?N/J3\212\243\316?\323\017\260w\373C\317?\242\260\351\023\t\376\306?\242%\355\030\347\007\322?\267\0226\023>A\321?\277\353\330\255\n\371\314?\306_~\232\237*\322?\323\022\005\334\356C\317?\251\232t\351\314\016\320?\t9k\307?\231\324?\030>R\337Z\257\326?\346k\367\364\326u\322?\324j\207@\247`\327?\360\031+_\0076\311?\233\255\267+\306\251\320?\027\034\024\203v\275\316?\214u\247\304@:\322?\277\226i\221s\326\324?\372E\350\353\":\321? \201D\265\266\200\324?\035\304\2720S\354\323?iCGp\370d\312?^8p\0042f\323? ~\226\230{\211\323?\225\271\214\252EU\325?\235\347\001\214d\330\324?\0256\\\024\330\244\322?\346\241\02773\357\321?\020\370\010\244\340\303\326?\200H\020\305\034\030\320?\357\"?\',\315\313?\200\212\260\317\006\232\322?\345\275~I\251\022\320?\257\r\371\215\315\363\320?Gx\260\002\3227\321?\301\356\336\313)\023\321?9P\240\202\325N\320?\276\3578u\200\350\320?G9c[\260\033\325?\006\021\3170\272\036\317?\262\200 x0\r\321?\363$\213)\310w\326?\207\006>\023U\020\320?\205\272\202L\266\n\324?*@(\260\177\205\323?\352 z\025\303\034\316?\303k\265\214v\n\316?\331Z\350\025\022\032\321?\230\364Z}3\371\320?\334\363n\277\213\035\317?\230\365\021\341\'z\322??\341u\310\220\355\320?6\362Z\270\225\006\324?\200_\370\310\2639\315?g\305\351\204\315\351\321?X\334\255\234%\327\322?OC\313\357q\234\331?O\324\244\244\037\236\321?\324J\n\364\325\252\322?d\266\340\034\340\257\321?\346\261fd\220;\330?J\242\2535\023\232\317?\347\177\255\243\216t\312?m\254W\240\374\256\324?\347\007\035\220^\366\320?$\314.\304\\e\325?\250\236\317\367\2105\321?V\241\370f\330\376\321?\027Q\345DS\'\323?"
      }
    }
  }
}
node {
  name: "normalize_element/component_61"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "\246\275\271\246\335\273\274?d|D\276\336\254\355?\t\352k\310\005\210\306?\365a\263\337\267\032\326?D@\346L\330\323\264?\313\364%\375\270[\272?g\334v\317\361\271\300?!\205\205on\007\306?\254Yl5\031\245\334?\200\317L\206\234d\300?\215\2141W\326\233\266?\373\227\270\026\254?\314?\030\000$\177\242\205\316?\023=\213\006r\316\304?95\220a\'\222\310?\237[\035=\324\257\322?\234\322\224y\270X\306?T\340\343\232\242&\310?\252\270\234\013V\256\273?%\361\304<\303\305\301?W\302\274\302\340l\304?[\316\r\234\037>\266?\271\327\264\030]\332\264?\235rE\\\022}\267?Idf9\345^\273?\272\305\364k\210\375\267?&\262\266\371\344\000\305?P\373}d\022\254\262?.eA\252&]\247?\315\203c\262\222\270\274?\t\231k\236\021\017\244?\355wVB\337,\276?\253\214\273K&J\310?\221{\023s\253\250\322?d\211dN\353D\276?B\036f\324!\334\306?\252+g;\033<\301?\3132\311j\350\326\300?\361\230G\037o\211\316?\2763w\200iI\301?\231B\330\nIO\312?g5\205\027B\243\304?\260\222\0013\356\354\312?\031\354\007\356\240\217\312?6\232\240\251~u\262?#\364\354\037/\027\301?\246\305\365\374$O\270?\303\273J\341\273\371\306?T\327]}\225\254\254?LA\325\355\216\272\305?\273u\006_\373\326\331?g9\032\321\207\370\314?\321\327\240\355\240k\321?<uJ\337\"R\335?\341\003\326\322%!\303?\006oa@\2432\277?\010\3612\327*\300\277?\021\017\nE\030\021\261?~\347+\t\317\022\311?K\266a\344\312\370\312?\253\330S\003\261\222\276?\221\003\244md\355\306?j\005\372\002\202\022\302?\375v\370\274\371\345\322?\242Il\273,\215\326?\210;j\216\244\013\314?\216\r+|\200\245\300?\326Y\305\314Rs\314?\034\220\274\'\232\275\313?R\031\'\007\261\010\301?\216\2479\007<a\303?xrK\200\241\024\273?C\234\373i\253\313\336?\255-\273\256\377}\305?\342G\273%\307\n\274?\314#\333\240\306\242\327?\320\330\t\302$\273\301?@QP\277H\376\314?}\272fd#\037\272?D\242)k6\267\324?\006!\375O.\350\321?_W)\303\014\033\302?\246\245\311\367R\371\321?0N#\375[\341\301?d\350\376\010\310\371\305?\202\362S)1\340\310?\264nI/\346\276\273?IL\007\355\000\010\310?\361\367(\257\327\254\310?\340T\355\230\217\313\343?2\217\253z\301s\345?\257;\330\300(\221\305?\334\034\242b\200\n\320?\n\221\016:\341\330\310?:\263\331hk\212\261?\001\343Im\nM\320?i\305\026\006U8|?\027\300;\311\273\202\321?\376\024n\311\017t\327?\004\037\377\334\002\017\305?$\261N\334\304%\321?P\226\t\2508Z\255?$\250\034\276E\332\304?ZB\343.g[\265?:\177H\374\340\265\320?8\033D\316o\326\265?\315\023|\221\330\007\275?\346\274\345;\017&\326?\236\237\034\344y\031\273?\351\031\213>\320\336\306?\333\202$:kZ\320?\267H5G\2617\275?\010\010\251\205\331\236\274?\201,\244\371\354k\324?\306E\2272\3161\274?5\330\241\210\257\260\312?\256#~-\376\342\301?\225\003\323\357\026\326\303?E\364\2742\247?\307?\346\3537\265a\204\312?\307)\351J\314_\324?\'\305\340\304\004s\262?\204\340[\322\375\216\301?\367\3420=\006\260\340?D\036\332*59\272?\253x\213\326=1\301?i\232J\033\033\265\305?H\246\253\212\\o\313?\007\024\010@~\344\300?0\205\317\"P\247\321?\347A\344n\274-\310?\355\013g\005&:\267?\351\177+l\025\343\311?j\351\026)\260Z\270?\346\247\352~K\t\303?#\000\356h\322\034\322?|?\373\2620\033\264?\333\262~^\2619\305?\233r\023\"\321\005\336?\211\350\235+\306P\304?\206 \232\210\235:\301?\212\360\265\273\225\222\303?\323Jc\254\035\242\305?\307JZ^\252\263\320?\256\262LE~\213\274?\360\2118Gd\362\271?d\n\340\252\016\340\267?>\223\254\2545`\317?\346sVZ2\306\313?\360\364\250\312\2078\314?\375Fn_\235i\271?\3429r\334\335\216\302?\274\301\207z\020\316\320?\336s\327G\344\221\300?\231\341\324A=\201\314?\273\331\342\304\236\200\353?\261*\237>28\277?\346\246\177\251\234\377\300?R+r\246\016\024\263?\026\272Er\217\253\273?\017\217CK\276\334\303?a\357&A} \272?\247{D\034P\016\332?K}+\242\276v\333?s|\306\033\037\201\301?\255to,\305\341\267?a\320e\021Z\364\301?\271\353\235\270\271\004\277?\321+\003\246\212$\303?\255\341}\260\347\306\267?\371\355\242\352\202\272\333?T\226\242\016\213\276\340?J\333\014\370{\260\275?*g\241\375EY\307?+\336\247.\t\345\264?\373\323\212\2227\220\316?\000\274O\237.\334\323?\220g\016~\037\344\303?fn\370\274fb\276?\336\264\203\213\301\265\277?1\340\004]\375\003\225?2\341\372$5<\330?\244\340.\235\004\246\276?p\261\223\333\245\366\315?\304*\212\311\256\303\263?{\332\375\004\371\324\312?\255\244\316\t\305\t\305?\226\236\273\355\332\217\251?7@@) N\301?\337\264\377R\035\252\263?\037\005\243 \345\030\304?\366r\310\2336B\306?\315\374\206c?\206\261?\235X=\346W\301\314?"
      }
    }
  }
}
node {
  name: "normalize_element/component_62"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "\3156\356\317p\303\253?d[\236\2700\223\203\277z\350\372\277\2349\273?~\2343\031\303\331\237?\005]\213\256\274\370\271?\363%\005*\244{\276?<\033\352^\304\312\264?\036\321\247\317\272\270\303?ib\010\240\033\021\223?3\227|5\005\007\257?]#\306\216m\351\260?\324$\321\373a,\276?\251\320\001\310W\"\275?\307+\243\240\372\330\263?A\372D\243\335\026\300?}\260\221\306\226U\270?\177i\235-*\246\272?\32022\230$\356\272?8\310\264\316\251\370\260?0\207\022j\334T\305?G\376[\'\000\217\240?\333\260\020\227\310w\270?!t\347\301\221K\276?c\240}B\374\027\257?\257r$t\360\374\262?c\356ZB>\350\256?\230~\207w\300B\271?\347\303\033\350\215R\270?)\317\342\343\030k\250?\r\340SWCD\302?\346\200\350?\'\341\271?\224\213\214i\0015\270?`\356\017k\\E\274?\270\224\327p\257\321\244?\r\026\322\n\241=\276?\224\323\314\312^\005\305?\3130\031\207-\317\275?lF\\\271D\031\255?U\365\343\020 \254\273?\271\307\375\007\213\234\254?-\004Z6J\311\260?\202\\\306s\324\226\305?\276;\263\326\260\334\245?j\035\212?\340:\247?\230x\223!\277e\265?\251R/\317\2655\302?\335\310\031\343\363%\263?\362\247\261\260\354q\264?\265!9x\252l\272?\311\371\254|\340t\226?\030\262i\216tR\272?\325\223\\r\232\r\242?\244\312\206\356\277\271\273?\035\234\200\r%\346;\277\377-\376?\031\246\247?|\236\334B\231>\266?3:\343\245\342\031\267?\360#L\213\331\326\300?\357h\300y\241\233\260?\220{\004H~\016\247?\205\215\272\357{H\271?\312;\rl#K\302?\026\221\233\300\370\022\265?u\321~\016m,\267?\026\310\235\346\245\341\274?\327iS^\363v\265?\002X\330dq%\267?\036k<\224E\272\231?\321\235S\325s\356\267?Mu\313\205\377q\301?\202\314\376\333\215\207\271?\026\303!\220UN\306?\276kB\355\306!\262?\356V\207\275\377x\263?\"\351\376\252V8\266?\315\214\375\263\206\325\304?\207L}I\370\230\263?^\245\244O\367v\263?\274\305\332\027\204\375\273?\204\366\357\234[X\257?9\371\372H\264\336\260?\205\204Kn\344\037\263?\2139\354\344*\233\301?n{\023\'\035\203\265?X\266\251\226\201~\300?\232!l\260$D\303?\372z\257;\2142\270?,\235\031A\2065\253?\335\034\007\216f\215\257?\033\300\346\022\312\037\266?\372.r=t\273\257?\177\221\201P\237c\257?\376\253\323\360I\201\270?$.\363b\320%\256?%N\306\257Z\204\303?\033\315\013\\\220\300\276?\335\307\222\270\025b\271?\206|V\355(\373\301?\271\362\243+\"T\270?\233\354A6\000\203\262?Y\312\3506\227Q\266?\031\204\342\\\3757\261?\277a:^\225\314\277?\363\334\214\344<-\262?\016\334\356\326\023\014\257?;&l\356\321\343\235?B\242\013\025\334\302\262?\257\325b\023@\301\300?\360\304\225{\315\'\300?}\010\361\033;5\273?@\005\302y1G\260?:\300$y\324\266\273?\364\266\234\302\177\367\272?\237u\033A\033\232\272?\251\232X\224\235t\272?\220\031k)g\302\243?)(\313d\306H\253?(\301\314\213\324z\274?\364ZC\210\257\037\272?\353d\217\241z\243\261?\223v\330\201\311\306\266?\005]\375\003\245[\303?z\377z\340\276i\265?xD\355\315[\264\201\277\302\344\241J(\330\257?\3459\tB\005\311\245?#sl\nR\223\273?Yae\372F\360\272?p\341\253\343\031\260\245?\3175\236\230\215\177\250?\330$\303\032\3747\264?\214\222\263W\357\325\265?P\357\247\233\313\332\253?\200\275s<\'\274\263?n\221\356\306\006\373\265?\351\2173\304\346\240\262?B\253\233\244\\\016\267?^\250\352\210\275|\276?\314\241\240ofO\247?\201\222[\303\247a\264?C\324\361Ve\370\303?\311\027E\363&\335\263?\217\000\\3s-\272?9\035\366\262U\230\243?\027\214\000]\352\226\301?\324\372\341;\277\025\266?\361\026\352\336\372\230\263?I\327\344\332d\025\271?*\263\321\321[P\241?$4\320\034\\\261\255?\251\"r\200\264\215\263?\235\220\"\247\271Y\257?\273\302\372\300\007\317\300?,KyO\023m\263?\t\273\n$\206\357\247?\353_\333\240\313\333\246?z\344\247\")*\261?\025Z\013\3603g\267?\021\315\2759\274\035\276?\314I\324}\223\265\275?\237\233.r\354,\261?\317\224\301D\310h\303?\205\000\tX\345!\252?\222-`<bx\237?B\337\'X-\372\271?\016\227\330YM\007\303?\345\372\346\032@!\303?C10-\025\224\276?1\256\360\342\210+\262?\346\261\032\326J\244\254?!\367V\037mn\263?LO\346\214\031\302p?\320\033J\224\215l\266?\250+|\326e\023\274? \n\371\257\222\340\244?4R\366c\201\231\265?\207\020\321\224\017\224\300?\212\347*\345\316/\266?\352\016\350\240\331\342\301?\036-n\246\271\212\302?ZF,Zg\031\253?\345\360S\231\205\035\224?}^rU9j\267?_\310\350U\244\217\264?\367a\326\356\313W\274?\331\361\231\313\221\276\270?\220Zr&\2677\264?\tN\311\256\276\376\264?P5\376m\344\364\266?\005\314(\010\261\302\262?\355i.\007\337\323\223\277\2308\345\026b\221\273?\003\336\t\303nB\265?\352\022}Z\0378\270?"
      }
    }
  }
}
node {
  name: "normalize_element/component_63"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "t\315\257\251\235\250\254?ru\310\031\377H\244\277\021\375\211\263\352\277\273?[\217\360-\024\377\217?\354Z\352<\004\267\271?i\344\322|\276{\273?p>.\327\306K\264?o\001\025L\004\003\303?,+\226 \370\037~\277\333\337\tX\323>\255?\375x\311\256\235\360\256?\220\374!3\240\251\272?~,\005#}z\270?\033Z\215\272\020\212\256?\340\266\315\2142&\274?\332\245\364\351\004v\247?RB\355\rw[\267?\243\022\302\226c!\270?2+\0211\360\237\257?\027\000M\376\323\177\304?Zz]T\3053\224?\3668\035\022\010\005\267?\001\037\320ZP\346\272?\356\251\300\274\014n\255?>w\\65.\262?#x\251\374^O\254?\260\027\022IW\335\267?=p\332\373p\352\266?\357h\3052[\204\251?3&/\370U\365\300?\320\006m-$\304\264?\004\316\037\301\367\370\263?>\000D\"\2669\272?07\246\224\310\037\235?\257\375\377`)\220\274?\234VD,\346\220\304?\331\264\333\371A\007\267?\334\273\304`\027\250\253?\001\374yq\347d\272?J<\335\317\342\362\247?\344.\234MBG\260?\306\352\342x6R\304?\253\024\366E&\006\242?\304\337\025\022GV\252?\330\251\376\260\301\034\263?\364\370\263\333\013e\301?\03233z\010\277\261?w\246\n%\027\214\265?\225f\213U\227\024\273?`\325\315\203\303$\240?\213\274\264\372M\325\253?\225\266g\177h2\230?\003\342\272\321\343Q\267? \004\325 {\246\223\277\3032O\021TK\234?\034\203P\tH.\264?f-\361\277\026m\265?\333\347\262JI\014\277?}<6\372\177r\253?\3307y\217\010\315\245?\330_\026\335\361[\267?\002\206\032\302\207\313\300? nc\300M\327\254?~\370\224\304\333H\254?X\333\252\252\353^\267?d\256-\270\366p\263?}:ozO\031\266?\256\032D\2366@\177?\003\'\231\244Kb\267?!<c*\300\341\301?\210mt\226\245\222\270?\275P\322Y\354\n\304?\304\353\331\367\321>\244?\356f\030\007/+\264?\260\346\276\244Jw\262?\003\220=\357\204\346\300?PW\351\201\236\354\262?\311\260i)I\354\264?\\\332,;\035\370\266?\036)\377\263\026\001\232?h\t\244W\022\277\256?\277\246%[\377\\\261?^\022\033\267\216\255\276?`y?W#\007\266?\211<w\362Q\025\277?C\017k\340\375g\301?`\024N\034\212L\266?\016\025\302\356d\005\244?_\273?\3249\343\254?\332&\003\252\371\326\255?Xyb\323\323\022\244?/\2656q\230\206\252?\277\375\346\351O\247\264?+\355\225\370*\031\261?J\316\313Y\206\225\300?\330\341\236\235\302\000\270?\2057\345\266\357d\263?\313\241.\032~,\273?#\346\035\235v\325\260?\237<H)\312\240\257?\022\355\0361^\031\263?\263I\016p\362o\260?OY\277,\374\377\275?\301\367;j\0053\262?\335\023B\014\026|\246?\221D\t\334\265\342\237?yh\016\377\237\371\260?\364X\223\244\364\027\256?.RI\031H\202\277?\247E@/#\217\273?\362\234\244.V*\246?\214[\021\244nA\271?7\024\222Z\225\265\271?n\nO\333\313%\252?\354\361$\344\341\217\271?\321-\350{\0252\236?\363\250r\206T\344\252?\226\315\354XD\313\271?L\352\345&S\315\262?\030\240\363n\272R\260?^\275\265\014k<\262?vT\363$\002\270\301?=M\177YN\200\264?\226\036\321-\t\212\253\277\227\345X\317*\342\240?u\314~\177x\315\246?\345\277z\273\251q\270?i\0213\366\203\014\271?\264I\200\305\332\022\261?&-\200\034\331\004\244?!\371\333\202\313\001\262?\t\366\317;d\266\262?_\321\250\036;8\244?\227\355\316\320\373\243\264?\213\003\217?\266\204\261?\335\306\006\325}5\253?\025\320\251\003\327\227\264?6\343\2755s\362\273?\326\236,\221\030\370\216?[\256\327$\3326\262?\304[O\303\243L\277?\352`\341J\224B\264?\374\332-\333\344v\267?\340\0138\360\017\000\244?v\014\251Q1\326\300?\t|\023}\035\274\274?\257\316\'\256\007l\262?\213\364\022\313|\363\264?%\244T\023[y\225?\321\261\263\203r$\253?0`\304\234r\225\263?\207\360\251H\367\006\257?\235\352\005\251XX\275?\031\237>\014\361\353\261?\213\366_\204|\022\226?W\367\237gy?\255\277\364\277H\247/\375\256?f&2\":\314\265?\235\362\355\377\021=\277?\213\374\256\223\360\300\273?\310\214n\277\2472\260?\t\215jUnI\302?\201#\242\024\204]\240?\241\303-3-0\220\277\231\307\246\004\340\371\271?\t\013\361\277\312\236\300?*i?\376D\370\301?\264\346\t|,\032\276?-Z\270`4!\256?p\230|tiJ\263?Y\301\201&H\300\252?\370\340Mh\246<q\277\210\224\212\271\260]\263?\026 #\003\355\314\267?\266@\246\250?j\244?\230|D04u\263?,&\265\236\301\251\274?n\236\006\346\312\233\264?\274\256Z\367aM\301?\03587\013S\322\302?_\\\r\375\321?\253?1\257\242\215\303cf?\232d(J\351i\265?\301/\3569\302\377\250?d>\331\372\r\206\272?\25580\024\013W\264?\014\343\200\363h\376\254?\362\005\220N\033\335\264?\267#A]I\227\267?;R\224\203\215v\264?\024\036v\327\300\363\224\277\364q\201\214\377\211\270?5\033\1770]y\262?-\201\316\203?l\264?"
      }
    }
  }
}
node {
  name: "normalize_element/component_64"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "~\314S\222\177\252\252?\034]8\037\2752\257\277a\316\265-\237l\275?\207\217\275\033a\nl?\253\220q\023UB\272?^\331Q\021\261\205\272?\203=N\032h\223\264?\021\263\001RGy\302?\035\336q_\016\210\240\277\353\326Q&LP\254?\235v;?\350\200\251?(\\C4\260\221\266?\021\322{\254\336\266\262?\204sH\225!\301\255?0\230>\302\320m\270?\325qZ\302j\304m\277\302\244\220\025\020\033\266?\312\235*\303\336\342\264?+2\261.\253\006\256?t\316\\\233\0368\303?\255\001\r\340te|?vY?B<.\265?bj4\201n\244\267?\202\321\240\371\200f\254?\034i\030Zw\325\261?\240\243AI\002\206\256?}\313\210J\244\346\266?\250\026\225\375\210\031\266?\351\320!$\226\212\253?\003\363\244\r\006\245\276?\210\212\260bj+\261?\345\221\344^\005\035\261?,\353\3231\264(\266?\033\026\262\331\3421\223?\211\222:H\"\220\272?\316@\312\'\342/\300?\314\315\232\3146?\261?\3525a\356\237\026\254?\014F\333\347\347\274\267?\242\371\020\022q\214\244?c\n\253\270>\032\260?\204\304C\006\\\221\302?p`[\007S\t\237?J\264\271qX\010\242?\277,\314\306s\313\260?\261\371A(\262\200\300?X\303\250\030\245S\260?\203$\315\316\213\333\255? B;+\222\304\273?uf\t\322\217\375\250?L\226#\374<Z\205?>%.\232\252\210\222?\213\340\320r\330\261\262?p\315\260`\001\235\236\277\220\362\245M[w\205?T\2020}\320\257\262?\332\010u\245&@\264?\017y\335\270K\266\273?\300\372cMq\304\245?*\346\210\313\335&\244?\n\260\263\024\325\312\264?O?$Sp>\276?\017\0035354\266?\242\237\tJZ\274\225?\212^\253\334\302u\262?\256:\226j\253\001\257?\3713Y/\310\216\265?BR\246\371\2540z\277\205\357\007\200M}\267?%&\255\232\025A\300?\203\252\272\017\214x\267?\300\231\206K\010B\301?\253+vfH6\213?\264\326M\262\240s\264?\363NT\"\310\302\257?f\214\273\263\t?\270?\270\001yX\243|\262?\247\230\360<\322\217\247?\013\233\243\274\306\026\271?Q\224\261\305au\207\277\027\240\3035\244u\244?S\2702i\322\364\257?;\223\371\361\336k\271?-\201\376\274U\311\266?\362\036Xo\203\303\274?\354\321\220\373\232\010\273?\330\220\013\020\375A\265?=\326\037pC\335\230?\337\320\221\345\357\241\252?\242\371\277\312q\014\242?\"q\326z\233\013\225?\210\342\334\306i\377\245?u-}\217\312\262\260?z\256\323n\022\010\260?\264\317\276M\332/\272?\364\257z\372\347m\260?S}\034\n\365\255\253?\203\216ND\\\214\262?+\203\363tq\305\241?`e\261p9.\255?\374}\006\241\252,\260?\247\350\367\346\377\241\255?\025q\206W\234\256\274?!\374h\221\0356\262?\306\331\315\274\267J\241?\336\030e\252\0368\242?VK\225\2034\276\255?\022l$UP[\233\277\030\n\003\217\242\340\276?\247\300Z\231\026\223\273?\245\247\334\005\311\211\236?\241\320s\212\334s\266?\321IY\000\377\006\270?\213:\311\017\302\307s\277\036m\373\242-|\270?\325\002\275hvz\225?\315Z:\201\021}\254?\346\323\337\"b\220\266?)\tm_^\205\246?3=R^\332Y\257?\035H\261\270\014\363\261?\371M\025\027=s\277?n\253B\313\006\216\263?\324\227\221\271\263(\267\277Y6\357\017\306\025\230?\267\331 \337\032\342\252?\020Y\021&\246:\265?\t|C\2663\031\273?\227\n\001+Mk\270?q\226\234W\230e\235?$\210\300\177]G\260?\335\24212\177\007\260?\231\222\313\320\217\276\233?,\370\225P\277`\266?\251\027\242a6\243\252?+\010U\322\331\265\234?\324\241\274W\371Z\262?\223\002\255\356\310@\270?S\257\344\365#\357\203\277\024\016\272\r5\315\257?E\337\373 m\221\265?\030\300\177\346\270B\263?\322\361\226\200\237\276\272?\313\245\373}\"\366\247?\031\177\214\315O\360\277?\336x\031\363\252\366\301?\037xYl\303C\261?\265Jl\033\237\371\260?\203I\010\216\177*\204?\240\264\005\276\201M\251?X;\035\327\245\027\263?\007\021\241\370\316\273\257?(k\253\304\002\000\270?\027\344\265\262G\237\260?\2078\035\233\371\342v?Y\330\304\343Q\223\274\277\242\030D\227|[\254?\230\333\324x\235\030\264?v\353\0260j?\274?C\212d<\010\211\271?^\323\327\201\340\342\256?,l\255\377\330\303\300?\250\201\356\3446\216\222?\247<s<\212f\260\277\207\374\313\237\203o\272?\310\"\265\237x\r\273?82\217\374\301\300\300?\232AV\231$t\274?\222\352\330\224m\330\247?\321U\260I[\265\256?Q_\006\313\'\027\244?\215\247\350\277<\241\221\277\274_\370\315ls\262?q\300t{\305\252\264?qpwC\013\352\243?\020P\351y\232\300\261?\301\236\014\024\314\246\260?\004T\354\363\016s\263?X\250\276\276\231\302\276?Pp\031\206{$\300?\001\320\257M-\322\254?7\"\311\300\302\310\211\277\306\372M\373\3028\263?\001\244\255\177\024\313\220?<ij\244h\217\270?\236\026c0\344\260\247?\255+\"g\272\207\273?\244b\371y\247\020\265?\252V\214\336\234V\270?\325g\227\007\232c\267?\337Cf\207(\301\217\277c\020\336r\203\016\265?\251h\315\013\207\220\261?\301\251\337\352\330?\260?"
      }
    }
  }
}
node {
  name: "normalize_element/component_65"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "xx\266\344D}\261?e\016\n\311P\265\264\277\312\261\030\034\365u\276?\003=\021\032z\361i\277V\304]{n:\273?\025j\241\362\034\002\272?\217=\304\004\n|\265?\004\232\024\216<\252\301?\'1.s\277\345\254\277H\260i\214s\'\254?\344\032\033\221Z\356\245??\3666\332\312\373\261?\274\356\267\272\277!\251?\306\007\345\231q\374\247?s\305\263n\375 \265?\260j\362\217\034\273\244\277\377Y|\325\215\241\265?!\031\022\372\020\211\260?\006\357\343\034\000g\256?\340N\\mI\267\301?g \311\276\301\235_?;]P\276$>\263?j\335\265m\340\332\265?Z@\003\022\226v\253?\343\235\004\265f\313\261?\301\351%\022\301\302\261?E4\371\347\033\261\265?5\260\244\310\231\247\265?\234{\003$~\353\254?,\322\212\2206\345\272?\204>\322\214\267(\255?\203(\3602\351\r\256?6D\371\250\3354\261?l\250\365\327[e\206?9\200\203\230yb\270?1?t\227}\204\264?\372L\000BGR\254?\031R\032q\316v\254?\231\242O\360\274\360\262?\337(|-\035\260\242?\020\363\376\242xS\257?+\320\320:\010\214\300?^,?\202x\343\232?TC\016V\013\010\207?\326f\214\244\027\224\254?\234\204\235%r\010\277?\322W\014.\210\016\256?k^\177Yt\307\231?yb1E\024n\274?<!\246\ng3\261?\204\3520p\212\330\233\277\323Kx\201\023\203\220?5\364\354E\3669\254?\244\246\007Lz\364\245\277\367<\r\205\300\253d\277}:\315\353P\231\260?o\013p#`\322\262?!\327\203\322\342\317\267?1(\376\350\316%\240?\210\261$\367vv\242?p\255\245i\030\212\261?\307H\2573\251\224\272?\252\010\266\230?\251\244?j\322\376\353\002|\\\277\274\005\r[\205]\254?\263\222\027\030\000J\246?\034\031\256\205\216\332\264?&\177\346b\302\036\221\277\1772\313@\223\264\267?|\230U\211\306\033\266?]\344\311.KM\266?\241.\277\3049\031\274?)\3053\r/-\203\277\211\347\317+\\^\267?\254\322\336,\232\330\252?w\020R\357]\016\252?{c\032\343I\246\261?\200/\340\300?\000t?\254\267\245\214\272\001\276?\262\265\325\344\335\034\247\277\0355B\031\214\014\220?]\'\322VU\312\256?0p/\037\377;\263?\245\301\303m\232b\267?\264*\006kC\225\272?u\037>\270T\010\263?]\203=t\341\212\264?\244\340@\200\300\216\201?\304c\021S\272\245\250?dmQ;\003\360\201?\230\010\017+\300\235r?>\20408\374\316\241?\235\023\241/\302\266\251?r\247S\242\025\255\253?\306\273wbC(\264?@\221a\364`{\242?xZeC\212C\243?r@W\312N\031\246?\220W\215\026\201`\177?\223WT\265\276\367\254?\232\372/\306v\255\252?\255\304\331\000\256\\\250?:\021\377\333%$\274?\205\2669!\266\354\261?\336\330j\021|\314\234?h8m\337\006)\244?\351\206\333\336\304I\251?$\013\373\352h\244\271\277\264(\017\262\374\336\275?\214\373\316\260\312e\273?R\025\033?\311\'x?\014W\363[\3652\263?\036\223\275\214\377\016\266?J\307\007\003\360\313\250\277\2313\'\244?\370\266?\346dB\311m\306\210?\376\300\333\327\017\036\256?\035\005l-\352\030\263?\016\331k:5\251\226?\271\324\345\3558\340\255?\225\t\030\215\0273\261?\252\361\322Mb\220\273?\311\337\026\\\016\034\262?j\240W\016\275]\277\277\320h\304/iJ\224?0\300\231\363\3476\257?L\237\302\266\352\337\261?\301\371\266[\360t\277?o\355\310\201\354\257\275?v\273k\304$@\221?\215,\207\200\275n\256?\266\241\026\016z\362\255?\347\000xF\206\025\215?\215\357Dv\311\253\270?\332\263\373\026\034\254\243?-\207\333v\341\324u?u\277T}\370C\260?9\345\2637V\264\264?\030\212Z\353\242 \240\277\266\004\004f\312\366\252?\223\036K\3649D\251?\020\230p\260\203\277\261?YZ\212\007;\225\264?\216T\022\353\352\024\255?\312\352]\211.\022\275?\2008\r&\005#\304?\335\035\276\361Z.\260?\266P\372\216V\277\251?\023\036-\001\n\213 \277z\223 \010\002\367\247?\213\370\370\313\301H\262?\217m0\014\014d\260?$\014\226\371-\013\263?WY9\206\220\213\256?\000\267\274\254h\367t\277\214\221\304I\234@\302\277\020[\240\373w\037\252?\336\355=\006r\243\262?\325fx\3000\361\266?\274\262\236i\250\"\267?\270\006Lf\020\255\255?\327\313\366\356}\224\276?\321\332\237Q\333\0029?[pKS \215\272\277\375\025]\327b\311\272?\002t\014\206B\235\264?\351)\337$\347\363\276?\272\321\210\030\375\010\272?B\337}X\346\342\240?G\373\340\373iC\251?\355\3465\270\245\274\225?\n\210\273\ry\352\243\277\255*)\347\363 \262?\027\331\037?S\343\260?\214\236\351\222ba\243?\tA\002\327\371]\260?\364\345:\312\027m\253?A\025\222\'\244\220\262?\024\330x\275\357p\275?rDk\003\177\021\267?\365\314\322\033\334@\256?S/<R$/\236\277]U\005\211>6\261?\275Y\331\367\016\242\204\277\211\237\023\003\243\231\266?4\036\363\241\016\242\244?\001\010\260\254Z\360\275?\032[!\017\361M\265?\'\342\233\020\264\256\270?|\225L\263\030\363\271?;1\036\267\365Y\205\277I[Pp\225\315\261?$\377\037ihj\262?\207\323Q\'\003\264\247?"
      }
    }
  }
}
node {
  name: "normalize_element/component_66"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "`\242\266\027\025\224\247?;\212\217)\001\254\273\277\024%\005<\207\267\274?4\036\315\332k\026o\277\006\206\300R\334\277\267?d\373L\232_\375\263?\214{\216\360?w\262?\370]\321\340\310\031\300?\222\331\356XK\205\264\277\337]\253`\373\231\254?Q\374H\254\355o\244?\357Y\353L s\252?\237\361\330*\034\234\233?{Q\360Q\325\275\227?\276\033.\031\227\017\262?\202s\270\351\336\251\252\277\305[\313\212\377@\264?\t\242\230\003\327\361\244?\233\230\373\322E\004\261?\244\323A\376\2349\300?3\235\010\250\221\022\202\2771(\003\242\210\216\261?w/\205ti\335\266?y\304]\307\374\377\251?\026\215x\\\233\340\261?\267\330}_\rd\242?&\363/L\035\231\263?\361o\235m\3300\265?\322F\362\270O^\253?\023\206\243\331\254\342\266?{\3731\265\276\253\247?\226\322\250\312;\252\251?\244\267\245\371V0\252?A\333]\254\027_n?ncyxK\311\265?\361\223LI4S\252?n;:\234c\272\255?\307\035\377\235\236\213\252?\3449(O\3031\255?\203\371\332\034\257\214\242?x\371\037^\254\257\254?\350\\T\002\227\004\275?\303\300$\251\r\315\225?Kh\220W\'4g?\260\332\2560z\367\246?\234\201\020\027 \324\274?\177X\324\377\360\365\253?o.\335\250>%\223?\224-\244Y_\370\274?\251\201\266:\330\031\264?I\353\351\317\360\371\260\277\361\024\356l\372y\214?\251\335&\021\036\303\243?\306k\366\361\344\333\261\277\207O\322\255\353\330\177\277\177x\005\276|\224\251?tJY\351b\221\257?5@Z}$\216\263?\367m\3277o\035\225?\026\265a8\312\006\241?\"W$\005\232\370\252?cDm\336\342\250\266?\202\261[W\016%\245?Pd\253\240\251\244l\277j)\375\335k\243\243?(\221+\222\002M\244?o\356\342\017\2349\263?w]\205\265\255=\226\2774\213i\t\246X\267?(aU\246`Y\263?\350C\262\250\321)\265?C\031\330\232\025 \265?P\002\245\345c\036\237\277\214i\326\264\2631\270?\337\323S\346\021\234\243?uzHr\245\020[?\002\336\324\320\236|\257?\312Q_\032\257\016\241?\240R\350f\306u\277?r\001mM\350e\262\277C\254\26737\322^?\335\370\243@P\002\260?\007\023\344?[\t\250?\262[\357*\260\357\265?9.9\247\277\002\271?B\266\376&\254>\263?\366\327\213\236\344Y\263?\302.\307\201\020\366\201\277Q\362\035\016\250\275\246?\273\253B\366\206j\241\277L\367\325}I(\206\277\027}=\023%\027\235?e\002F\343\305\314\242?\371\022\331\360\274\240\253?\223g@\270`\373\260?J\317\277 \223\323\215?@\\X\210%\035\235?\243\037\335m\266p\235?\222c \014\222\367\203\277\322\306\251\207|X\252?-\nN\214K\246\244?\314\243\023\360\010\372\241?m\271[\333\331,\273?\"\361\263\020k\021\261?_jL\324G\352\227?Hh\233\200\376\371\243?r-%\216\346\017\245?\033\370\206\377\312\303\300\277~&\375\350\224\372\273?\\(\335\271\327\031\276?^\270\326\213_\200\206\277\214\037\273\357>\345\256?{\230\237\026\341\370\263?\364\251L\371\\b\260\277\250\267\234\321\252$\264?@\003\r\335\274\326]?\013\307\332|\257c\255?\267\031<\206\246p\257?\337\353\217#\342U\220?\3225\325\213\210\377\252?\007<\257\377\332\304\261?\236#ZA\277\256\270?\235v\211\316XR\257?\210\n\rx$T\304\2770\302\375H]\247[\277o\024r\010\311@\260?\345\350H3\270\333\254?f\273^t[\035\277?\335W\307\354\212k\275?\003l\257!\022gp?\356DZt\374a\255?\013\177\370\214S\223\253?3\027qgJ\336e\277\334E\000\206\321\353\272?\272EBV\025\354\235?\351\250T\235\226\236W?4\223\2305\353k\254?B\216\006 P^\263?|\2565\342i\374\252\277\262\243d~\335\005\246??\360\267\221@\360\231?\333!\252b\275\340\260?\322\373\262\363\267\266\262?a\033@\253\013\371\257?\273\215.\270\344\215\270?\0144\254\235\271+\303?I\217\346\225\331\212\256?\n\231\252\002U\246\240?\024\213.[*\360\203\277\302I\356>4\344\246?\220g\004\014\254\222\262?\200A!\356)\272\260?e-3\334\350\262\257?\325\250dY`*\253?\244J\343\003zb\217\277C^\261\264\303G\307\277IKR\2127\341\247?w\017\010(\230\247\261?\3609\224\307\361\310\261?\351\226U\214~\252\264?\275aE\207l\222\254?\025<\030\300z\255\274?Tk\374\352\363\026\240\277K\026\372\327\'\275\277\277\330\374\263w*\006\272?I%\327u\361|\256?`\246\2104sF\274?\255x\377,QN\262?Im\027\327NM\221?\250<\236\274\346Z\244?\3344A\312\013\215\222\277\337+\270\364od\261\277S\273\250\333\256\327\257?\276\r\016O\337\315\241?\261\275\220\272\017\323\242?_\365i\335RC\256?&G\324 \331\027\227?\370\230$\243\276\275\261?m\251\305\330\360\021\272?\373L\273m\346]\303?\220\360]M\025\301\255?\360<\235\235\237\361\252\277\031\222\010\227\322V\257?X\352\223\273S*\230\277\334Z\301\227\013\332\264?\222\346Zw\235T\241?\r\276=\303,X\300?\324\'=\374\312=\265?Bpn\251\t\366\267?FZ]`\354C\272?I N\365\236\251\207\277\006\246=\237\255\365\255?X\2555\\0-\247?#\231\003t\307\261\235?"
      }
    }
  }
}
node {
  name: "normalize_element/component_67"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "\032\306\022\023*\361\250?\014\352\254-t\331\301\277\310\342\224?3\026\271?\311n\231\345H\355I\2776\342\340\n\334\305\272?b\304\340\217\022\243\262?D\340}\222\221l\265?\317/\221\245\353\026\274?Y\227Z\274F5\272\277\220\246\000l\316.\255?\017\261@B4\275\244?T\333\205\232\254G\241?={\221}NI\177?\220oTF\332\310`\277\354\253}\312\311u\256?e4\362y\305S\247\277\253$\037\254\340f\262?B\207\005f\241w\214?JF\226\030@\202\263?\263d\337,]u\275?\365\233T\367r\346\223\277\210,\2066\366(\260?\247\'\316\177\177\262\271?\023cWb\2672\250?6W\024I\320\354\261?\306\314\304\310 \344\257?O\320\201@\302\013\261?\025\230\275\210\220\234\264?\016\352FK*\302\247?a\201\rZ\330\353\262?\212L0\004O\r\243?e\235\352\303\214\206\245?{\364\n4m9\243?\005\372\201\001=:i\277\n\372phH\027\263?\263\371\'\324\255\200\241?\305\267\003\267\346u\262?\343\260\243\215\375\016\247?=\005?\370\360/\245?\323\034!O\007\274\243?\333\034=7\232G\250?ad\030c\237\001\271?S\353(\307\227b\220?\335\232SM9\364P?F\2438\320\016{\241?\273\370\330\346\221\202\272?\211\003b\276.V\252?Y\246\205\351\200\306\232?Ad\330\373i0\275?\377B\224\321\366\037\265?4\347\331\337\353\201\272\277\327\177=)\n)\210?\331B#\347\343+\230?}i\214\001\3221\273\277\227\2164\026\037/\200\277\210V\347K\201b\240?c\242/\'\342Y\247?5MG\034\214\272\256?GH\344\210\243\025\205?\361Fo\203\235\014\237?\366\221LhA\021\242?I\305\217\311\223\270\262?s\245\202\260q\002\242?\331\rR%\007B\203?{I\240\027\247\207\226?:\273\025\277\262\235\241?\346\231\314\265\276\001\261?\264\360\355D\346\035\233\277\367\006\217\321br\266?\353+\361{\371o\262?\272\003\351 \267\370\263?\005s@\207\003e\254?Q\363\340\344:j\251\277)\302lSSJ\270?\352J\236\3075\371\226?\r.U\035\375%\251\277\267a\310uIX\252?Np\204!\177\244\264?W9\335G\250x\276?\262D7`/K\267\277]+\336\036=\253x\277\253\372U\263\340[\261?\204\361\352T\255\020\222?\t\364$\021c\027\262?\372\361K\210\257\262\267?\233\'\021\300Q\033\263?\263|\210\006\\\351\261?\211Z\206w:\t\240\277s(\016c|\337\244?\2665\262\303I\256\264\277\247\240O\242-\000\232\277\250\021e5~]\227?\236\277n\260\356Z\231?1\013id\302\365\254?\365\350\357\2407\347\257?_\224\301\315\271FQ\277\255\017?\215\350\217\232?4\345u\212v\221\215?*\332\221\364\2552\224\277e\345\234z\322\371\245?\003(v\317\342\016\235?\023Lj\245f\310\226?r\035\314\356\025\322\271?\254\321}\311^\240\257?c(C/\205\002\224?2\255\326T\331!\242?\240\266\217\332\231I\241?\261\207cN\261\331\300\277$\261\322\024i\261\271?\001\337&\t\255z\274?\303\326\263\272\261\255\234\277\212\250\233!\333M\247?\335NS\2629\332\261?+)\320W+;\256\277\311\273\215GU\205\260?\367\324zW\356\031\202\277.:kMy\310\252?\270r.y\307\037\251?\257\306\305\220\035\315\225?szXT6?\246?X\347\200s2\260\261?\313\313\336u\335\253\266?\313^\276\016\377]\251?\001s\215\314\2540\310\277\207\032U\353\234\035\231\277\024\306\007W\357Y\257?\025\r\010c\372\024\246?\037\220[\376\tO\274?\344W\256\342M1\271?\350\367\341F\350l\203\277\332]\264\210\247\245\254?#{k\375\200I\251?\360/}\r\2239\226\277\014\323a\377!o\274?\264\022X\330\2128\230?\025K\236\246\'\020<?v\010\363\211\002\236\250?\336\3136\235\210\361\261?\215>j<\246\250\262\277C\305\003\215CD\241?r\3002_\363\344\205?\254\271\004)v\t\260?\225~\343\347\226\210\256?}J\354\337\227(\260?\000/\2552\305/\263?\254]\367|\353\010\300?\343\231\007\030\254$\255?]l4ba\346\215?\300\311x\214\331/\223\277\233\317\344[R\307\245?e\367\337\250\347m\261?y\303_\216|\260\260?\210\353\331\362\030\205\253?\224\022\217\177\367r\247?\214d\212\227y;\232\277\"]MMk[\314\277\313\001b\342\364\315\245?M!\331!\323\341\260?D\272^\356!N\251?\316 6?\233(\262?\027\303\356\236\260\202\253?\322K\265\344+`\273?0\273,\310\304\035\262\277N\375w\325\347\220\300\277\225&\330\221\200W\270?8\234H\034\361\345\245?b]m\251\251\203\271?^\355\351i\016\260\261?\277\254\220\277\242\3053?\301l\235\340\344|\240?\202\245\265\307\335\260\261\277N\303\367\313\025\310\271\277s\353Y\003\240\371\251?\342\216N\225\243\213c?\223 fs\370K\242?\035\001\254\363G\317\253?~Au\355\267\350W\277\010\262\371\023\360\306\260?\365\034\211~\n\323\266?\264.Y\010\267$\262?\235H\230\270A,\254?:\364\253s\3539\264\277\220\220\017\347\322\331\254?5\236Y)<\034\234\277>\376\223>\3731\263?{\350\336jm\177\243?XJH\004\340\250\275?D\233\232\006p\363\264?\026\210\323\206\031S\266?r\304\260|\303\350\270?/\334QM]\272\220\277\250\000\265\244\3458\251?h\362o\3055&\262?7\364(\362\252\"\212?"
      }
    }
  }
}
node {
  name: "normalize_element/component_68"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "Iu\377-\010\262\254?\257DO\263\010\221\305\277\333*\3419\366\224\265?\251\021y\031e\000w?mz\260\302\266\020\270?c\202\037w?\336\253?\255\310\013\2208\311\264?\311\t\374\251=\341\267?Y\253\253?\0301\277\277\010\246\322\003\252u\255?\255E\2342]\246\245?\306\205$/B\343\221?\340\216\235\333wQ\203\277\177m\341\237p{|\277#\367\244\256\335\277\251?#\307\214\246i\006\240\277\310\317\251\330V\273\260?\2251\277Lt\223\211\277\272\331\357\356\240\220\265?\035Q\263\235ua\272?H\206u\023\027\250\234\277\006\236\016sh\342\255?&\214@\236X\005\275?\257y\234<Ao\246?\206\222\364)\372\325\261?\356\356\227\325\217\333\252?\3022R\311\342\371\254?B\247\357N\241\347\263?d!\322 \0313\245?\260p<\346\326\200\256?i\013\230X\312F\240?\032\2077\301\360w\242?\214\033\000oV\204\230?\275\026\231%\246\260\177\277\304*d\002\014\270\261?\261\037\016\204\367d\222?\245\026^\n\216\231\267?\274\226\300H\220\223\243?\021\220\212Z\365\024\232?\027\322\363\004H\210\245?^J7k\353\005\243?>\004*#\373\016\265?\271\226\204\234\333\252\206?\222\354A\243\234\261}\2775\202\3362\337u\231?\305=\022\006\3205\270?\207\304\257\353&\027\251?\376V>\r\020\263\234?D\033\326\rA\371\274??6\025\036>-\265?\314$i\205\211\t\271\277\271U\202XE\236\205?\017kn\250\277.\204?6\251\252\310\317c\302\277P\310\274\370\034\004\203\277h\261|\254\314\323\216?\241\207\000\376.\016\236?;\321\374\321:!\247?\260\272E\310\217\344Q?\323>\312F\357m\233?}\206&?\230\312\223?\201v\032x\324\351\255?m$\001Q\3158\235?\272\302\300\025~\340\234?|]Q\r\245=\200?\033M\361b\250]h?\276\305\341\321h\240\255?\247S\271\261\"h\242\277\225\3418#\\^\265?\016\234\335\241\373N\257?_\213RL\"\236\262?_\361g\207\3363\237?\301\252\342\334\022\370\260\277\211\262fM\364\305\267?-\354\253\243\221l\201?H\346\354\370\212I\271\2774\201C$\032\017\245?\324V6\275\325\204\236?\246\223\251\330Q\202\274?\032\016\312\202)M\272\277\304=J\260.*\216\277\"\242\245\346\003\346\262?\234f\271 \346\210\204\277\354\271\313\314l\332\263?m\02251ZP\266?R-,\374<\355\226?\262.\236\334\027\231\260?A\374\025\225\201\301\251\277\267Z9\021\203\024\243?\216\'\010r\336\354\274\277[\224\256\2406\230\243\277\373\214_\006\320\340\214?;\300h\226\321\266\214?E\325\264-\370\244\253?\260\331\2120W\234\257?\204\031\222\024\nq\212\277\201\212\330\227\324\037\235?\370qi9&D\232\277+y+\001\347{\232\277\233\235+\233P\300\241?\264\261\000\020\361\273\221?4/\330$w\214\202?YTfx#[\270?\363bz%=\312\254?\023\221\224\006\024p\221?n\222Y\234\265\004\240?r]\010\244\212\003\234?\273\362\325eck\277\277\233k\022h\"\177\267?\2349\233\303\362\275\274?\352}\"\320\022\304\246\277\206K\207\201\300`\240?\332\316\243TUw\257?Z\272\352P9e\247\277hz+@K\277\254?lMg\345f\321\222\277A-\\\017\214\247\247?\"\345\255\016\016c\243?_\242+%\214\345\240?\236\244f\000\211\325\236?\353\300K\006\006\344\261?\023\301\0179C\022\265?\224\340\027\333\307\261\243?e\207:\244\377B\311\277-}\246f(Q\231\277\2468\021t\351\234\255?\026\263\327\033\262\n\236?\tl\311\010z\270\272?\354K\340\035\263\310\263?|p\300\254%$\227\277`\242\247\354\347Y\254?\234\r\"\3477\253\266?\235+d]\305\252\246\277\340\035\222\272\232E\275?\252\376\326\210?\016\225?yF\273\007q\260\230\277\331\270\r\211\314s\245?\337l\205F6\253\254?G{\000\256\013\217\267\277C g\377\333\343\231?\255W\257\'\\\275Z?kD\005\216\321(\256?\266\202\343\210n#\247?\343\254\263\032E\350\257?8\265\376Y\235\343\252?sY\330\025+Q\270?\324F\354H2\001\254?Z\364\0070PEV\277C\204\032\346MC\233\277\221\247.\336d[\244?\201\376$9\276\310\244?\305\373\244\354\212\037\260?\025\354\262\244K\033\250?\244TK\005\330\361\243?\010\3620\020\253\017\242\277\216\212o\220_+\320\277(u\326bH2\244?S\272B\277\2716\260?f%\326w\270\374\235?\034\330\001B\2616\257?\374\323W\241\222\204\252?\"I9-\262\374\271?\354\007\344.\234M\273\277\031L\252Sqe\300\277\346\"\320\366nG\266?\272\330\264R\010\344\234?\241\377\033\004\350\272\266?\333\371\021\316\215:\251?\357\355\361\235\363\256\215\277\022i\377)s\370\230?\226\016W\200O)\276\277\021 M9\202\373\300\277\276)\005\r\230\350\245?A\217\014\312\030E}\277\233\243.\034\177\327\241?P\323\001%\022@\251?\322\214\376\375M\033\226\277\026\267P\200\310%\257?\245g\342l&\236\263?`h\265\215-n\263?uen\303\312\226\252?r\020wl9T\272\277\310x\030\203\034\316\252?\210\344\267*\201{\233\277\232\303F=jj\261?\261\261\277\252\202j\247?\205\227H\270|c\274?\026\370\023`\033\233\264?\303\2020\364\336Q\264?+\314\316\344\223\374\266?f\331\027\371\212\250\230\277\366E&\006\237\353\247?\215zy\033JV\261?\032z\252\224\265\205[\277"
      }
    }
  }
}
node {
  name: "normalize_element/component_69"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "\025\211b\"@\256\255?<F`IE\245\310\277\271jdxh\257\262?)\020C\231\260ws?\354.\336\374w^\267?\204\364\247\234\025\242\244?\020\205\265\202\275A\264?\241^\341>!$\264?\223\210\353v\310\235\301\277\216_\214\t\260\026\255?\221\232Z\334\235\272\246?\253\311:\2712\352r?\360V\211\276*3\227\277 F3\017\223\202\200\277Jw\344\003\223\377\243?\344Q\307\266NT\225\277\036=\307E\212\010\256?\231\273)\364\340?\241\277\n\226\"\255\274Z\266?\316\337p^\035\371\266?X\2724\336S\302\241\277\341\242N\321u\007\254?\303\363\202\352G\214\277?o\266\022\352\204\370\244?(\303Q\3572\216\261?\013Z\2461\352\362\250?\255o#\017\213\353\251?\024\256\211\375L\332\262?G\035\374H:\230\242?\347^\372s\336\272\250?\372\202/\257\320\305\234?\r\237\315\332\010\354\237?\177\374L\2155\373\212?\224\331\324\004G\205\206\277\352\022\352\366Mr\260?\2646\237\320q\211\201?\250\000\'\372\315\333\273?N?\272n\320\262\240?\250\330O\001[\036\206?\3651\003\273\270\222\247?\374\260*7[\275\232?\022e\213~\026F\261?\221S\200\2275\213\201?\272\336\262\032}\222\222\277\n\333\0038\263\031\224?\304\200q\345\366\017\266?\014\2261\330\351\024\250?\223\254e`T\272\232?\333\"\262\r\261\001\274?\364\017{\321\271\203\263?A\013v\264\213X\301\277\267\017\263v_\276\202?\261d\330rxR`\277&\206\354\325*\256\306\277\020\\\3644\261\327\207\277D\016\031\250\357\251z?L\217\265\245_9\216?\035\266\256J\202m\241?`H\332\317Z\270y\277\236_\246\203{\271\225?Y0\342\034$-u?\000-\235\334\335m\247?\250\n\326\320\267\031\223?\336\256\222\355N\007\246?P\310@1\301\217k\277\337I\234\371\373\343\240\2778\365?\310\313\375\251?L\273\306\236\245z\246\277\034D3\233<\357\263?\326\364\277\255\322\025\250?v\002<\227\031\036\261?\324\357\302\326l\345\205?\371\356c\300\352\254\264\277,\322\321e\302\023\266?\036\315z\371\351\264X\277\032Y*V\252\327\301\277\254\305\206\362.\254\240?\373\220\221\225ZM\201?:\233\351\271\340g\272?\327\372\'Z\347O\274\277\335\013\265n\317h\231\277\340\350\346\277`\347\263?\206\020\372\023A\016\240\277\370l\326F`\237\223?\005\204q\230\261\346\263?\000@b|\027=\252\277\231F\255\3375\260\256?\363\377\267MI\272\266\277*\203^\020uE\241?\314u\253\313O\010\301\277\317\234j7>\266\251\277\3242\221S\3553t?\321\220\361(\225\360t?\0337\203_\355\237\250?.r\037\036a\317\256?$\0304\030\026\350\226\277\025 \206-\2505\240?|cO\325\031\354\261\277}\211lx^P\240\277\002\006+I\374\\\233?\245\030_5H!~?q?\311\345\2132u?\334\363\374i\243\272\266?o\253\024\223\033k\252?%&\342\214\345\206\210?\\l\312}\301Z\234?>Mmv\222\027\227?W\204|\177l\332\274\277\351 \226j\362V\266?\261\207^\225\367\260\273?\2477\217\002\305A\256\277St}OG(\227?l\371gW8\201\253?\251\276\247\375\314\334\241\277\217b\023\250\344\355\247?\270\304\013\316RE\232\277\272\247\333t,8\244?\205\240\2679\024\214\234?dy\277 \325\357\244?\254\232\"\353i\272\220?\376B\246\264\262\010\255?\277\203\317q\226\333\263?(_,\263\330\213\236?B\010\351\2459\244\310\277\315\351$\356\300\037\221\277ko\355\315:\246\253?\\\367=\207\205\234\223?\232\337)\027<\342\270?db\225\000l\250\255?u\351\333Y&\211\241\277\332\317\275\342\004\001\251?X \257D\366\372\260?mD\276\270Ez\255\277\202/.P\260\321\273?\301x\316b\236\237\222?3\376;\252\263\275\253\277Q\237\257\034\313\002\243?\375\322\366=WL\245?\005\2015\321^\262\273\277\352]\301\330p\310\222?\302={\240\250{s\277j\317\336y\337\201\253?\\\326*\345\250\350\235?O\204?\211\360\253\253?\246\202MGG\014\245?\245=\363\254\203\007\262? \330\2165e\237\253?\034\252\357\035\261\355\213\277ZZ}\3358\025\241\277\260\311\032\365\020\215\242?\247\304\323\375,.\203?\342]\r\324R\016\256?\354\206=R\034\276\241?\342\332\213\223\273\002\241?wQ\301\317\"U\247\277#\023\244\335\336\321\321\277f\245\014\306\317\031\243?\301\235P\367\035\235\256?5\034\255\242\363\245\211?\245\303\304\230Tj\252?@\314\327\305j|\251?\260\353\337A(\371\267?\031\200C1D\321\300\277\223]\013\250\2477\300\277z\336~\332W\007\264?\221\362\344\261\236\016\221?\270\017\275\350\322\017\264?+\031r\377\240\024\242?I\n\260\270\315\216\231\2771?\317P\360\325\221?U}\002\266\360\355\302\277\346\030m\256\312\340\302\277&\374\236\315\264A\243?1\027w\327g;w\277\340\374\266\302\034\206\241?qk\262\026\004.\246?\374D\211\211\022\234\242\277\255\020\366\360\334\260\253?,\n\327}\251\232\260?\364{\356F\027\202\261?\344E\2264\2251\251?@q\370\213vh\277\277\323(}Q\035\323\247?\335\364vj\177~\233\277w\237%\300\227_\257?:\305\037O\017-\252?\221\257S\2306\035\273?\024\003\032(\315?\264?\005\336,\322\202\237\261?\n\374\244\204\247\252\264?\031\320\2740Z\306\241\277\2676\362\030\234\303\245?\221\367\n\0106y\261?\225%\303\274\2126\212\277"
      }
    }
  }
}
node {
  name: "normalize_element/component_70"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "\300\327\347\234e7\265?;!\377\302\256J\311?\003>\351\213W5\267?\226\342\214\\\225\226\277?\364(\253\325\226\273\277?\340\224\214x\277\305\274?!\274\3641J\220\261?A\355\364\331\272\001\274?zT\326\030o\211\226\277\354\033\220k\340\232\262?\224$\303\202\337,\262?z\">fV%\266?\t\316 \013\277>\253?\272kZ@\240\347\251?\251.\355\217\210\r\253?7\037\244\225\345e\201?\345yJ\2603#\304?\322\010Y\275\2234\262?\243\032\221P|\372\270?\346\334b\210\340\333\274?y/\032\331e]\255?6d\212\331\225\r\273?\212D\272\002~\313\270?\246\262#3\351\177\243?#\236p\237\352\312\234?5\036\2250\r\242\273?\330\322\265\214Z\265\257?\250x\233\270\316\037\271?\320a|\240.5\267?\332\255\334@\276\332\272?pr\205\230\307\361\267?\344\033\014\240\330\275\261?\303\325\367\235\003$\250?\352-\372\027\374\216\253?\331\372\r\006\343O\266?\237*\334{\203\362\274?\330\341x\326\037\365\267?\305l\006\016!\024\240?f\205d\371\241o\264?5r,\333\306\240\275?\\\204\004\272fZ\257?9-\\|(V\276?.\353zyl\221\254?\371\260\007(G\340\235?lV\374-\241\205\243?\033\347%\265\006\245\264?\213\255\216\206\315,\262?\345\314K\005\342c\266?7B\256\360\010\320\262?kU}t\013\331\247?TQ\376\346\254l\267?\023#\346\272r\273\251?\344\037\263<\332\373\260?\206\204\217\213\341\037\263?\346tfvn\276\261?\235\315\335\300zb\253?\223%\003\3301\302\254?\020\2650\265\354\343\305?\325)@(\260\177\264?\000\361\365\340\256\221\255?\020\0313\3422\211\264?\314\240\036\376A\364\264?f\3248x\177\354\262?\340\344\216i3\357\302?\203\007\274\202#\367\307?\362q3\375\216\270\263?}\343\2502E\346\253?\ty\351\230\206\360\230?3\333\013\210\355G\274?\256\267\276)[\r\257?@\307\351\0312\206\260?\220\316\235\271\267\275\260?\017cG\355\3022M?\244\213\243+>)\241?\224\204\273\350h\253\262?b\016sc){\233?\367P\0273\006\371\250?\215lQ\340I\375\270?\336\373\300\372\344\315\271?\002\013[\021\007\231\265?\201\014\333\036\326~\243?\372\024\322\252.\021\301?\275\262O#\324\334\260?\255\014)\2158g\247?\021\207\346\346\215\246\274?>\320\315\250@\000\253?\353\335\316\247V\253\251?q\226\023f:qb\277\336\222\027\367\361`\256?v\225\360\257\336\333\202\277\240G\340\235\351\026\260\277\206h\000\261\235\326\260?\016\361\257\350Mz\243?N\205\376]-d\264?\204\032D\277D\251\270?*w\033\253\3779\227?oL\233\346\'\231\271?\341%8\365\201\344\201\277\036\270\310\022\335\200m\277eg*\364\\\007\252?\333\201\022\035\004H\252?\024M5\355A\214\261?\247\010\354Asc\271?q\231\361\273\213\245\271?\365\315m*\241\247\260?\307a\320\014Y\022\251?\026\033D\202\341\020\253?T,r\340\271\235\300?}\3506lQ\"\270?\332v`T\340\321\263?[\301\275\322\374\250\257?-\355\343\207\233j\271?\324\204sa2\002\304?\344W\263\233\007\032\221?\231u\207\223\202\216\263?\214\307\332\031\205\250\244?\304\325;\273\000\244\266?\331{&8K\202\260?\255\361\030l\212\312\255?\341\035\314e$\364\237?\206p\307\371m\030\231?\2302\262\\\035\235\265?\207\230}\344\3672\300?\360\325\335(\361:\220?h\333O\027@0\263?\017G\2500\356\272\260?Z@\335J\363\352\277?\330\203\014\216\331,\300?.\252\262\340_\263\267?W\326\371a\313\305|?N\344B\030Qp\243?\323\rc\276\373\344\267?\036\357o\177\027~\256?\361\237,\204\356\365\253?\035\226E\342\227\332\275?\305\n\252R\"\245\246?p;\336+\215t\267?\251\014\312\321o\241\244?\002\213\255\264Mp\246\277\373\032|s\025\021\263?]*\374:\354\025\265?\306\343(\224\023\332\267?\230\360t|\356c\263?\230\275l;m\r\260?\210PL\256\307\234\277?Pg\034Z\314\236\305?\245\350\372\236\216P\266?\350\310\234\367\227\216\260?\020RM\317\017\261\253?A\206\337dS\342\262?Z\237\356\023rk\225?\031\235\r\250 \007\270?|o\355\363\001I\260?4S\'\216\246\364\245?\360L\r\331\345\000\254?\000#\351L:\307\201\277OL\273\361\036\002\274?\214d\016\320\035\307\244? -.\213\022\277\253?\311\001IETB\302?\331\240\304!\3729\272?Eu\027\201\341\367\257?+\203\230\273\376s\241?\t\276\030\263\355\000\251?8*D{M\363\270?Z\265\"l\243z\265?\245Q\007\315<&\242?\000\246(q\377\214\264?5\303\231\241\351\323\221?\361\242Q\257\313\330\262?\022\317o\036\242_p?\246Z\246\207\352\253\250\277\230\225I\264\264\270\250?\276\3507\273\321\241\266?\311\363g\337\337\227\266?\313\313_\366\362\210\260?\204_\277g\361P\243?}\027B\020\030R\260?<\024+\301\347\251\302?\371\314\020\311\273c\301?\373L\322\t\\\257\256?\003M:\2004R\235\277?2\200d\370W\263?E<:\367\034-\250?\032\316\021\006Y\247\245?C\0222\232\331\n\223?P\340\000\2475\025\303?h\317\3411n\360\306?\247m\347\356\177o\275?\212\1778E\320\343\262?\350\215jC\213\r\261?-\213x\241o\301\264?)\244Ay;\034\264?%jel/<\255?"
      }
    }
  }
}
node {
  name: "normalize_element/component_71"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "p\237s\274\244\337\266?i\343\033\031\312\032\305?\306D\0352\362m\265?\312<n\317^C\301?V9\262\307K\004\301?L\276\317tS\243\273?\376zq!\020\341\263?\353E\304\377\343\245\276?\304\003\031\3550\247u\277\254\333\371\256\243\322\265?gU\201\343\375{\263?\273 q{\301\250\266?\023\312\021\036\254\200\256?\204\330s{D\252\255?\302\027\303(J:\256?\020\216E\022>\r\222?\376\264&\035\262\257\305?\205\275\036\2065\231\262?<,\237\250\026X\266?#\2579\315#\373\276?\352\325\344Or\214\264?+\353C\206q\021\274?\320\322\243\026;\373\270?\207v\256%mu\244?\374KZ\n\253%\233?\032\300\363<\314\237\276?K\313\362\274\356\t\264?(\241\306M\245P\267?\252\233\370[\034D\267?\263\3058\366!,\272?\370\302\212q\003`\272?:n\211@\033\327\262?F-\273\312Tm\251?@\240Tw<\230\254?n\235)\2733\357\267?\326\017\034]\306\211\300?\034\373\236\000\246\346\275?\326\251_\332QK\243?\2733\243\267)\262\264?\017\027\225\3413j\300?\257\277\321\000qf\263?\335\35240\304\372\276?\r\322\n\016Z\010\254?\032i\203\365zU\252?\334\233\373\205\000\333\250?\330\370\206\241Y\002\267?5\2368\033Sy\263?<A5:\364\321\266?\317\221\350\2470\035\265?\235\271\243\331\036\270\244?\304\336^\256R\265\271?\034\260\234\236&\034\256?\351\240>\016\362\026\262?\270*\031\230\306C\261?\276\034\326Q^\366\264?\311\257k\360\310\234\253?{\002\313\213\370@\260?\014^\335y.\010\307?\273\004+w4\310\265?\3466\031\t\370+\253?:\177M\265\232\036\263?\366B\212\314\037}\266?\251\271\242\265\036\225\263?\2704\242\247\rv\304?\371pJ\362\274\221\310?\224\262\3326k\364\264?\265/\316O\331\377\260?}\367\330\247-\277\241?\2600\n\243\325 \276?D\346\355\257\356=\261?\224\027\020\217\001/\262?V\r\215\352\036 \263?\016\303\271\031}\353\220\277\353\202s\246\006#\244?\277\366\'Ls\006\264?\375\255XT\250\224\253?\372\333T\223\226\200\250?N\255\177V\347\270\272?\000\274O\237.\234\273?\2037\377\n\364\344\267?J\347\216\3014S\252?\032?x\340\250D\302?)F3\242\366\323\262?t\224o\365\035u\251?\021o+*\323\311\275?;\377\275\256;\352\255?\023W\303\265B\247\254?\210\005.\367\030\230|?\347\330S\010j\314\260?i\303\352Z><B?\223@\243\244\"v\254\277\020\365\343x\003!\265?\360hF\263pa\244?E\237\326\007n1\266?\032\231\323\247M\203\275?\201O\004U\311\036\232?\017\311\216b\300\337\273?\272s\313\210\267@\223\277\3427\2341\200{4?\247\"\207\033\377$\257?\002\337?\246M\206\254?\225wff\214\255\263?\002w\013\352|t\272?\311\350\246\353\216g\272?<E\353\001#\312\262?\273\311\276\027\236\030\253?\201\316\210\370\245\203\256?\210|\2515S\365\301?\344\356\205_p\241\272?<\261\354!\230\245\265?\\\265\245\355\343\221\256?\241\363\236\363\350\200\273?\000\236G\324*K\306?9n\ry\277b\231?\0027b\230\331\210\264?\033\225\207\304\276\026\255?\322^\233\222NR\267?\272\364*\220\253\241\262?a\265\307E\224\372\260?p\177\204\032\353\006\244?zj\002\000X\001\246?-\225\371?n\\\267?\267-\372\245\246f\300?\270\200\031Q\257\233\245?\313\t\010\035\334l\267?\205\326\213\355*.\264?4Y\016\272\245\321\302?\030\261T\271~\361\300?.871\0325\273?t_\207\227\3139}?2\223;{M`\250?\304{\205:\351S\273?(\223xK\002l\263?K\305\037u\326\317\253?\244\343\334\271?\375\276?\306\240\275ANt\252?\3400\"h\004O\270?.\222U\225\246\326\250?a\304>\001\024#\246\277p\251\001\205\245\372\264?\370@\266\"\355\243\270?2\370J\014A\017\273?\016\246O\025\315/\271?-v\306\272b\r\261?\000\226\2705\271\275\300?\036\r8/t\303\306?UxN\265Af\270?\276\343\232V\230+\261?\352\255\303\311\344\361\262?\035\240}\252\337\014\265?\234\217c\322|!\236?E\374\002\373ad\272?f\000.\034\226\363\261?F \255\035\004\236\246?\212[\344\"\347\022\260?T|\203\374Z\001\177\277\317\254\344\344\367\226\274?`q3:\362\320\244?\207t\376A\262m\260?\037\237#\001\2117\303?=\360\311t\374X\275?{W\031\232\246\340\261?\303^\213\212\366\200\247?\205]\315gd\003\260?\370\243\333$\234\234\272?\347\377\307\234v\027\267?\242m7\354\267\251\244?\266\245\'\217\033\274\265?\336y\204\310Y@\237?\304\362\354\224<\016\265?\2231\302\004\003Bz?\021\332\306-S\204\260\277\030\375\330\214\"W\256?R\314\266\335H\374\271?!\365*tV\362\265?\2247\365\276G\266\263?\0362\035\356\256\251\235?\314\2231_\332\307\261?\0069q7]V\303?\017\222\313\240V\350\302?\254\251\374\320\244\313\266?d!\036\257^J\217\277\222\220_wne\267?\322a\232\366\210)\255?\034\004Z\020\203\246\260?\241%%\303E|\226?|Fi\t\016|\307?\254|\205\273i\351\310?\004.b\264\233\024\300?\004\263\276XJ\\\265?\213\365\255\331A\332\260?\344qo\203|\376\267?\234\207/\355}%\266?\034\243\024+\245\022\260?"
      }
    }
  }
}
node {
  name: "normalize_element/component_72"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "A=\035\222\321\266\270?kB\227\306\350\246\305?\204C\2767\305\344\265?W\024\220\245\370\300\303?\021\334\253\003\336\021\302?q]\371x]\311\271?\275V&\"\032b\266?\025k2\217n\027\301?\247!\2457\256\017\217?\022\204\344\312\304 \271?>\363\220.\330\273\264?\301FnZ\344/\270?T\233V\017:\026\262?\2070\232o&!\261?\223\2665E\'\033\257?\026rL\346\275\t\224?I\236\014\nZ\363\305?\274\t\303\"\264U\262?\247\232^\004\273Q\266?\242d\303\261f\230\300?\2454\257\253H\323\266?\370\324GfI\016\276?\365\265E\321\267\020\272?>\007\335\370\357\316\245?h\221\355|?5\242?\331oX\340L\310\300?\217\033\312\305\"\312\265?Y\324\241\177\364\340\264?=\241\251g\331D\271?\252\363\323x\034\030\272?\322\225h\306+\333\274?\216\031\260\375\307\266\263?\306\002\277C\332\221\255?\327#\261\375\224\305\255?Hb\230\377\317b\272?\317\225\250\341\322f\300?\311\365\211\030\203\302\264?\256\227g\244,\343\246?\316\335\203\027J\024\265?|.7>\261\023\301?&\375\t\243cK\265?%X\211j+\245\277?\272B\326U\254\332\252?\021=\347vH\224\256?u\311\347\376\262\307\257?\204\331\200\337\361\263\270?\217uv\324\306H\265?\003\372\204\271\313h\267?\2339\335\337\304\003\267?\376V\217T\0173\256?\001Mz\233\333]\274?-\006\n\032\005Q\261?\314\t\216V\2532\263?\307}\275X\236[\257?/\366\330B\002\331\264?R \232\026H\222\254?%\026\257\264\267T\262?\242g/\262\317)\310?bW\002E\006\033\266?\222q\357\216J\271\257?9<\342b\325\270\261?\266\256\342\236\370{\271?\361G\344\312\277\347\266?\013\021\034\t\307\373\305?\222\252b4o8\311?\220\350\342\222\212\026\266?\327\230\264\002s\217\264?+\231@jC`\247?]\334\203f\220\350\276?|&\027=\231z\263?\230\262i+J\027\264?#\016\237\2250\252\265?\205\316\214\372\373\367\240\277\0210v\237<\\\246?a\317\324t\010_\266?\330u\216R \353\262?Ke\364\035\250\305\251?g\236\255\232\0373\275?\257n\006\311L3\275?>{\320\341\221\340\272?\355{2\321\260\260\260?\311{\271uU%\303?\236\315\354\353\247\234\264?YEf\313E\276\253?\265\247|\271c\362\277?Ca\224\303\316d\261?\331\331\215\307\327a\260?\235\246\263\271\210\364\221?]\323V\001\313\205\262?D\034\372\rdT\205?\200\271\317W\264,\244\277\205lV\006\240\224\266?I\356K^\3469\245?\227w0\275X\363\267?-\023v8W`\301?Hn\345\326\270\277\233?\337\210\310\2224]\276?R\236\365\000H3\235?\262t\032v\323\276u?m\216\001F\210\014\263?)*/\272;\271\255?0\317\311\331\333\260\265?$\017N\210\3343\275?\315\313\032\"\222\224\273?\252\224\035i\020\351\264?\254\242G\245;\374\254?(\337,X\274n\260?\354#\"\302\340V\303?\342CV\245\227\022\275?\354p\026$\355.\267?\303\350uh\261\304\262?jp\327\"\324R\275?\243\346\362\271\357\245\307?\026\310\000\021aJ\241?\371\017\366\341\261\203\265?r\331\324\270\270?\250?\210\234r\020jB\270?yn\222\000\344\355\264?\177\224\035\212\036R\263?\336e\204\214\207\304\247?\227\0262\255\006\216\255?\237#M\027\275\256\270?F_\312\213\017\335\300?\\5\002\003\236\272\261?\212\227(\364Z\206\270?\307\266\036\033\007\262\267?y;\372\023 @\302?\307\245\"\374(\366\301?\341\033\177\254$U\276?8q\254j\315\177\205?\313\ns\362\212\366\255?\346\335VO\355\331\276?\223U<\356\216\236\264?Ve\005\335c\213\264?\274LJ\312\250\365\276?\232\223\301\230\307v\256?\230\331$\225\342\020\272?I\372`\213p\242\255?\345\030\240\237o,\204?FfL\306\323 \267?\335f\314R\"\361\271?\356~\003\375\377\344\273?,\007\311\356A\t\274?a\371\235m\010j\261?\t)\252D\372\251\301?h@\004\357\300M\310?\365(\006\217\t\215\271?\236nn\206\372a\261?\200\363\301\266n\230\265?\315\n\361\272\021%\267?\373\033\252\345\253=\245?\355Z\226=v\010\274?\337\352\255?\221\300\263?<\n\n\225\025I\247?\321+\301\211\270\236\262?\000\320$[\244#e\277\241]\312h\000\311\273?T\270\377w-\351\246?^\313\376UT\270\262?[XS3M\223\303?\337j0\034\356\264\301?F\300\327\306\216\374\264?\374!\226\312d\003\256?z\370j\373\342\310\263?,\035P\217\235\322\274?\227\237I\322\235v\267?\247[*\3729A\261?o?/\310\325\311\266?\257\220u\025\2536\241?\344\247\241\250\224\240\267?s\310uo\037\233\207?\334]\305\264\377\231\253\277\030\036\027\257[\377\261?\264S9\0168\"\275?![3\205\020\010\266? N\324\220\3008\265?M\321\357\315\377C\240?\034A\377D2R\263?\312\272\250\253u\001\304?\023\341\202\023\241\266\303?\342F\0164F;\273?\247Z\'\010\000\211d?\366C\222w\023\236\272?\253\340\217Y\370%\257?\030\252\322~\272m\264?\236\017*\314\326U\232?\364q\310a\213\270\307?\355\207\3136\337d\312?tp \214\356\214\301?`\010R\214\240\357\267?X\223\363:\354\002\270?\016\326\372\200\022\257\272?\004\2726!\233N\270?\332\336\253\254&\265\261?"
      }
    }
  }
}
node {
  name: "normalize_element/component_73"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "hW\r\001A\262\272?\n\221\246Vl\207\310?\227Z\335T\036\211\270?\3539\031\267\371\010\307?\340\032\211\344\354\034\303?\205\3059\316\223\t\270?b\032\007\020\236\006\271?\355\256\363<\246\030\303?Y\232\257 :\365\242?\330\321\226E\361B\274?{\300*\201\016\037\266?\024SB\340\343t\272?p\270\265\243=\200\265?\364E\262\257\213\216\263?\331NY\"W\267\256?h\314\226?\356A\221?\\\273\323\356n]\305?e\202L\370\306\014\262?V\0274P\300F\270?\362LD\314\340\300\301?\321\244YH\334\275\266?\225\375]\031\000\\\300?\016\263\0214\330\347\273?<\254\325\366-u\247?\264t\351\205Ym\252?\n\376G>`2\302?j\312\227\025_\364\265?VW\330\350\251\311\262?\245\\\000k\354J\274?\371\002\"\340\352\342\272?\214\224\264\202\251]\277?<\006\255\205.h\264?\247\272W\030\350\373\261?.i\212\325&\033\257?\344\230\355\211\374\032\275?h\t\324\220(\234\275?2\306\020\313)\253\272?\352\260q\346\037\311\252?h\211\276P\372\241\265?\210w~&\002\"\301?\211x\220Ci\024\266?\030v9\241\347A\300?\212=w,\375\036\252?\312\021:\001\260\256\256?\362j\225m\233\272\263?D\272\375\304\221\037\272?\177\233\3755\344\225\267?4p\313=\340^\270?\'\350\231\330(\335\270?\212b\243\300\3033\270?d(\025\367\231_\277?\312\240T\247u\256\263? \201\346C\265`\264?\224A\270y\030\227\255?\230\335!2\235\267\262?t\030\364\'\357\270\255?\251\311\216\270\300\230\264?\202:\250nuS\311?\024Ai\226n\014\266?\177T(\2525O\265?\003J\006**\265\260?\260j4\254\356\200\275?To$\010\0132\271?\337\230\034yKr\307?j\037\0072\366\366\311?\016\003\276$\223(\267?/\351v\226#[\270?\013\200G\r\323\342\254?{\320\225\003\233E\277?S\337\253\266\230(\266?\353\024\307[\220(\266?O\264\013\003\037N\270?\274\334]\3604\\\247\277$\302$4\000V\250?<\215e\016\nI\272?\320Zv-\306\345\266?\016\324\304c\210a\254?\317<7o\307\024\300?\337\000\000\356\034\304\276?\241\222=\271\333\262\276?\235PP\326\3443\264?\346\304L\022\263\355\303?\206\242\340,\234Y\266?\3373.\366@&\256?M\305Q\257\027g\301?3\354-nn\217\264?d\204\246\333\310\253\262?l\244[e\\\'\236?z0x\204\022g\264?\203\275\177\257\305\307\225?\314z\\\024p\341\220\277%8(s\211)\266?\226Z\013\215\t,\246?\2275\031\244\314\305\271?\232t\257!\245\n\304?\200\017\373\220\371x\235?\037\003G<\270\177\300?\360G\342\311\224-G?qh\311\227\333\263\206?\215\274N\030\004\276\266?\246\026\361m_\337\256?\033Z\251\017@\304\267?j\363A\307\365\214\300?A\027\223R^\030\275?]\177\262,\017\007\267?\375\356\275\302\371\t\257?\221i\334\2674`\261?~\270\014\201!\300\304?\362\310\272\340U\324\277?\332X\337y\017\273\270?\026\307S\037\340\372\267?\254\323\033\312]\277\276?\266\213;n\220\372\310?\305P\356A\177\326\245?\007\350T\2709\243\266?k\341\320`\365u\263?\241j)]P\230\271?$\001&M\334Z\267?\273\305\3063\235\332\265?\365^Y\302\nR\253?\367\357\200\006)\345\261?,x\t\002\357\332\271?2\354\2474\237\211\301?\007us\354\376\003\270?\307k\344\016)s\267?H\320y<\026#\273?\303\217l\331\032\304\276?\324\331\335\304\017\034\303?\233%}1\306\215\300?=A\305\3456\351\221?+:C\205\253\002\262?\361t|\356\343,\301?Y\242\251Z\257\302\263?\035\264\233<\014\375\275?\035\261\227\037\030=\276?\033Yd\0014F\261?\304\365Kk\243\237\274?\230\323\366\223W\205\261?\201\261\351\001&\202\257?\003\364\315\306\342h\271?\365+\264\253D\344\271?fR\202\177\303$\273?\237?\344bI\217\274?mz\333B\023\205\261?\032\312`\367\343\227\302?\322\331\246\321\024\034\312?\356\003?\223\305I\272?\037\341e\232q\231\261?\002~\275]W\225\266?\307\235`l\022\035\271?\036IV9E+\252?\177\3128\023\301\"\275?\226Q\246}\345\324\265?#F\341\0200\016\250??\276\323P\342t\265?\341\217\204x\202\317w?\242\207N\215\237_\272?h.\303\301\326S\252?\rqIa \000\265?V\r%\007\252\216\303?\302\344*<\206L\305?\375\310\252\221(\367\270?\263\374\230\215\320z\262?\025\365&\337\234\254\267?\237\276m\277\337\334\276?\227\002\322\376\007X\267?\371\356\264\007\352\254\260?\360\273\230O\036\342\267?<\224\3049\272\257\241?\227)U\276A]\272?h_\244\020\373\026\225?\252ZQ\321\370\210\233\277\266\207\023Qy\337\264?XVD\224\311\005\300?\357i\230\353~\337\266?D\021,\360\020\244\265?\204LyG\242\244\244?\332k\2205b\347\264?|\002\230\232S\265\304?U\266\027\352\023\355\303?\r2iV-\036\276?\263J\014\251r?\227?\016sc){\023\275?\272\035c\354Y\027\257?H\360\022\336\026\023\267?\004>\346\323\310\206\236?H\037\273W\"\332\305?t\272\250\355\221S\313?\370w\210\017\204\025\303?\023SE\230r\243\272?v\007~B\340B\300?\235\263\342t\302\346\274?\362\222\021\255\233\246\272?\331\364rh)\212\263?"
      }
    }
  }
}
node {
  name: "normalize_element/component_74"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "a)\206<f\306\274?\243Rp\241\300\365\311?\377%K\333/\207\274?\020\361\261\351x\364\312?\317\234N\342\016<\304?\250a\004\3746\236\267?\264\253\315U\254\307\273?p\177\366o\323)\305?\003\340+\374\021m\256?\3464\234\026\342/\277?M\002>\271RA\270?\353\373\221\236\371\007\275?\331\234U/W\360\270?\221-&\221\330\311\265?8-\277\246\343>\256?mA\267\343\302\213\212?\240\033\30520\204\304?\3048\262\004\257\034\262?\273\014\033?6\304\272?\250\3407X\024\003\303?\240\343\267\251\000\346\267?B\006\302\263\334\320\301?\331\313?\3054}\275?\256\001\230\322\375\023\251?\322\2333\235\373}\261?T\243\350e:\222\303?Ic^\216\361\275\265?\365K\025\243\346_\261?\325l\222\335\324\331\276?\362\001\257\006\220p\274?\313\003Q*\363\354\300?\216\243b1$\006\265?\376X\002\325\261\335\265?\007F\344\017\224H\260?E\0344\271\355\002\277?\261\242\321\340`\266\271?0Z\2557]\333\270?\217\357\275\205\226\361\256?\013\351N\202\307O\266?\223\267\332\305_\023\301?#\340\364T\245\262\266?\324\240:\346\324\277\300?\236\335\243\374yZ\251?rJ}\257\332b\257?|\330}ZT\252\267?\271:5\324~\244\273?\350A\375\013]9\272?T\264\225>D\210\271?\232\260\017HH\370\272?\322\372\264\2727g\301?\302\361h\"\355x\302?\212w\374\356\210P\266?\021n\305\r\336\250\265?\232\350\337m_\271\255?C\377\331\226\316u\260?\336)\020\202\375\363\255?\242\031zz[\037\267?g<\310\355\302\217\312?\000\237i\323\"\354\265?L#\211\005\216\351\273?\244\010>@\326W\260?\275\241NK<\370\300?A\215\352\220u\032\273?\371dI\251\031\314\310?\017\304\264\232n\314\312?\243ku%A9\270?\330\224\306\220\345\"\274?\035\t\205\037\324\371\260?\307j\346\325\250\243\277?y}\270td\026\271?\223\2376\245\032H\270?\\\313\253\r*\376\272?\316\300|=UA\252\277\005\204\350\246Sr\252?\224\037?\273FB\271?8F\357\252\300\366\272?\023\r\006b\317Z\257??VA#\020\243\301?\270\221E\251\2434\300?\312S\363\250:\334\301?\242L\010\365\253\273\267?\357\3417*\334\327\304?\344\"\rZ\207$\270?G5\364h\rR\260?O\"{\352|\353\302?\022\24173\377\n\270?\372\302\020\253\322\245\260?b\226Ez\264\345\245?\035\322\0103\366p\266?\034Y\304s`\200\241?\324\276D\262\003\213\204?i\026^\005\325_\265?\305\215\024\367C_\247?\357\256\304MW\301\273?j\250\017,`\245\306?\252.\255t\341\201\231?\372}\026\203;\333\301?\336\227\257\242qn\204?\206\3709\236\314\310\221?\254\313\361V\322\224\271?\243\240\336\003\251Q\260?\325\300\347k\274\022\272?\222W.\356\033l\277?k\2677\241\013\310\276?\257\331_\260\372\'\271?\265\366/*X\314\260?\252\332\236\273\205w\262?\256]\306\214q7\306?\353\212\247\213\005_\301?j\032#\3700\222\272?xT\360ls\211\273?1o\003\256\223\t\300?S\305;]i\333\313?\251p/)q/\252??\217\271\201\356\n\270?\251S\273\262M\"\265?\240\304\027\210\306\\\273?c\326-0\233\350\271?(\351\224Y\032~\270?\364\250N\300\334\022\257?\225\210\302\367\226\243\264?\312@\335\301\001\r\273?\225\340[\370\3041\302?\377\222kB\016\325\275?\0238\370\023\254\251\265?gg\224\330\374\222\276?\367\210\274\330\300\305\267?G\3624\027\272=\304?\323(\006C{\007\302?\306\233\331\007\211O\234?\nG\024\203U/\265?\031\345\304\027 \343\302?\230-\323\333\021a\262?\222=\354\314\327\001\302?\324\271\303\242\371N\275?d\326\2030TQ\263?\035\246\253\253j\230\277?\031\377ic\037v\264?\025\037\360\327\2347\261?\2136\307\271M\270\273?.\260H\305_\220\271?\331\204N\344V\374\271?\331o\324\247\250<\274?H\034)\220\026=\260?5\354dai\217\303?\323k\343\352(P\306?p\262\010#\310Q\273?;\030\242$\323\n\262?\\M\234\261ot\267?A\3051\305.g\272?\325q{\320S\347\250?t\367\006M\265\020\276?\021\364\\N%\335\267?n\270F\006\344\013\251?\027`1\200v[\270?A\3519Y\322\240|?\365n;S9\004\277?pq\\\337\352\255\256?\235\202\340\027\265\200\267??\360\354\203\020v\303?~\326q\006\303\034\311?\007\213\372\214ZM\275?=\231)\364\2241\266?{u\273\202`\232\273?\202\256\304\326H\237\300?\367.\345I\300R\267?\035H\315\r<-\265?P\235N\177\344@\271?C\265\271\030\240\300\245?\335\321\350\326\267\010\275?\300ke\374\332~\245?T\205\205\341\303\357\231?\271\314y^\333\357\267?\264eB\221\303g\301?\271/~R\241E\270?\346\025\020\331\216\311\265?d\220\254\335%Z\247?\013b\204\0260\206\266?\340}%\365=a\305?]8f\222\276\264\303?{\020e\034\341\374\300?\234y\031\22595\246?a\264\207\360A%\300?9\r\344\350\020\211\256?\026\037\336\364\340N\272?\200\010XHL\222\241?\321\343\355\304\211\010\306?\211\302RP\226\311\314?\362\"\004\305>\252\304?\300\240\323\223\374\177\275?n\332\\\232\372w\301?2\222\320\245\236\326\276?zs_\2363A\275?\3508\027|#\205\265?"
      }
    }
  }
}
node {
  name: "normalize_element/component_75"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "\220M\265\300e\350\276?\371\201\241\312\r\237\312?\305C6\225\347/\301?\347M\0208\274g\316?\234\005\242s\363\227\305?\207\310\007BT\017\271?\250\207T\220 \216\276?x\337cv7\313\306?\323)\004|\373\226\263?\356\3701\021/\002\301?\333\231\014>\002\274\272?\254_\266\213\323\212\277?\344O\366\304\252)\273?z\367\210\027\222\263\267?\370\3776`\227\256\257?\375R\237\341V\014\212?\244\353\217\036)\034\304?\353k\225\024\343\362\263?F)L\330\261#\275?7\332A\212\331I\304?L\337\214\026wn\271?\270\\\346<\257-\303?\263N\215~\321\361\276?j\341\003R\232\201\252?\330\240\314\222B\321\265?U\214(*q\326\304?\311~/\3501\210\266?\357\315\360\030~m\263?\376?\031\246`\324\300?*\366\232\225\"\266\277?\007\226\322\034!O\302?d\234)\356$\224\265?/\364y\246F\321\271?d\271&V\246\025\261?\267b\010\313\233\255\300?\310n_:\277>\267?\n\312S\247\032\365\272?8S\024\364\206\227\261?i\276xva:\267?6`\324\021gU\301?\264\232\016\232\346h\270?\312\025\251\363R\270\301?F\252\205\030\003y\253?S\341\213\323i\r\261?)\375\323\371/\221\273?\235\341\274\356c;\276?\312^Y\343\030;\275?\235\027\262\260c\000\273?Q3\372\212\233>\276?(2\032\311\203\014\306?\305\013\020o\027\306\304?+%\025\327BZ\271?\322\324\253\373\331%\267?\023\205^\313\240d\260?O5\371\264*\214\257?}\2445\304\200>\256?\337\255\0255\344\224\271?\013\356N\021\274\356\313?\212\\\027N7\250\267?-\314\361\363\247Y\301?&f\360\to\025\261?\277\014^\245\317\017\303?\236\330;\212\020\252\274?\244q\335\321U3\312?!\014/\315\034\256\313?\374Q2\013}H\271?*B\335L\364\225\277?$\014\233\262\347\363\262?\204[g\021\304\030\301?\243\357\357\345\236+\274?I\244[\031\316a\272?ZU\006@\242\252\275?l\361\034\326\303\263\247\2772\245-bcT\256?\364o\350D\272S\265?\027\327\225\";g\276?\232.\r\301F\031\261?\207v\215\027\204\022\303?D\234\344\3155Z\301?\376\376*F\261j\304?\004\030\0371=\013\273?h\203y\263\371D\306?\214\031A`n\302\272?\241-Y\250Dx\261?R\272\010\0240H\304?\240\306\343\300\260\236\273?\245-<\234\261I\264?\001\275\330\3127\032\255?\242l\321\317\302\210\270?\377\215)\227G\260\251?\242N\336\237\tO\242?\207\265\271\260\274K\265?\246\303\267nR\352\250?\254\376TQ\306\274\275?\201E\365\013\263\346\310?\265\245\270\361\301G\242?\014\246\236[\2415\303?8\304\330?\330\364\235?kT\003t/\225\230?\2166Yf\273\t\274?z\215\305\205\357<\261?\2467\241\345\200\252\274?\252\346\026\023\313\310\303?\260!\252\203\313I\300?\213\246<\205\037F\273??\010\255\371\204{\262?\225A\234$\351\\\264?,\243\027\t\373\243\307?\033\025+\257\004n\303?\343\212\206\352\270*\275?\024x\374\036\302\346\275?\034\201\214A\246\303\300?\354Sw-m-\317?m\031\323\300MN\255?\356\235\277si\250\271?\025\207\250\314\021\325\267?2\246\235\360\313\306\275?5t\2200<\221\274?\374s\"\330\360(\273?^\020\233\014\352\202\261?\244f834}\267?\235\2550;\223O\275?\214hp\230\276\320\302?\372\037!I\227\236\277?2tT\204\207\250\264?D\220\302v\251\361\300?\250b\220\337\316\312\262?\374\340Qj\3740\305?\233\334\374z\026(\303?\266\024\266\275\342K\244?e!\220\004Gm\270?\204R\036W\317{\304?\276`\254y\322e\261?*\005\177\355\320\330\303?\314J\327o\315\355\274?%\324\234T\345\017\265?\241.\207\032\333d\301?:\360\372dv\252\267?\253\017\204aI\004\261?Y@\345\273;\002\276?\221\271\317}{\317\272?\257_\272\215)\177\271?]P\271k\004@\273?\013\032\315\2460*\261?h\223:6?\224\304?>\263\267\243\036\363\312?g*\357\243Mg\275?\022\216\034\223\014\323\263?\017\303(\267\326\337\270?\275\343\375\200S\024\273?\214\024\365B4\314\245?\336\355\344M*\014\277?n\365\210\020\330\316\271?\256\202dv /\252?A\242\246\351\365\037\273?b\353h\010\006\221\212?\357*\350\031\242Z\274?\351\216\332\321\363\177\261?\335jf\305!\257\272?!`)\242\221\225\303?r/\005\253\267\264\313?V\354%I\264\275\300?\025\321?Y\342\025\272?\036\006\210\274\304\\\277?>\303\236\355\006\316\301?\005/\353\337\244R\271?MD\016\375R@\271?\006&\0314R\301\272?(xG\034k\254\252?\327\211^U\334\211\277?\351/\306P\346\320\255?\216\335\204\311\364\316\265?5\247\254U\244\n\273?k\n\355gt\261\302?\234\036\225\024\270\362\272?h\333.\tW\215\266?8E=\000\206>\251?\324C{\217\017\007\270?_Z\026D\213\311\305?Q\221\3716\263\314\303?\333\272\243\030\203\373\302?IF\304P+\245\257?\337N\333\3543\232\301?\346|\312\224\203\227\256?\257\177\225K\374\264\275?byP\203{\373\243?\237\363\300\2705\230\305? \3735f\315\240\316?d\312\330\347i4\306?M\243\037\306\321@\300?\267C\230\342wA\301?\227\031x\346\314S\300?C.\250\327|\010\300?<b,\207\241\313\267?"
      }
    }
  }
}
node {
  name: "normalize_element/component_76"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "\322q|\207\267[\275?\310w\236\202@\232\351?\344\036n.\316=\305?\307F\244\226{;\324?=\\\354\242Z\327\267?\350\302\352\275hw\274?\010\254\240\222\010\007\300?\213L\017\366ej\306?\240\363\367\2530\270\333?\2703\033}/2\300?\nJ\212\3651\022\270?\341\003s\250jx\312?C\r\334\n,\003\316?\301\373E1\302\031\303?$J\367J\213\200\313?\013\2638\262\336G\322?\361Vw\333nJ\306?\242\262\357\367|\256\307?M\030\261u\307g\276?\270d}Li\222\302?,\'\227\202\022\277\303?\237\324H_\311T\266?\"\251\246\240\262\314\275?\372\350\002\316\272\025\261?\327Eq\221\362H\273?)\016h5\231{\267?\313\272\354\310r\001\304?\263\314_ws\236\264?\343z\312 -\204\253?\336,\334\364\222?\277?}\344\302\300\364o\247?\3077<\006)\315\276?\321L2\235\226\222\305?\020~\022:\020\273\321?\372\356\242$.\004\300?\2170:\220]x\305?\343\300{\254\270\357\277?\314\001\253\270\2536\301?P\013\322J)\001\314?\2572\t\315d\256\301?aZ\314\266pl\312?\275\253\002\333\337\336\304?\016\231*\314\006\017\313?\310p\031\220\355W\311?\276\003\277\352!\312\266?G\014\361\376.b\301?\231\371\260\014\341\000\271?\201\327\265]kf\304?>\371!Z\036\260\255?\363\017\021\355\031x\305?\375\354\376\263\021h\327?\034{\373\025`O\316?sI\034L\237\312\321?7[\263t\211\363\333?^\367\213\026\366-\303?\313U\347\251\362c\274?\267\204\213\373\340\023\276?<7\261\343f\010\264?\323\347\2118\264@\306?\362Qei\276\302\310?\333\307o\251\001E\300?\027U\022\033$\353\310?\356#\226\030\364\263\302?)\332\340:\202\230\322?\266\345\204Ry\320\324?\253\210!\331&L\312?\177g ;\024\352\301?\021\317\342*\356\366\312?-\356\254\316Kt\313?\3463\037^w}\301?Y\345\261\202\271\177\304?uY\000\336\370\226\275?\214;1-\342\"\336?8\\7\347\330(\305?\267{m\301H\353\271?@U1\007\324\n\327?-\3333\275W\374\300?\245\277\2414\3677\312?\017\257\2013L{\273?\013Xp\024`E\325?K,5\352=\017\321?wl\302\305\2437\303?Z\240.i\304\200\321?\024Z\200\375\252\370\302?\333\257\361O_\005\305?oM\\\274\217\313\310?/\352\002z\273\207\273?\026\311k\346\017T\310?\'\2507\\\021\340\307?\373\345G\207}\356\342?\340\t-S\3426\345?\273\207\005p\023k\306?\\\036\262\033\222\'\320?4\352\010}<v\307?\026U\202o\341\023\264?\245\215\365\235\3670\315?j\301j\260\231\021\204?\226\360!4\304)\321?KE\005|\356l\326?\356h\344?\031m\306?#\216\n\326\027\355\320?A\013\372\354/\244\257?\004\007\242\221I2\314?\225P9\247\013\021\264??\360c\222\262A\313?/WX\323i\233\267?\024_\"\033\236\027\276?D\241\247\371\021\034\327?\273jp\353\006\273\270?\201\013\010f\262#\270?`\237\323\010\nw\317?\370\273\361\232\311\n\301?\357\200\030\014\241O\300?\301\345#\274LS\323?\2117\315c\026\237\274?D\220\377\331\301\316\310?7\016\224\222 \007\303?\2537h\204\276\201\303?_\004\002\247\273\016\306?v\315o\216\366\\\313?u\214\257f2\366\322?\333\234\0010\311A\266?;\250\277\274\322\002\302?\017V\003\227>i\340?6\252\025\236~\355\271?\321\242\026\001Pp\276?\207\245\303;\247\266\305?\254[LR\352\351\311?\014\225c\330\177b\300?\216\272W_\275\'\321?\361n\346\t\344\317\307?\303\322\206\344\340)\271?f\321kN\206\354\306?\014\235\251\240:\207\273?U\024\373@\374@\303?I\rhG|7\321?Q\340\266\031\033\370\260?\311u\305\037T\010\305?F\261:Dl\310\335?\200?\016\340\263\t\303?\177*\t\261|\333\302?/Yz\014\r\206\304?\027:\021%\243H\306?\255\244\323\302~\362\315?iw\020\207\341-\272?\301\250-@\236\007\243?\022\241\334y\214\271\264?\223A\312\\\324\277\316?SS\014<i\264\312?z\264\236E\342\352\312?3Mf)J\243\267?v\034\036F1\016\303?\337\020\255\214{\320\321?\033T\260\000\205~\300?\037\3402o!D\313?t\311.\324>\346\350?\201\227D\266&/\301?\340\351\337?\'\216\301?h\327\272]\372\332\262?Y\010;]\307L\277?c\250lS\232\337\302?\364\0306\341\226\303\273?\314\3561\247\267\236\330?8\330$\n\360\207\331?c|Gvm\373\301?\001\3320\354+\355\270?\245\267\242A\310\001\304?\0204\"\365\367\202\273?mWdK\301`\302?\200\321\260\333\021\025\270?\236\312K\371n\005\333?H\220=\207\241\261\340?\212\277y\263\376\375\265?S\356,\344\213\342\306?\254\2470\230\272\211\264?\275\277\244\245\260\232\316?{\276E\253\203\021\323?\307)\216\221Y\256\305?^\222\276\241\324\204\276?\343C\213\227gX\277?\032>\0325\374\372\227?l\277O1\333i\330?\340$8\273\326\332\272?!\374r\003\221\307\313?v\200\343\017_V\265?Na\177\273\347\236\313?f\214\002\211\225\355\304?\014\310zD.3\254?(\035!\r\353)\301?\271\311\262\244\377\014\264?\256&\352-g\264\301?\273u,&\236B\307?M*,N;\320\263?1\216n\335\375\214\314?"
      }
    }
  }
}
node {
  name: "normalize_element/component_77"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "\365\017\224nZ\017\256?\r\255<\353\224\263\312\277\020h\007a\020\206\260?\253\305!\307H\211\220\277\344\275o\036|\030\265?\267?s}\357\324\237?\017\272\373Q\021\375\262?\330\344\017W\345z\261?\245YM\225\367\n\303\277\310\026!\363\003\202\253?\240`\020\242\306\316\250?w\366\334\334t\330h\277\353\013ovnQ\237\277a\340\000\315\374w\200\277j\"\260\225w\245\226?\022}\336W\\Q\233\277\364\3468\003\230<\252?\002\340\204\264Y\004\247\277S\025\2461R\326\264?\337R\207B\357\000\263?\303\253Y%`\215\244\277\230\251\007\324\264\356\252?a\036\324sB\320\277?\023mx\216\211\023\244?\"\004\322h\354\367\260?\224+k\204F\374\247?\014rO\013\351\346\252?\210\'`\340^>\261?T\344a\270r\252\230?\271B\270\377Qf\245?\314,0\316YK\233?\2719\007b\350\367\232?\251qS)\224\212\200?p?\"\236\323\311\223\277\307L\322\227\006\307\250?\302\277$obCe?\\\367OjA\205\274?\376\270\325*\374D\236?\224\272\023\325#Y\\\277\231F\005\341\031S\251?\177A\354\373Y\364\216?\3368\221\257\360m\253?\307\3362w\222L\205?\366!|\343\3741\233\277ap:\272+j\225?\335%%\310\3765\264?\233\362j~\321%\247?\331\372\207\314\023\n\230?=\372\316K\237\377\271?\211\237C<\271v\257?+\305\303\270q\004\300\277\031\225 \230\2559{?H\325<h\362\244\207\277\313+\024?\177\307\311\277\30785\206\357\263\204\277*\025\202\214\350\355\213?\223\033a+J\004p?L\016\242,\261o\235?\315\017\034\312b\370\206\277\277!))}\017\211?\251\233\005\206\036\304\201\277\3265F*\r\256\242?\013z\372\376\211n~?\221\257]\n\252n\243?\275\245\270\204%\031\207\277\335\223,\314\347\201\245\277\250\\\203\354,\342\247?\372\361\346\\\311\017\255\277\377\310\266\004\307\002\262?\007\350\257q\254t\242?\r]\327\317e\341\256?\337Y\365\230\314\241J\277\270?GF/\354\267\277[7x;\317\223\262?\213\230\242\3646Jw\27712u\025Z\357\304\277E\212\032\257\355\253\234?ou\032\030b\275=\277\233\275\304<Q\260\271?\305\302\333F\255\367\275\277<[\223\260g\266\242\277\325\212Z\2151\237\263?\271\006\360\3659g\245\277{?)\353\033\276\244?\350<?\231: \257?PU\321\272n\023\261\277\241\340\314)\2551\254?XW+1\324\203\272\277.\037\305\020k\267\236?\317y?\3161\351\302\277A\tp\320\027\250\257\277{B<3=8z?\205\020g\260oHO\277\213\342\246\0356E\245?zw\217,\223\363\252?\006\202rn\"\031\240\277\204s\243N\224\022\237?\002n\246\332X\035\266\277\331\207\321\2005_\245\277h\340\r\212b\311\223?B\211\035-\321\320T\277\334Vxl\013\234\224?\250\233^>f\333\264?\330]k\262\360<\251?vy\233\200$\301K?\021H\267\225\306~\232?\350va1\013i\224?s\276\301\337{t\274\277\342\336\377>\0305\267?\202v$\352G;\271?\357\331\320S8\020\262\277\302\345\026\222J\263\224?~O\005\014-\023\250?\232\330\375\3340\007\244\277\000\206U$u\356\225?\270\237\264\271/<\236\277j\271E\366\307\317\240?V\275\001\010M\202\223?\365\016\267C\303b\244?\253m%\234_\222\177?h\362\312~\250\367\216?\356BH\035\352\345\262?\321\220TSPY\232?X:\226\254\307S\310\277\\\264\375\264\034\253\226\277\265\376f\307\345\366\251?\335\270\215R~\\\207?\214M\036[>.\265?O\373d\307q\240\250?l)\tQ\n/\246\277\271\372\242\036Q\212\236?\201i7K\340\016\263?\330\215b\254{\323\262\277F\306\325\216\003+\266?\3752>\352\264\020\216?\357\375\330\347\333\311\257\277\255\3705{hk\241?L\25018\202\010\214?\002\276x\222\266\351\275\277\3146w\301\316\267\213?\213Z\331\277dC\210\277\202\237f\270i\202\247?\240\321Sm\002\317\213?x88\023\376\005\241?\222Z\261\212\372\316\251?:\3222\265\031e\260?\232!qi\336l\254?\246*\005\216\030\376\224\277S\207mo\335\353\243\277\207\243\004-\2774\240?e\025\224t]\220n?\243\0261\211\006k\253?\233\023\305\3659\210\203?\254\336[=\231\022\236?\346\346\244\302\233\337\255\277\223\374-\246>U\323\2776\021^\004\213\230\242?\020`\342\246>D\252?\2746(U3Od?\002\270\245J\236/\246?\244\034i\374\004H\250?4\034>\005\232\261\264?\267Z\326\346\307\353\301\277\222\247^\027{\370\300\277\315\246\005*A\321\261?\3641\352\035\030\207\201?\235\237)\016|\231\261?\354\206\337\340\032\276\234?\370l\321\215\2466\235\277\337\206\343\274\251\217\212?G]^\305QU\302\277\252WH\373J\240\300\277\031\252A\034\024b\241?H\232\361\026E\230\211\277j\372\313r\002h\241?6\311\200\315\3500\242?\027\t\252\234\257\277\247\2770\002\036\251\242\236\246?{Q\353\230\033U\253?\200\365-},\240\256?\004\221\376\304\354X\252?\353\360\177c\251\227\301\277\336v{\362\253\227\242?\273<\257\016\006\362\240\277\320\321\245\335\272+\254?\236tq\007)\371\247?\237\346\337\214lw\270?\376m\271tx\372\263?\202\327\3742\367\024\254?3\255;\200\277D\262?[\000\321\316\224\226\236\277\323I\322\017\314\314\224?\257\\\247E\010\005\261?!\372\350\346x\213\223\277"
      }
    }
  }
}
node {
  name: "normalize_element/component_78"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "\366\300\352o\331\206\300?8D\337T\331t\313?\007\341\021\342\2706\305?\304L\342y\227\365\317??\177\327\360\277X\307?^\311\261\234T\231\273?N\230[\032\362\241\300?\221\347\346Z5\201\307?z`~\251\3127\265?\376yW\223`W\302?tT\240\334\327}\274?O<F\375\036\312\300?\246\027\330\nj\335\272?\254\014}\214\306\025\271?5L\363\342R\202\262?p\212p\216\230\253\225?\266Ia\270\034\352\304?\315/\340\353\277\334\270?\316Eg\214\033\246\276?Xs*`\325u\305?b\367C\212\006\313\267?\342\245\231\303\3655\304?\320\245\272\253\027\366\300?\353\250\334\327\220\236\253?\263\00119P\010\272?\336\257\317\212\022\356\305?\327\260N\261D\311\271?\3069\342wp\203\273?\300\334\320\217\344\304\302?\016\325\2059\360\223\302?h\303\"\005\235\360\303?/d\013\307G\031\266?8\231\273\r\2371\275?\257:\301\352\007\366\261?\370\"DsI\307\302?H!.\330\304\204\270?\232\265`\036<W\275?\252\313\250\200\033\254\263?9\265J\350\342z\270?\317\256xs\203d\302?\2212\257\021+\235\274?T\361\206\0019\213\303?\017s\310Ta6\263?\022C\010N\321\037\264?\340\007\025\214\262M\277?\266\336\203\230\312i\301?\017\274s\213mP\300?=\211\005G\2249\276?5&,@\307\306\301?<\317\017\213g|\310?\217\217\372\021\335\370\302?\331U\307x4X\274?\354`_\023\033\361\270?\275\r\t\226%\345\263?\n\276\2313\003^\262?\331?\301X\356\353\257?\276\274=^\001\262\273?\335\347\303v\241\200\315?\266\210\2374\021\014\275?6\377\313\217\241^\305?\022\310\321\216\256a\263?e\250\3267:\253\304?l\276\257i\\:\276?\271\264\264/\255\301\313?\253H\345#\262\232\314?J\210\243\277X^\272?\316\327\253\026x1\301?\275w\302\265T\n\264?\376KWR\034w\304?\237H\237r&O\277?\374\365\366&\007e\274?\000\310P\350\321!\300?`\032\235+\376z\233\277E\274J~\221\276\262?\223\242m\263\263\323\305?\371\346i\206u_\300?\375\361uQ\2502\262?\243\326,~\360-\304?\240\013v\005\323\027\303??\347\177\003\244G\306?x\347g\" \352\275?i,\244@\302\227\310?\331\336\377\253\264\343\276?\321\3666\235gc\262?u\223_\331\341<\305?\240.\321\247\365\001\277?\2613\035\353\366\032\264?* \023G#A\262?\003\3153k3\222\272?\314\305pY\253\024\262?7\016\"=8\344\254?\216 N\215\2734\267?JY\005\270\300\350\252?\026\367\250\212l\221\277?\252\004\337\302\'\216\312?\311H|B\004\211\252?\322\3161l\t\203\304?\354$\203%\034O\243?Z$\213\323\307~\237?Z\321o*\025\376\276?\274b\307\370\220\355\261?t \225\251\034\357\277?6A\016)\212\000\302?8\255\237\364A3\301?\274S\302\222\371g\275?U\036h\373\023\271\264?\246\222ZX\322\262\267?\375\016\025H(\364\310?\275\332m\361\322\210\306?\225gh\200.\201\300?\353&\rB4\313\277?\007\022\305\370\361\226\301?,\227\014N\344\254\320?j\352\344(\032M\256?\234S\323r\303\226\273?0\244:R\272\312\272?\025z\215\365\276\205\300?\345+\036j\035M\277?\224\013\235\360u\306\275?%p\220\265+\231\263?\247\246,\\\271\213\274?{\002\2576\311\306\300?\003I\373\306\247e\303?\240z\362P\336>\272?\275\377\340Z%\014\266?\237\362\323\253\r}\302?F\004\210\'``\263?\037\342\361}\t\306\305?\211R6=\014\223\303?\256\354dk\333\002\253?\332\363\033wa\243\273?\005\350\020\233<\343\305?\261>\256\2451\356\261?\275`\201\371u\361\305?\035\227\260\267F\344\275?\300\221\224\202\333K\266?s\213\022WB\365\302?\221\031\022q\037+\273?&\020\225\227\023\354\235\277\274\371\013\022\342\027\300?\r\3311\217\253z\277?\2643\347A\303\340\272?\202\005\247s\202\014\272?\261q(<\233\347\272?*\213\227\256-\252\305?\367\266f\031L\375\313?\3645\027\364\350\212\300?\326\343\344\234\335\374\267?0\213\254\334\333\022\273?\254<DM;O\273?A~,\000j\303\247?\312\024\217e\243.\300?\220\320\265\200\347\026\275?\304\3201\272\230s\253?\255X\376\247\333\214\275?9\025\350\224\371\247\251?\210R\326\312\337\230\277?T\017\342\024g\326\261?\010\344p\270\037\010\277?\013\374\307\223\273G\304?\302\274\331|\342T\312?\217t\032*Ey\302?\213i\227Pp\032\276?\370\340nv\217_\301?Q\357\363)\021\362\302?\271\201\235\303\3760\277?\310#\256\037?t\275?\"\201*a\262`\274?\t\200\037E\005\235\260?\240\027&\007w\335\300?M\261\332d\243_\247?\363\004\343\\\232\215\247?\346\214\024\t\'\033\276?\335U\204\245\376\335\303?\351\237\277T\\\352\276?\230\305\214<\205\346\270?9\2570\313>\222\253?\362\017(\211\217I\271?\346?<\374I}\306?\261\231\026\321\203\366\304?r\267\351\244\376\207\304?\314\307\222\222N?\263?\240\362k\310\230\253\300?\233\375|\271!V\260?\302\315:\307\246s\300?\322\235q+\316b\246?\254\031\315U\351j\306?,\006\361|dE\320?\013G\237u\336\235\307?\020|bVU\323\301?\225\305\227e\\\254\302?\014\313\346D\227D\301?\3019X<K\211\301?\334\276\024\014Q\177\272?"
      }
    }
  }
}
node {
  name: "normalize_element/component_79"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "\263`Y\236D\232\301?\323y\340\245\3144\314?\251\344\"\022\023\301\311?\"=T9>\021\320? \177iQ\237d\311?\345`W\017oH\300?\231^\346dw\373\301?< }Q\212\257\307?\307\302\2749\357\016\265?\333\306\215\305\260\257\303?y9\267\314\223\262\276?\031\371\371E\302\244\301?8\336\231\340\006B\271?=]\352\333\332&\272?R\335\274n\232\211\266?3\317\005\206\220\031\242?\\\260Y\320\251\233\306?\375B\270\227n\361\277?\203\\\024\003E\250\277?\2721m\232\237\244\306?\004K\2439\032\326\267?L.\255#\232\002\305?\013\217r:\r\364\302?x\377\001\321\361\243\254?,\202P\365c\307\275?\302\330=\327\311\351\306?\247\241\"[Q\333\276?+\251\205%-\273\303?\254\250\342B\365\001\305?@\317\001\252\001\010\306?5\331\360\010/\300\305?A\373w\316-\254\266?\227%\014\223A\037\300?j\272\321\331_\374\262?\244*\371\032zr\305?\000D\035\375\377\235\274?\304lK\342\201\210\300? \353]G\022\300\265?\252\254@\t@\027\272?\026\230\350\010\355\020\304?\n\316U\375\216D\301?\344\327\201\006\252\345\305?\030\275\336\363\177k\273?r\375(\333\241\220\270?\363\246\0161\337s\301?\337$\226,\330Z\304?\0138\300\326\351#\302?D\340\006\204\357`\301?$\025\363\227\t\013\305?Uf\371\243pI\311?\326\211\330\033\r\304\300?\020\336&\365\310\023\277?\214s\321\031\343\006\273?\035\025\007\351\214\034\271?\357\344\323c[\206\267?{\0372\330\031N\261?\374$\305g\265\267\275?\214\2451\"\2356\317?\000\365M7\334I\302?\032\311\353\257\301\374\307?\232;I\246\202\013\267?\200\031\204\240@\353\305?\032D\212RY\314\277?\326\207\007*iY\315?W\"v\304&\224\315?\t\306.B\222\210\273?[\005\001\227\237R\302?\264[\252VO{\264?0\023z:\255\024\311?\315\"\375\276\313A\301?a+$=ee\276?\010a\330\333\022k\301?\r\3663\260\346\344s?\234\361\016\324OV\267?\267K\004r\325\261\275?\251>\004\023\207E\301?\373_\t\377}!\263?\333\263\017\373\002\017\305?Y\321V\215t2\305?\246\307B\266$\256\307?\200\203\223\300(9\300?\214\013\303$\265\200\313?\307\016%\270c\372\301?\317A\312a\2159\263?@\201\204\034\354\361\305?h\001^\217W\032\301?^[\177\030\017Y\264?\257\271.\362n\t\266?\206\206\031\250\371\233\274?\221A\276\3515\364\267?\022\005\206\356\212\307\262?AK\376\367E\341\272?(\030\257(\016h\255?\207\270\3720\311\250\300?\241d\000\025\177\265\313?`\330\343\203sM\263?\214\236\356K\034\312\305?\002\323i\335\006\265\247?\232\241\017\233j[\243?T\241\034-P\020\301?K\317J\023\034\202\262?\346\327N\025\005\332\301?\3232\236}\357s\300?\326\272\370\316t\036\302?\367.\001\237\357\214\277?\204,\304Prz\267?4\255\3549\353\376\273?S$\265\t]-\312?r\361\006\204\025(\312?\323\031\236\262(\331\302?9z\265\t\033\221\300?\024u\327\363\344\203\302?\262,mxGt\321?r\335\256F_\t\256?\3077\026?\206\301\275?o?\350\362I\033\276?E\345;\005\264\205\302?_\006\335\n\323\n\301?I\261\030\177\0371\300?m\324@|+\325\265?\275\252\234\276\352\275\277?\013\201\376p\307\203\303?\315ijg\005\367\303?\225\357\363\301-\375\260?\014\362\030\275\321I\271?\342\244\022\231\027\362\303?\210\301\316\335F4\270?\257H\363\227{ \306?\274\2275\220\262\256\303?\367*q\236c \261?L\211\316y`\334\276?\314\254\202q\240\"\307?%&\0327D\373\263?l\366\320\326r\273\307?\320\262\223f\230\377\277?>c\224\244\301&\267?\375\346\034A\314\223\304?\320\275p\257\030\352\276?\001\024\247\203\212\344\274?\322\370*\236\037+\301?\022}\222\311\026:\303?:\036O\245H\271\275?\254\027\314*/#\271?\202\304/\"un\303?\034\363m\3235\331\306?u\013\t\212\262\206\316?\200\363\233\357\313\014\303?\037+\213\321Y\267\275?\243\271g\300\315\240\276?\020\224nZ\0170\273?\265FU*\340R\254?\024x\006\2215\370\300?H\030\013\345rs\300?b\316,<A\370\254?\001\250\3548\241\267\277?R\224b\177\215/\267?Ud\201j\024v\301?\377\2679e\323i\263?z`\327a\022\017\302?\006\037\"\354\026l\305?\307\375?5\373\017\310?L\327\215#H\370\303?CWn\336B\033\301?@=\263\2551\353\302?\335Q\025\263[\024\304?32L\226(\265\303?\212\335\372\215\317\324\300?;\262\340\350\244#\276?\325\252\254Y\246`\260?\231\027#\274\204\335\301?\310\265\212\306&n\235?\004\202\371^US\275?\202\265\317\002k\227\300?\275\252\270\023\032\370\304?\307e\206\324\207\312\301?72\253Q\361z\274?\332\335x\201\326\037\256?\254n\353*\201m\272?\215\036\016\376\275\225\307?\'d\003\303\233\360\306?\017\373\235#{\317\305?S\266\221\260D\247\265?\261R\227E\216\230\301?\245P\350\205\3233\262?\235\014\274\312B\n\302?\300\224w\221\346\350\250?\200u\226\005\205\224\307?\277K\227h\nI\321?`\230\242\025E\363\310?\227\316k\022\332w\303?J{N=|\240\304?\377\303\261\274\030;\302?\323\251#.\235\"\303?T\277\351\225f~\275?"
      }
    }
  }
}
node {
  name: "normalize_element/component_80"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "\264x\305\024+\261\302?\222`\223\375?\303\314?\266qOM\0059\316?m\236v:\210$\320?\2239\240\351H\225\313?kH#9u2\305?.M\024\230\203]\303?\370\365q\244\233\323\307?$\355\377IgS\264?\013\352\230I\2156\305?1#\037h\303i\301?A\232j\223\256\214\302?\376\2036\243`\362\267?@\301b`_c\273?5\375D+\030\021\273?(\343O\274\031!\252?hK\317T\205\217\310?\370\355&#\'\006\304?f\255\352\252\025m\300?%\177\266)\254\001\310?\212\023A\227\316\231\300?\2677\331\265\246\301\305?&mc\031\006\037\302?\224$\322\255\014\347\255?W\266I$U\204\300?\212\341\272\307q\336\307?6Y\364e\241Q\302?q\356\370\364\255V\312?\322\"\357\335eM\307?\304\377g\336\273\227\312?\233\326\032\010\321\263\307?\277\276\364\373\240\\\267?Y9\235,\001\255\301?Ni\324\256\317=\264?\0331\t\320\034=\310?9\007]/>\346\300?\3406\222\205a \303?p\312\n\265\016\335\267?Yr\010a\335\024\274?JgXs\035\366\305?\254=B\206\273^\304?\227o\013\003\207q\310?\351\031\322\023\\M\276?\366\210$\2745\227\275?\222O\215l\3565\303?V\322\212o(|\307?\312E)\337;\003\304?\305\004\254\212\255v\301?{\'C\256\004m\310?\"&/\322\216\222\311?\007\2116\305\270\"\304?`j\346\361\375\322\301?\024\023\001r\265Z\275?\332\345\017\221\220\204\277?\243\214b\000{a\276?\203[\026\312\304\330\262?\321%w3\376\330\277?\255\r\030\233\213|\320?\314:\033\246AG\306?\326\346*\326\243\002\306?\350S\374\034u\255\273?s\260\321N\332\017\307?\333 \266\233\260\242\300?\260\200D>\250\376\316?4pcZk\215\316?\000\355[n\257\323\274?\247#\265\215\225Q\303?\315C\231R\006\252\264?\366;\216\313*\377\315?\334\213j<\321\350\302?\273\265\271\"\0224\300?_(\206\002\273\274\302?5\026\240\257Q\275\246?\010\320f\n\332:\274?\335\215c\366B\031\303?,5\333\022B\022\302?N[?\327\240*\264?\024\t\362(\237\342\305?&VP\225\022i\307?A\272k\030$\016\311?o\236\037\203kg\301?V\017Q\262\300\212\316?.\177S\222T\252\304?\221\344Eh\374)\264?\246\357\206K\306\245\306?H^u\233r\260\302?U\177\262\231\253\265\264?jT\037\311^\317\271?\304\221:\0230\300\276?\310\362\377\301\277\274\275?\033\314O?\342\266\266?\214\336*\001\221{\277?\324\234\245,\217*\260?\220p,\270\267\214\301?\274\036\325{\355\203\314?\251\300\202a\344\330\271?\033w\260\3514\027\307?+\227j\277\345L\255?\352<\275a\301N\247?\021\tt`\030t\302?\371C\214\007\366@\263?\360\235\027uMK\303?s\246\265\333\301\227\302?\336\273\r7\316\020\303?\247\005Zzg\306\300?\322T\354\273d\224\272?\030\245t~\304N\300?\225\266\227\270~O\313?\314\361?6\037\320\315?\323\347^\270WL\305?d\206`1\367\004\301?\005\033\3411_\205\303?\343\202f\351\240Q\322?\336#\177V\267\177\255?l\342z\232\347\226\277?M\233\256}\272\247\300?eN\026E\257\311\304?\344\362\311\321\266v\302?\221c7\250\007\211\301?\"\274\010\02613\270?Z=\275\330\317p\302?#=+\272\014w\306?P\001\247\254\343\216\304?\371\256\224\247\2445\235?\211p\274\320\226R\275?\214\272n\3732Y\305?K[\214\034J\266\276?\232\0376\223\232v\306?\025K\357\355&\320\303?9\005\231g\234\273\264?e[u9\377\030\301?=_\033@\253K\310?\316\305h\350b\375\266?.\354\364yHU\310?\236\356\026*\372a\301?\270\026\242MR\274\267?g\261\223HBe\306?G\006|(\030h\301?\373\034;\202\375\322\272?\310\002T\250\326Q\302?Y\310\r\323\177\025\307?\222\332\216 \312\224\300?~\345\033\263\347\220\270?\tn-^\357(\305?n\306\020\320\342$\310?\353b\252\313\357\265\320?\220#\267\325\225\027\306?\3011@\254{\007\302?\n\204r\342x,\302?\253u\316\216\325\337\272?T q\227\026X\257?\\\030\313\357\222\312\301?\230\242Wa\005\010\277?\212\356\303\273\010\305\256?\340\373\343\t\371\352\300?\223\366\234z\370\300\266?K\200P\315\2339\303?\221\316\017\017\240\340\263?\376\037q\3312\252\304?\375\204l\206?\266\306?\311\277\001\363\261\367\311?1B\020\321\374r\305?\021<\220\205\200-\303?:\237\203,\340e\304?7A\241\214[F\305?\200\233\014a\021\020\310?\346\317T\333\217\014\303?\234\233\355\014~\333\277?Vt[\212\372\020\262?\371^\336Dv\343\302?bi\311\253\277\232\237?nd\000\243)\215\273?\207\345\275\324I\"\302?)~\301\253;\017\306?\3634L\254\rG\305?\252i\247~\217N\300?e\354\220\n\177`\260?\221\336\344u\314\222\273?\267{\002&Ek\306?\243P\254\331\036K\311?3^v,\017\002\307?\225\371\247Q\321\243\267?V\351\240\253\252 \302?\256\320j\365\2239\264?\\Y\303\301\265\205\303? \302\210\025\037\263\253?\277Z\302\225D\032\311?\215<\217\330\216L\322?\2405`\014\274E\312?\371\226A\316^*\305?\000,\300\261F\201\305?\250\355\323\257|/\303?\023fV\306\361\311\304?\020\205n\2551S\300?"
      }
    }
  }
}
node {
  name: "normalize_element/component_81"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "\202 \207[\032\314\303?\251\353\002\276\330D\315?\3172\036\264=\353\320?[\035\245\267\344\035\320?\r\261\355\371\t\303\315?*\340\231.\226r\312?g\235\245\357+\322\304?-\024b\216\033\207\310?\217\303V\214\227\307\264?\267^\214\256\366c\306?\200g_\237W\201\303?\330pm\265B\251\303?\026\361B\337\202\021\270?\025\206&[\355y\274?\341iv\000k%\277?\260\354\376\210\221k\260?Sb\0070\215h\312?#\245\275\347\336\210\307?\270\215\"EFB\301?\0255\373\260\234\214\311?3q\362\365\221\250\306?\001@\260\013\210\216\306?\001*\221N\241V\305?\373\205\320\241\t\235\257?Pe \350\313\177\301?\313\226\337{\025\337\310?|\361O\355/\"\305?\036\242\227r:\240\317?z .\020oc\311?;6\225T\214\304\315?\317\307;\3331b\311?\3604\304q\023G\270?P=\007\323\206|\303?\227\345\273\371\345\312\265?\267Ta\020\261\261\312?\035J\207cj\206\303?v\337,\203<\013\306?)^D_j\031\272?\2724b\214fj\276?\233\034Z>t\374\307?Z\354\r\366\3327\307?p\253\002\260_\202\312?\325\201-(l\374\303?k\033\356?\014V\301?L\277Q\346w\376\304?\033\224=\375\370/\312?`\033\003H\363\333\305?\017\367\216\243\004@\305?b\270\242\343V@\313?\206\334\036\032\234\334\311?#\236\306\237\243s\311?\'\025\302\247\217\271\304?\273\177MRp\343\277?\207M\260tHn\303?\207\255U\222\247r\302??\347,\273y\215\264?\235ii>LZ\301?\025\3210.\265[\321?pDi\002T\027\311?8\037by\023\340\302?}!\242\240-\212\300?\026\032\350\327_A\310?\204\312\004k\270b\301?\334\262\004\230\200\037\320?\345\202\027\243\314\313\317?\260:|\026\247\201\276?\331\235Sh\327?\304?\312\355a\246\"\322\264?\255\326\003\222\"\305\320?\363\360J\004=\243\304?\340\274!U`=\301?\341\353\025]\261\033\304?\376\253\371\267\354\014\267?c\'f\004\356\025\300?\352\267\230gq\273\305?\0218\257=\365\200\303?w\034<\234\213\202\265?\377V\231\306\202\304\306?~\341\232\335\210^\311?_dS\305\214d\312?\311\306--\275\222\302?\017\3673\352\221\256\320?\000\371f)\306\352\306?\375\226\3303\206d\265?\365V\326\2267\220\307?\260\033\303W\314,\304?\200S\205*(Q\265?\277AF\003\"\013\276?\301p\312\266\265\200\300?\303\211\236J\274\262\301?\376\231\026\374\003S\273?\226\233\335\227\211\233\302?Q\367xV\017\356\261?\270\203>|\214~\302?\234Q\322G\tO\315?\221\242\335\007q\374\276?\345\272Y\036\314o\310?\n\340\313\034I\204\262?\373\356\0313\320O\253?o\332\347\214\203\346\303?\202\226\016\323G+\264?Lh\210\346\336\234\305?\010\2522\313\037E\306?\207\243\016\2372\006\304?\007\363\207\001s\266\301?\221\213 \2046\357\275?\305\006\037\013Pa\302?\236\377\252ec\214\314?\301\212\031\002\374*\320?\014tP6\243\256\307?\033\010_\036\206d\301?\364\017\377\t^\217\304?66H|\177G\323?\255\331\005\256\353J\256?\303\344\374\003\233\351\300?9q-\353\342\\\302?\202qEi<?\307?\340\270\025\215x\334\303?l;\320\267\303\356\302?\320^\217\037\260\306\272?3@\353\337\312\331\304?\266\244\323U\342\303\310?\216\273\265\njQ\305?kJ\306\362-\372\212?[\262 P\332\264\300?yJ\016\245\344\277\306?\n!\345\374T\242\302?m\206\002SY\326\306?|e\246\000\215\334\304?\233F\273S\377u\271?\375\353h^\006\312\302?\257\216\203\025\036i\311?\356\342\017\234\271[\273?P\373}d\022,\311?DB\240\242\006\355\302?Ja\377\3615\266\270?\321\342\224\322\226g\310?\306Gr\226\345m\303?\267\025o\"\002\'\274?=\357\022\021\010x\303?YrH|\204`\312?\2260\373\276}r\302?E\001Y\212\017\254\271?C\302\023T6g\305?a>\310\316\265\221\311?\202\032w\260\351\364\321?8\303&\225\235\374\310?\034\241\302\270\353\312\304?\304\030:q\227O\305?X\216\206\017\311i\272?O\014\255t\225\363\260?\257\315\240\203)\250\302?\302:0\256(\315\305?\010\314\265\373d\253\260?\211\024c\226\306\372\301?\2073\'~xU\263?\206I\334V\277A\305?\357G\376\036\304g\264?;:\377\215u%\307?\252\001s\302\276<\310?\341\376\223\'_<\315?)D\203\276;\014\307?\223\242\2303\020H\305?\301\247\362\243\005\333\305?q\263\253\242\325\217\306?]\020\236\304xq\313?o\366\273;(d\305?\337\237\3072A0\301?<\304\220\263\350\321\263?4Y\205\310G\335\303?\030Tj\342\\D\253?A\323\010\271/@\275?x\201\307\364\332\345\303?\213[\322?+*\307?\023\315\\\020,\257\306?\022\300\266FPq\302?\216 \266p0\006\262?\361I\340<\300\006\275?\210\r-\352GN\304?\245\233\205\274l\233\313?\2076w)\262,\310?U{\030\'\254w\271?\242\373\220\274\025\267\303?HWjoPx\266?\314ef\020f-\305?\331p\017DA\351\256?\234V=r\001\256\312?\320\3119N][\323?$\313\351\265P\247\313?{~\317J\205\361\306?\235\325\322A6\007\306?\311\266Z\307\273\032\304?g\250E\325\223\237\306?&\341\027\236d\331\301?"
      }
    }
  }
}
node {
  name: "normalize_element/component_82"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "\303I\305\277\002\352\304?aEW3|\325\315?\226\363 \230\376\340\321?)\035L\215G\036\317?\353\006(\022\356\303\317?\356d\373\206E)\315?B%\210\234\271e\306?\317\320\276@\260m\312?\352\014\233\347\331C\270?\001\023\222\256\224\003\307?\273]*\224W7\305?5\313\201\370\242\270\304?1>/\211q\006\273?\236\277M\242\0058\275?}\336Cxj\344\300?j\\Vf\354\371\261?\'V_\300?\343\313?\031\303\336\274\037\224\311?\337\370\347]M\202\302?\306;\004\261\023.\313?\245\260\270#\217,\311?)\006\253^<\213\307?\347C}\266\001d\305?W\'\3366\220\004\261?\026\323\226\204U\206\301?<\271\343\243~\004\312?\376\266d\253\204T\307?q\207\275\270\243\313\320?\310T\025\2502\375\312?\366\n\340m\253G\320?DU\247^\022\202\312?ou$\212\325\216\271?\255\356r\300\227\312\305??s\231D\004\266\267?R\315\332\335kW\314?\320\364\2578\336\225\305?/e99\336\305\310?\202\230?7\030\220\274?\207\\{/V\205\300?\371\370\313\301H\374\311?\366\340\312\346e\245\311?<U\266\366\333j\313?(\n\311\t\340T\304?2\244\210\341*\234\303?\217\246\226\207.\343\306?\310$\024<4\325\313?\0343\370\027\033\234\307?\256\214\324\350\306\025\307?\273\202+\250\301\327\314?\275\301.\302\310\326\312?9r\2422\005\370\312?\246J\345\004\245\\\303?\363G\232=\245J\301?\377SXFvg\307?\324)\362\230?\356\305?\262\020\"\273\000k\266?O;d\031\316t\303?\236\261<\003{0\322?\345f\016\002XH\311?]\312\240\252\247\256\303?G4\022\205\274|\303?\230A\177\030V\256\311?K\033\331X39\302?\325\202\247(H@\320?\245\276n\t\247\302\320?\344\222\311\372\344`\300?l\3444\360\0250\305?@\242v\260\337B\265?\377{<i\353\004\321?\310\321\325\203mw\306?\230wIZ\371~\302?\035\325\215\320\377\215\305?\303O\337\334\246\322\301?\337\313\274\326W\367\300?\354\352\220\306a#\310?\301\253\025\010cM\306?\366\214\223\256\330`\267?\331D\226g\206\326\307?\301\220\373tA\237\312?\341+\304g\016\260\313?}+\310\205\271\323\303?xgn7!\312\321?\223r\035\001\341%\310?\370x\363\3442\037\267?f\370\306E\362\353\310?_E%\371:~\305?\321]Y<\321\002\266?~\331\274\370B\213\301?\264J\346\341\317\263\301?iZ\270e\355Z\304?\233\r\241f\"\316\300?\"[\0270\341\r\306?\270\312\3142\257\026\264?.\233\231\226\341\212\303?>)\351\032\223i\316?\002%\022@\302T\300?\207E0\001\004\333\311?\217X7Ps\001\267?j\307\005NSW\257?y\037\230\272c\245\305?R\022\303\"G9\265?\321\266\317g\226\275\307?\304\303\021*\214\273\307?I\2221\210Y\371\304?\032V\337c*)\303?f\303\365\203\025\302\300?\25593\006E\317\303?N!d\024\\\020\316?\222h\355\251\341J\320?9\223\205\233\313\316\311?\377[s\216\324\327\301?\217\230\345Z\320\225\305?A%I8vN\324?\354d6\3512\014\261?\217h\242\322\377\347\302?\2453[r\017[\304?\342\",gE\315\311?/\020\021\362\3221\305?\271\342\366\214\303g\304?:\366\261W_\252\275?\363h\202_%\212\306?\033{\267\370b\217\311?\320U\215:GX\306?\354\340\322\304J\353\246?Nk\177\331\320\\\302?\002\020\nY\3747\310?\262\300p\021\214\001\305?i\026\r\276\325_\307??Q5!}\270\307?]\030\3107\004\034\300?\373\222F2\317}\304?\262\212\241\026/\210\312?\341\242`\2641\260\300?.G\305\210\017\257\313?e\256\021c\307v\304?\205I\3569{\252\272?\257Q\263`\022\211\312?9\351\006\325\311\203\305?\223\266\327\323%\233\300?G\027\262\362\177\222\304?c\337\004\225\247\"\314?ZM-\024\026@\304?\235\331\331Pd\277\275?,\030\004rc\234\310?Q\246Rex)\313?\357\224\205\344\241e\322?\205EJU\010\333\312?\367\340{\240\221_\306?\031rl=Cx\307?\367Q\330\010n\353\271?\020\204\316\345\262\303\262?\372z=\346\243\217\303?\210\261\347\223^\031\302?\217\354\366\313\272\216\262?\350+9\010\351\022\303?\324\335h\014\342\237\270?\007\234\032r\260\332\307?\353\316\217\2265\367\264?\307\020h\377\357G\311?\304\336\325\274\364\000\312?\222\350\220\224\'b\315?\335\236\253\243f\354\310?\236sWyyo\307?\000\275\224\255:Z\307?\367\024\255\232\357\371\307?\335\260\204\355\333\224\314?\355M\026;=\326\307?\253\267\371\213H0\303?[63-\303\025\266?dv\210\022<\244\304?\250\276\216`,Q\274?\005_k\313\215\335\300?\351K<\216\211\016\306?L\374\235b\337R\310?G\327\255\347i\225\307?0\365\375\030\226f\304?C\237<\352\267H\264?\273\254\316\331\036\027\277?&({\324*\275\314?\350\347\263\'tc\315?\322\214\323}\361f\311?\010\246\201\274\252u\273?\306\307\032:\345\355\305?8\363_\253\372\230\271?\227K$}\314\232\307?\365^\320\320\254]\261?V#w\2655\022\314?\257\233\352z\266\217\324?\244\273\356$W.\315?V\201Cp\250\324\310?8Y\240f\023#\307?]\242\255\\\005\367\304?\025`_\270a\276\310?\200X\326\000\0340\303?"
      }
    }
  }
}
node {
  name: "normalize_element/component_83"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "\373\365\371\336\225\023\306?\274\303\3243\020\215\316?cP\311\340\370\037\322?\323\220:\377KY\316?\360\217\333Uf\317\320?(\006\343\010\233?\316?K0\341?\371\025\310?\342\254yo\2739\315?\016\244\002\\\315\020\276?i\373\367\343mZ\307? \240\276\017N\336\306?\227\346I\336\250\261\305?Yi\006|t&\300?S\341I\267\227G\276?p\250\262\004&\253\301?\002\255\303Hd\\\262?\333\265\255\373\001\356\314?(L\352\224\337\223\312?\2344O\246\270\007\304?*i\206\323\320\346\314?bA\0353\251\321\311?V\231\376,c\261\310?\226\t\304\215\211\204\305?\230\250\t\2334\237\262?e\t\366Uu\363\300?O#\203\225pL\313?\360:\314\253\373\006\311?\225\277\277d\212\211\320?\277+\243\r\227G\314?\254\006\010\266\257;\321?\365\001\372\335qS\313?{\271\214\361\032!\273?\327u\010\031Qe\310?\240\255\241\331\027\376\271?*\222\n\276\304s\315?\306\321\255\273\2371\307?$\225\214\020\334P\313?\243\301\301lo(\277?c\332q\242\341\375\301?+\003*\303\210\342\313?\t\n\247\370\004x\313?\220\370;2[\224\313?\333\365\271w`\302\303?\243#\000\322\023\243\305?\330\036\232\322*\325\310?\177h\334W\302\263\314?,\352\022\\L6\311?\034\205rB\353X\311?\357\212_\377\025|\315?\262\331\301#R\\\314?\327\351\034\020\334\231\312?\262p\326\003\215)\310?\362\006!\353l\262\302?e\014g\017\230m\313?\331DE \207\026\311?e\007\331\325\213q\270?\257\222\241\300\301\362\305?\177\322\026\370\006\366\322?\t\331I\342\204\300\307?K\275\350\327H\245\306?X3\322U1\212\306?\216~\304GuN\313?\244JZ\022\034.\303?\336\247z\227*/\320?\030\373o~\363\275\321?\203Q\375\016;\317\301?\375\275\213,\326F\306?\213\010\374j\331\035\266?\320\2165\322;=\320?oa\025#\326X\310?\266\364\211\270\020\326\303?\202\014\255\346\352\033\307?~=\265\263\025\037\310?\022\22511\242\034\301?\234\370`\325\375\374\311?u\031a\376\310\374\311?\331_\302\335c\255\271?\213YM\334\314\026\311?\270\037S\353\273j\313?o}t\304\003\005\315?Y\320o\360i4\305?\366\345\365\365\266\230\322?\221+A\273M\274\310?\213\314z6MM\271?\344\264\332\325A\244\312?\013A\t\221\336\300\306?\256\230\305O\331\354\266?\341\336\353Z1R\304?Li\356\002\324\375\302?\021\030\375\376S\305\306?U\247\r\313\302~\304?Jb#\362X\321\311?\304\365\021\300\031q\266?\315\353\234\'\035\263\304?\246\234\302Y0\302\317?\202pc\205\353\351\277? \344Mb6_\313?\243\334\205\377\327\255\273?-s\265sl\315\261?\361\202\0338\206\221\307?|z\215\331i\326\266?\355\340\317\014\274\374\311?nH\272\236\234,\310?\257\023s\035\236\366\305?\036E=G[J\305?\224\374\350\321\335\200\302?\n\3669 \004\302\304?\3122\352x\321\271\317?\250w0\343\037V\317?uVM\010\004\227\313?XT\243\333;x\302?\330$[7\207\246\306?mK\177WMU\325?\256\262\024\233\037\027\264?\336ry\2347\010\305?\016t\2507\207\221\306?\033\033\376\366\034h\314?\207\310#\227\203\211\306?\246\327\333p\234\367\305?9\313\260zUa\300?,\277\324\033*\020\310?a=\375\206\332M\311?_\262\313\231\350\221\307?\254\231\3711\215\366\273?\366*%\020\036\311\303?dq\346\364H\305\311?l\013\256=\334\243\306?(\322\266\307\366\r\310?e\017\342:.\271\313?\252\177\020\311\220\343\303?\255\3507\225\n?\306?\220\366\220\007Z\265\313?1*%\333+9\304?\005\204\200\303\336 \317?s\245\207i+\353\305?\"\266\373\"\217J\275? <\347bd\255\314?\'\221^\203\247\230\307?5\274\332\003\rs\304?\006\347hbu\274\305?\021h/)\336\313\314?\001\306\177\366-\367\305?\243\324`E\006\354\301?\021\243@\317\001\352\314?1\324\221\276q\333\314?\336vU+\tL\322?\025\007\230E\235\003\314?\036\246\316\272~5\307?\221@\273\367\373\373\310?N\303\265\257C\202\271?\375s\255\312y\327\264?\000\225\023\265\200\205\304?\003\316\224\316n\312\310?\347\210\276\263$\335\264?\374\330\272ZBL\304?Q\025\346L\371\341\300?-\233\340km\271\312?i\322\311\3712\266\265?\254\340k\223\200\024\313?z\207X !\332\313?A\247\246x\352>\314?&\356\365\021\237\013\313?\01715ty\224\311?\200\\\316\344\034\356\310?\r\307\220\357\224\206\311?\016\264\3373B\032\314?\3675\312\256??\312?bM\036|L\227\305?\014\022.&.\256\270?\201\356\271\2661b\305?\261\326y\351`\334\304?&\221E\346\006M\304?\025\304\013\345\356z\310?\207\036\3423\232\233\311?\233h\302\274\350g\307?\230\010\356\034\327:\306?\344*-[\237\375\266?\006v\336\301\255\315\300?d\202\250h\235\022\307?\301\300>\375\021\315\316?i\301\230\350\204\264\312?G\353\262\334\365\371\275?\325$\304\321_\254\310?`\3474xP\352\273?W\027\"m\004\336\311? \2161T\036\215\263?\372\371\204&hW\315?M\267\212\235\247\274\325?[8\016\221\332\321\316?V1\353~{\302\312?\017Kc\261\326\233\310?\014\317\350\232\013\324\305?$\032L\337E\001\313?\020;#\257\246i\304?"
      }
    }
  }
}
node {
  name: "normalize_element/component_84"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "\206[i\022\357R\307?\215\305Zo\340}\317?Z,\342\307\332\367\321?O\253\372\362\210\005\320?\377\365\3056\215\263\321?Ltch\337V\317?I\350\265y\346\334\311?\014(\200\324\2711\320?M\373\033\361\272w\302?\335\212\302\003\n\002\307?F/\204K\260\000\305?.h\226\016\032\035\310?\315\022S\330\373C\303?6\275\325\204\376\023\300?\316<e\247\2627\302?\003\005\033-\300\244\262?\017\321P\362\326x\315?[b-\212\223\305\312?\236\254\370V\211\221\305?\266\245\030d\356\301\316?\037\333\310\373\214Y\313?EDR\207\354\356\311?\004*\031\211\233\226\305?(6+J%\226\264?\035|\301\244\201*\300?\222\242\027\263\372\252\314?\001\373\246\270\303\311\312?\254*\202\237;x\317?\324$\035\212\247\203\315?2s\n\275\301\001\322?\203_\362X\226\334\313?Za]\211\376\330\274?\256C\344\335Y\007\313?\035\245\025V_\232\274?\317\311q\370\273o\316?v\201~\036$\275\310?xM\221A\303\342\315?\275\302\231\227w\340\300?P\014\347\037\037\242\303?\374\331\275L|\304\315?\231\3342$Jb\314?\023\344e\"\254\223\313?\017\301\321\213c\357\302?\335\204\217I\305\215\307?\331\364L\241\206\276\312?\341%uX\232A\315?\373{};\366\244\312?\027\361\230\337;\272\313?\204D\211\177\240\250\315?w\260\230\355\027\347\315?\360\314M\231p/\314?\237\025K\243_!\311?<\027\372\353\013$\304?\337)\240-@K\317?\202\344r\303\274\365\313?\033=\351\n\327\237\272?\005\226\361)\337w\310?6y\3601]\252\323?\340\372\035{\327\317\305?7\341\354C\317\307\310?\323\200\203\356y\233\311?\r\337l\2728\006\315?\036qj\225\320E\304?\300\206\306d\210[\320?|@$l\r\277\322?\225K\355\211\321\232\303?\0014\010{,\240\307?s\253i\334p_\267?\244nA\230\326D\316?\304;\363\204\2739\312?\211\370\325\274\255\353\304?\032\tX\236L\313\310?l\366\257\310\211\030\316?ts\342\214\020\007\301?\020p}b\341\007\314?\333N[#\202\361\315?\272\245QX\024<\274?\245\374P\333\031u\312?\002\236B\033qb\314?~\223\340\354Zk\316?4C\0376\325\266\306?-\242I\t\2211\323?\033}\350\\34\311?\322\351\263\342\237\302\273?\222\247\373\354\277\217\314?\265?\217\322\036\017\310?A)\246G]/\270?\264\355\n6\333@\307?<\027\270\3179^\304?\236\271$Z4\025\311?E}\324W>h\310?\341\236\3733\002\270\315?<Z#\"\377\303\270?)\006\001_\365\363\305?\314\326v\352\374\241\320?\210WW\332\351T\276?Y}\224b^\377\314?s\376\225\261{\324\300?\212\253\266\332D\337\263?\001\224\245\'C\215\311?\355\352b\216v@\271?\262\'\325\314\307&\314?W\310C|\263\217\311?X\004\256\024\312\016\307?N\005\370H,\344\305?M7?\264E\010\304?\263\377/\016\226\200\305?x\366]]\212\265\320?\360o\223\373d\237\315?+\020\0107\303\024\315?\t\320\366\265\034R\303?\233I\236b\n\323\307?\000\262\027\327\346I\326?\214f\356\354\356\253\267?\217k\227\304\306-\306?\\\346\353g\356\367\310?!\3011$W\014\317?\272\"\0224O\366\307?I\032 \364\023\236\307?\373\242j\337\317\365\301?\253\2522\264\203\217\312?`\266I\267\270\325\310?2\227!|\222\365\310?\220_\271\2127\305\307?\220\241\313\352\tJ\305?y\020\204)\237e\313?x\3237\2557\021\310?\317\252\237\234@\317\310?\357\n\267[\026\374\317?S\333%(\200\215\307?\316\005\271\201\276\021\310?\023\362\263$O\370\314?\317\025\252=\032\376\307?\017l\215\357(a\321?\241\303\300\226\3765\307?shE_7(\300?7\331\205m+\300\316?\233\221\372\030\227\235\311?\265\375[dc\247\307?ZkS5t\005\307?kh\347Z\322\026\315?\2012\261\354\216\264\307?\232\345\340\t%b\305?\202*\r\263\322\317\317?\346}+\370\276\217\316?\274~B\357\355\023\322?\030Eo\3568\020\315?\036\242\016\201\334\353\307?0\374\316\231.\360\312?\377p_ k:\271?\222I\035O\221\344\266?.S8\'\233\227\305?\252\332\032\203\341\353\311?Z\271T\373-g\267?8J)\253\223\272\305?\246\007=O\307\331\303?+\352\202\260\t\237\315?E\365M\317\370\224\266?\213d\227\301{\273\314?\370\024\325b\275\277\315?f\251\234\306[\206\314?\361\315\246\213cP\315?R\017\265\223\337\247\313?\261W\t*k\232\312?\017\365\372\024y2\313?\342\272\362\361\272\022\313?\007\321>|\267~\314?s%\235\251Y%\310?j\2505\363\002q\273?\342[K\r\334]\306?\371\002\001\322\001\200\302?\217\n\316\246D\216\307?\264\245\331\377\252*\313?\232\235\240\250\307\021\313?\272\'\0345\267\346\306?\272\323\313_\211\026\310?Z=\275\330\317\360\271?\230\261}\325\2050\302?,\354P\352\036\033\314?\236\n*=\342\026\320?Z\374\020\225\362\014\314?\215\350\355\273a\234\300?\304\301x\342F\305\313?v\247f\317\230\333\276?4>u\247\231@\314?\234r\316Mp\361\265?j\277\265\023%\241\316?\020\3339tJ\245\326?\304\252\036\211\307@\320?\215\375\215\277\262\247\314?\314\010\375\271Y\035\312?\341\233\035\336\260\303\306?\376rQ \370G\315?\203\376\005,\000\240\305?"
      }
    }
  }
}
node {
  name: "normalize_element/component_85"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "@~\367\r\232\375\253?\221\341Pv5\344\313\277Sh\247\206\000W\257?\254\340@\023$`\247\277S\331k\322Q\264\262?\212_S\025\212\334\232?\343t\241\330[a\261?\311S\262C\314\212\257?\253\376\006\302U\353\303\277u\201\036\254\367\002\251?\036m\354w\000B\253?\220\020\231}\0241y\277\221\331+\274cb\241\277\231\362\257R2\032p\277\263\364\2606\027\226g?\224): v\227\246\277\2471p,gp\246?\367\266J\304\034\203\250\277\216\337\314\311:\205\261?\255\'*\203\271\311\255?\tz=\322\277\250\246\277\227\352\026BM{\252?\244\336o\216\034d\276?\036g\356\257\213\223\243?\375Y\347p\221!\260?\363\344I\273\231\035\250?\336\264\002\013\254X\256?t\032\336\2663o\256?\003\007\204;\357}\214?\0365\271\'.\030\244?/j\307r\352\201\225?\212\311]|\270\201\226?\273K\332;@\203\177?\276n\317\373\030\326\223\277\252\177\207\3272o\241?\366\300\202\214d\265G\277\006\032Ck\013p\272?r\3757\006\317J\235?r\307\366\265\211\356\210\277\230\341\266\353\342\214\252?j\223-\014=\324q?\232F\206a/0\245??\323\374E\2214\216?_\347%M#0\241\277\232\317mM\260\273\233?M<\nQj\241\262?\372g\025\034\257W\246?\350\351\313\356\243\374\223?\002\253*\001\037&\267?\023\233Zys\377\244?\3716\251\332\001f\274\277\343\243\334\2658\356j?\242\312\034\n .\223\277(\345\210\2212\335\313\277O&\207\262dL\211\277\003\364\024\234n\227\237?\274*\253D4\025m\277\337\031Q\000\343\036\235?\207\336T7&\252\214\277\233\265\232\311\305\205T?7hp\332\332b\223\277\224$\322\255\014\347\236?\333L{\006\261\214m\277\014\276\022C\320\243\220?\307\211\356\332W~\220\277\0108u\377\007A\242\277Y\276\371\320\257\364\246?M\273h-\244z\231\277\302=>=\220\236\257?\206\035z\026z\200\233?\223\315\212\345\354V\253?\225\253\"Ss\366t\277\2053q\013\223\262\272\277t>t\365\356\205\253??RVi\021\245s\277)\272&\213\230e\306\277%\327\003\234\2248\233?\027\237\346\n\r\311\217?\354\266\302\366\276\261\271?\336d\242\2506/\277\277)\316\310Ui\341\250\277\002\302Y\332AV\262?\334\253.^.\r\246\277\360\032\010\212\236\342\226?\376:\247\301\203R\244?\244S\345\350\342P\253\277\n\262\337\277\353\306\251?\273\303D\210\315u\274\277\224Ge\372\215\305\232?r\227\033\021.\322\303\277\240+\031\031G\331\262\277\202&W\353\243\327w\277f@\341\337\2540q\277t\240\325i\247]\241?\'\273\307\t{)\245?Xj\300\227\367u\244\277\352\202\333\211{\364\232?\021@\365\005\260%\266\277\nLeYI\216\253\277t\2255\204?\320\211?\025Yp\341n\200\201\277\2258-\243Q\264\247?_\000\337B^\334\262?\027\316\271\004u\004\251?o\202\232\032\233/\214\277\240k\263?\275\n\232?\361f\027P\313\266\223?\203\231\216\267\227\337\275\277\034\277{=\033\026\271?h[?\220\313\236\265?\232\216\r\230\030/\264\277\014\027\0035\306\230\227?\354\024\023\352\325?\245?)q\270\267\244h\253\277\364\346G.\305vc\277\333\347\240g\215#\237\277\315>\013\031\372\355\232?\226y\321u\346\300\210?\263\377\331\r\335\027\240?\375\024\343\326\206\205h?\265\232\236E)\000\246\277:.\357\031\245%\262?\274U\017L\371\006\232?\374\357\024\264\301\360\307\277\265Q|\000{\032\241\277J\3324\206\236l\250?\376\273,\220\032\277z?\357\2012\232P\231\260?>\020\276\317o\232\247?\307\206xh{\233\251\277\2174\263\364s\323n?Y\"\243E\256\202\262?\356\000E\350D\333\265\277\335!\232\200,2\254?N\307\037\351,\343\205?\355Cl\035\r\301\255\277\221.\323\202Y\231\240?Tb%\206\347\034\225?\354M\002WVs\277\277\005*\360\tj\334\205?\242(\216\013 \337\222\277\314(p\224\267\201\242?\347%r\305\255\220\016\277N\273\024.\026Lu?E\352\233\006\325\236\262?\\\356\277\332\3009\262?5\334\307\244\233\321\255?\220$Hr\347,\227\277\2340\326A\242,\246\277\356\303\334\026\256\014\233?\243\327\016bAC\212?\201E\372\304l\217\246?\335\251 \tr\205\226\277\323\325\336&*\273\233?\316\377\340\200\354\256\262\277\354f\026\006\004\261\324\277\240\005\020Z\351\227\242?\360w{R\036\304\246?\265\254:,\206\013V\277F\2173\333\202\226\242?g ,\351|\006\247?\034o<\351\216\217\260?\r&^\233\026\007\301\277\'C~\313\326Y\302\277TB\030\216\323O\257?\261\002D\r\033oo?\221:\331\204\266\307\256?ioD\205W\203\233?\006\024\214x\"\360\232\277M\300w\347\305\223\205?Q-\241\t\264>\275\277\315\'\322\315cl\267\277\315\347\206\355\301\200\240?\322Z\243\256M\024\225\277\217\303\235a#v\241?\022\272\317\032Q\024\233?\315\377P\325\251\227\252\277\353!\037\226\373T\240?\213O\212!\3745\246?\353\243\310d\265\034\251?\021\345\323\257\351K\255?\303p>\r\311\335\302\277a\020\322\377\344\202\230?\027\336\005zCB\246\277\010\366\251t\301*\251?\200\302{<d2\242?\377\354:`\3060\265?#\322\'\323\027\253\263?\260\234\236&\034B\244?\203\201\364\010\306%\260?W\273`O\2774\216\277\225\365\320{\271\010i\277<\227\247H\305L\260?\367\322tsz\251\225\277"
      }
    }
  }
}
node {
  name: "normalize_element/component_86"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "f\310l!\254\354\252?W\001\240\205b}\314\277\035\267\322J\245\310\260?\350pY\367\"i\261\277\213\331\026\216\265\371\257?\310\206\357v\035\247\227?1\n\364\034\240\032\257?X\247\237w0P\255?$\254\370L\027^\304\277\336B.\243\036\303\246?[\335\245e\210\211\250?\303\217\227Yw8y\277\342V\2446/V\241\277\3751\0251\330L\262\277)6\n<<\363\216\277.G\372z\337t\260\277\203\257\\-\177\327\242?1\334(\316+\200\247\277Xh\236^TK\253?\265\2735 \252?\246?\201\273r\021m4\250\277\351\304\263>\304\212\252?\357\376\265\022sv\274?G[\246pN6\243?\021\277\261S\353~\256?0\322\242vs|\247?\037\374\376\254}*\261?\n\254j\351\324\014\252?t\263`^W\376\224?9h`\370I4\244?\370\026{\324\004\366\223?[\332\307\0177\325\222?&\314?\360\264\331\205?\r\024\253\030D*\230\277-\314\347\2014\010\245?d\270\251\235;\243\234?\331s\326\375\034L\267?\267\213u\031\032)\235?\353\223\033\306V0\225\277\033[`s4e\253?\231\276t\346`.x\277\272\025v\334\346I\240?\205\233\221\343|!\224?\320(]\372\227\244\244\277XYC\370\003]\242?\347\355\351\231GF\261?\343VK~\347\276\245?~\315\266\366\345\234\215?O\3060\333\331\315\263?#\001\201\006O\254\215?\034\365)*\217,\270\277S\r\310L\014C@\277\230g\263W\020\344\227\277\005\372\363V%]\315\2771\206\271w\3513\237\277\003\232.\342@\352\251?\n\301\320A\234)\202\277\324[\037\260T\022\240?\205\327o\322\246}\216\277\027\221\3732%M\204\277u\0353\033\'/\225\277\255\236zA\227\262\232?5C!7\000q\214\277\004\232L8\233^w?\2654\032m\023\366\222\277j\357\351p\310\224\240\277\311\217`\371\337\211\246?(\3610\"\216\313\257\277Blb\341!\025\253?\322\357\232\016\237\237\222?\260\2320_3\000\250?\017\254\371\335\263/r\277LB\255_l\376\274\277\226\311\025\203,\260\240?\377`;sj\302A\277\251=\311v\356\330\306\277\356l A\027+\233?\206\005\374\274\327\200\222?\363\374v\315<\035\271?\341\3205u\031\034\300\277\220\306qE\001Y\256\277m`\371\223\373\224\260?B\323=\253\377\205\243\277\213\241b\275\315\362\233?\2657S|\327\373\222?\323V\314\3305\371\250\277\343\2005\205\320l\247?\2320\336\262\352C\275\2778Xj\2034\337\226?A\215Rt\352k\303\277\245\257R\007\232K\265\277|\206m\024$yX\277Uu$\321\252\032u\277\'\247i\\\247\255\231?\224\311\350\001\245\001\237?j\311\0132\307\307\246\277\251![\252\223\262\227?\266\363\261F3\322\266\277.\300<9J\253\260\277\361\211\216G\035\333z?\253\325\214I\325/\216\277j\347\001\032\0170\263?Q\344g(\220\007\261?\226D\373\372On\251?\350\202\360$\306\213\235\277\307\031\002\001\344\344\231?\256\327ph\374\210\224?P\371\201\362\021\215\277\277m\362$\201\267\324\272?\002z\024\300*\235\261?\023\306\017\3107q\265\277\213hRBd\034\235?\206\217\360\014\006\026\243?\nf\366\300a~\261\277\303A\226\223\275\226Q?\373u\356\020\333\352\235\277\220\303\2207!\366\223?\256\243\257\302[W\200?\305\013J\032\241t\225?\004z]\226\341\005R\277\301\310\240\032\374k\272\277L\020\020\364\231\261\261?\2473\033Wh\217\233?\025\213\000#?\215\306\277\363x\217p\260\360\243\277m\007Nvf\224\246?\3165\260{Ihm?\207\265\313\223x4\250?\325\022#2I\270\247?\001i\360\330~\033\254\277a\320I\274*\272\227\277\241f\321\006# \261?|iW\017\002\354\267\277a\344I\370\3745\233?\315I\345\251\353\251}?!;h\251\316\000\256\277D\210\276\312\300R\240?\332\233\\\257\220\211\215?tA\277\347n4\301\277/\337\263\333R\372\202?\356\2174\016\256\346\226\277\001\215S&\225&\232?\000\234\201\013^f\207\277\263#\313\005\013\200\231\277\032\231\267R\036\311\272?\"\\\207\276I@\265?R\r\332/\310+\257?\001gE\256}\374\225\277\204\017\377\222O\355\247\277D\206{\2034\005\226?\363\214\231\036\366=\220?\250\340(-\347H\242?\025\212\242w\222\303\252\277\026X\206\214\325S\232?L\014\377r\370\347\265\277\217\350)h\026\245\325\277\3545\332\375l\334\242?\326U\351=\201\357\241?\034\004_\311<\217M\277\343p\007f\\\243\237?\372t?\036/\341\245?\354\220\000\r\355\236\250?!I%I\313Y\274\277\343\223\270\0108\266\303\277\357\010\225\"s\021\253?R\242d\363\352|e?\2073\224\032\247\017\253?\021\001J\355\214\211\235?\251Z\233^\023\346\224\277\252\'\310\017bU\203?\341^1\324ui\263\277\033\335P\027z\333\247\277\304~\r\220\201\237\240?W\315\'\266x4\224\277\013}\345~\335\242\241?\333\257\320Avb\221?\031<|4\375[\253\277\r^c\263\375\r\223?\312\236\237\n\001\276\242?\2361M\212\357\301\245?\270]\n=\322H\251?\377w(0\273\254\303\277`\274G\177-\204\210?\002\362FbY\233\253\277\370\245\312l\232\273\246?\371C\316#\310\006\227?\021n\014\343i\327\261?\255\300\334c\3635\263?/\330\323/\2156\231?\251:\232\331\235\244\254?\205_1\275\331s\260\2779\273\250\"\204cP\277\"\232\203\344\300R\256?g\032\274\313\037\265\224\277"
      }
    }
  }
}
node {
  name: "normalize_element/component_87"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "\325O[\312\311)\252?1\370\013\250\375w\314\277a@HyZ\274\262?5\005?e\215\336\263\277f\207j\335\025\340\251?\334ge`\274\235\225?WK~\347\276l\254?\315 4>p\356\253?\264Y%\363\360g\304\2772\326\016\261\207\027\244?\253\254\347P\370\377\253?\340fYF\326Yn\277\345P\274S\314\004\240\277\351\336\254\211QL\226\277G\315\323\220#c\232\277-a\303\214V\331\264\277G\217\264[\230s\240?\220\030\344\376\210\376\244\277\235#\372\316\222t\241?\352w\250@B\241\240?H!\003Xh\020\251\277\036\210\236\'\255\336\252?\3730\357/\2127\272?w\345\212\275\335\263\242?P\342x\340\221\350\253?%\024\312\336,\007\247?\326\230\022tt\017\262?\206\326\014n@\213\245?\244\025=\302\371l\240?\025\304\316\201\326\335\244?Y,\340\306\257\035\223?\355\273\224M\310\355\220?U\rg#|\224\216?\364\26383_\375\232\277\223\211m\350\354\270\254?s\004n\262M\367\214?F\326\177u\323\350\263?\210%\260\374\243\266\235?\273\240\356\236d\364\233\277\203\217\276\322\304\376\252?\3102\372Zb(\221\277e\243\374o\350\327\231?p\366\227u\260\022\226?\207\267\360\204\252\r\250\277\\lq\305y\303\246?\327\242\223\022s*\260?\006`\236\366\335r\245?y\231k\025 \261\205?\321\r\371\331[Y\260?\356P\262t\274\004z\277P\301\327\223\235\327\266\277o\'\225\031\004\220q\277H\200\247\204\270V\233\277\003\rp \250\203\316\277x!Z\201\332\325\252\277\025\016\3118b\207\260?\340o5d\234\274\211\277A\256\261\244\014\267\242?\341\3536k\232\276\215\277\205\241\020,\007\255\223\277\375\353c\245L\341\222\277zv^\002n\030\230?\245SJ\024\311s\223\277\357,\213\323Z\342z?\316\244H\034\204I\223\277\237|\276\211\310\200\237\277\223\200fJ\312a\246?\276O4\223\2305\265\277\032\022lfq\"\247?-\311\205\363>\310\205?\236S\366\201\327s\244?\316\365\200\360\3266+\277\211\n\264\277\334\274\276\277\263\317\240\367\177;\210?|\206Tw\203mv?\035Xc\020%H\307\277\"\232\241:\033\307\233?3\213\205^\325\022\220?\235T\316\363\2647\270?\236H\327\034\205\303\276\277$\344:\310\026\302\260\277\353\351\244p\235|\255?\335\320\'\001P\026\237\277\247\350\212J\321g\231?\021&{:\r\007h?@(\360\232\314\202\247\277\362\352T\255\020L\245?\361\334\333*\021s\274\277\200\324\230\243\326\032\223?\272\373\242X\374S\302\277\022\250z\t\200\267\265\277V2[\r\3444_\2778i\250\276\344`e\277p\352\274\363\257\330\217?c o\274\262@\226?=b\250N\375?\246\277\363\2625A%\305\225?\243\rgN\374p\267\277\016t\357\014\023\300\262\277~\205\372\315,X6?\313Y\271\306P\026\224\277YvQ\214\335R\270?\342\322\262g/\330\255?\224\207\030\276\244\202\251?\242(\3615\333G\244\277\345\177_\024\036\343\231?\223\324oJl\203\226?#U\203L\014\253\300\277a\245s_}\245\273?\330]\255\316\302\202\252?\370\350h\260\004\255\266\277\273\203\376`\345r\241?\241\273a1\243\205\241?R\215R\232\261\216\264\277k\330kQ\321\036\220?\263\036z/\027!\233\277\2557\312\367\0256\212?\020r\251\r\370C~?\357\201Xa\363\244\212?-\033\034s>?c\277`M\204^\226\356\302\277K\016\034\363\341)\261?\322\230\033\234 \233\236?\377\305a\240\323\202\305\277 X~\256\360\r\245\277\245FF\331\353u\244?\267\036F\207\016!Q?\022M\347]\321\272\241?\367\341y\331\021\257\251?_1\372<\014\316\255\277[\\/\302\036W\245\277\216\210\311\036\030u\256?\223\013\216\305H\014\270\277S{XBS\203t?\253\312r\235<\350v?\244\270\355\277\361\\\256\277D=\376\204\023\316\240?\021\247\313\026\324\255\212?\037\022\000\024\n\256\302\277\222q\202\362\033\177\202?\321\031\270\006-Y\226\277%\004\326jBl\216?GS\354Q\200t\220\277}\350\0063;\305\247\277)\355=\367Fv\277?f\305\245g\320\t\270?J\323^LLz\257?\204\006jJ\0259\222\277\321\226s)\256*\251\277\247\026\344C]_\220?\227M2\322\210\"\223?s2\t\310\2534\232?\200F\235Dz\r\262\277\306\021;\270\023\243\231?\223\337\303\241\216\371\270\277[\202\226\362}\030\326\277\330\t\360\\fx\243?\315X\343U\236\214\232?\262ki\330iPf?Kk\'\330\3549\232?b\020X9\264\310\244?e\374\034\233\364)\240?O\312S?7\200\266\277k\372m\001\001\250\304\277c\225[%\033\271\246?\301\031\030S\222po?<|PR\213\201\247?\227\002\261\360\0365\240?[_\301\211*\364\210\277G\224h\\G;\203?Xz\242(&(\247\277\260\354\361^\217k\220\277\317N}Uk\267\241?\333\303\373\375\244\322\212\277\220\204\272\236\241\345\241?\331\035\317\212O\321~?V7\3108\007N\252\277\031>s\355C\222t?\342\325\370\240\365]\240?\3001xV\332\373\243?\316\r\004\0033\037\260?\343^\221F\242#\304\277\211\016#\262\177\006r?\274e\306\\\313\304\257\277\325Nl\274v\224\243?/t\333t\272\342\204?l:\247\376\346j\255?R\360\254\2160\315\262?\360m {\302\264\215?\277\233_\256\364\303\252?\365\023\003a\375X\224\27711\005\207\361|\211?T{\275m9\246\253?(\265\301\320\275c\221\277"
      }
    }
  }
}
node {
  name: "normalize_element/component_88"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "c\341\0172\325;\251?Vl\345\210)\217\314\277\230\240?\232\325\256\263?OF\203~ %\262\277\351\335K&\026\024\243?\257F\035\355\035\r\224?U\035\247%\254F\254?\036WX\255\242\370\252?\357\344Jr\375\021\304\277\336\276\014\233\010\350\236?\n\272A\335\325\345\251?\003\205&\373z\3151?<rK{\350Z\234\277\206T\257-\314\332\244\277\020m~\376\246p\227\277\325\315\266\264\311\312\266\277s\325\353\377\344;\240?\331!\316(52\242\277W\315i\322Jz\204?%\3525\330\374A\234?\275vR\'\354\027\251\277\346\000fc\312,\253?\377\271\254\345u\024\270?b_\333p\222\305\241?\346-\010\371a\003\250?\233OF*\306\330\247?\272\350$\216Ns\260?AJ!\315\2564\241?\216<Ruv\317\237?\243\227\201e\315\021\245?Z\\\305\335~\313\222?\017\023\344\322\276\332\221?`\237a\263!\324\222?\334\301P\323\243\263\234\277\2376\010E\203\254\255?\375\030\202\002@,\203?\017\355.\023\357G\261?\324\264\347\331|\301\236?\316N\"\234\370e\240\277\323v\375\226\301\227\250?)\005a\227v\244\235\277\235\263\335\273\010~\226?E\217\255\241\263P\221?\210\004\310\332#\367\252\277x\313.H\225\211\251?-\215\363\222Z\203\256?\014\365\313\222\306\211\245?\240P\330\020\3373\205?\264\272\261\255Z*\252?\271j\006\007g/\230\277B\300\371\213\333\023\273\277L\344\223_P\360~\277\t~\310\031\222\254\236\277\024\302\2119\037\226\317\277\017\275FD\221\353\256\277\t\234\341\020\356q\260?m\22529MP\217\2772\214Q]\024\313\245?\311\265\"\343\261\234\215\277 \221\235T\207\036\231\277F\332h.\247l\223\277p\271\343\025\324,\226?\365\371b\316\267.\216\277\3454P\210\234\230\256\277\264\224,\'\241\364\221\277\025\273\016\271?5\235\277\001p=!s\031\246?d\253\3547\352S\260\277\210\224\321\216<\214\244?,\260y\265\331\341r?\203\255\264\272\014g\240?3N/p\372,w?\030g Wi\331\277\277\225gL+\377\006w\277\305u\233V[\310\207?\305}\300\020-\312\310\277vnQ\233u\034\234?g\231a}\345<\221?\365)PV\317s\267?\361\353d\311L\004\271\277!V$\313\356n\260\277\215\362i\241\246\216\252?\260\352o\263\277\206\230\277:E\370+%J\225?_\354v#\027\217W\277Y\005\263\007/\001\242\277\006\327\375\337\350\225\243?\201\316\007x\220&\273\277\323\217\256\033\264,\217?\2233\230\257`U\301\277\320x\314\207:\210\271\277\266*\037\010\344\240\227\277\003\334\347\211\313\027r?\372\321\243\273\201\210x?\270s\025\026\322\235\222?\333\036d)\367\332\247\277\203\006\271\220\351\376\225??\215\t\2363\003\267\277%y\317\375\254d\263\277\367\374=lz4{\277\361\365\"\313c|\227\277\350,\014\301\014\356\267?\367\306\304q\326c\250?\013\215\234\217\257`\250?rg\354lD\007\245\277Z\352\300<\333\330\231?\203\252R,\027\'\231?!Q\245\274\017m\301\277\332\270\332\227\'\350\271?\023\206\371\331eK\241?/\315\034\256\257W\270\277\273\001s\350\205\037\243?\374\2521(\240w\240?\324g\312\370>\357\265\277`\370\344\010\351\216\225?\234\273\300Y\010z\227\277\366\177\212\272Az{?\202\262\332\020\244\321\203?\357\301\020\336\303\312\211?kRo\345\243\307Z?r3t\235Z>\304\277`\007\255\013h7\260?\200k\207\274n\334\241? ~\335m\0078\306\277\350\243k\252\027\021\246\277\301p<\014\236#\242?z\314uW\314\301i\277\322d1wN/\240?Y\341\342\035\352\273\255?\343Z\304\342\375\331\256\277#\033\371\320\306\220\245\277S\002\244.\000*\254?\0247\350\367oq\265\2776k\213\223D\364\210\277\t\201\200\250@\325|?_a\320(\256A\254\277b\331>w\221(\242?\265\213\'\212\251W\230\2774\236u~k\026\303\277u\215\037\365\232\310\203?\326\251\321/:\356\216\277Q\367\001Hm\342t?p\013)N\324#\204\277(u\004\2333\325\250\277S~\3714\214Z\270?\353\207\'\247\265\352\270?5\306\216\223\260\331\255?\205\002?uo\357\211\277V\361\270;z\342\251\277\030\232\324\230\\\001\203? \300\357\315\331|\240?H#\016\365\225\351\202?$\010n\334\026\360\260\277\225\207\304\276\026T\231?\3117_\025=\252\275\277\236\245@s\221\323\326\277\365`\035\212\254|\244?R@^8\245\366\221?#\351\271\326\365C\204?\007\310\346\226\225\247\223?Y2\200\035#\314\243?\025A\340\244\020\230\220?\036\333\007`\3200\265\277,\334\374\003\010\306\304\277U\360\030t\373\022\242?e\335\261k\212\346z?\037/A\231\210\257\243?,\372\236\354\301\377\240?\322\013~\350p\027k\277\304\034tqjS\204?\313\334\213N\347\241\244\277\362\200\313\306\367\203\225\277%#l\032\t\244\243?\371\242\313\010`\344t\277\205\025<\277\0073\242?\342$\341\003\272}V\277z\3065s\205\315\247\277\250v2\252\237F\200\277\254i\235\014\034=\235?\367\037,rnd\242?>\371\361 \010S\261?\323)\016\356nh\304\277\252>Z\023@nu?B}\337\200\025\256\260\277T\374\034u-\207\235?\304\276\203\360\177\177^?\251.s\311WS\250?\223\237\207\354\031H\262?ed\337\001\335\030\214?\334\232\320\313\370\\\254?\352-\312\336\3451\237\277\303\267\312\302\300;\215?!<\034U4s\251?\303{g\344\216_\211\277"
      }
    }
  }
}
node {
  name: "normalize_element/component_89"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "\373\032\276\217\347V\250?[\037{bB\361\314\277R_\003\023\231\350\263?T\335\303(\177,\252\277K\314\004\332U\374\230?\224_\t\033\323P\223?\235/mm\036\335\255?\334\022V\266Q\225\252?\240\277\027\371\321}\303\277\3320c:\017O\226?\370\2759\233\017\201\247?F|\345I\353\322s?\022s\270r\320\007\230\277u\223\'/\203H\250\277\204!\022\210N\004\206\277.\201\245\004\016\262\266\277\347\344O\230S\251\241?&\247v\206\251-\237\277\034\261\353\036\246k\214\277\301\036\205~\265\211\234?\231\327X\\\370\316\250\277YSG1\272h\253?\3734\344[\374F\266?\235\004P;\345\231\240?(\244tj\340\247\243?\001\234\014\376\346\024\251?k_\304g\200E\252?\365tHF\333\354\232?\375\230\302\302\312\032\231?p\266\356#\r\'\245?y\235\000\317e\206\223?\270He\200\307\224\224?\370E(\007\312\245\225?5\261`\345G1\235\277>T\277w@~\253?\233n<L\271\312|\277p\203\266\251us\256?\344(\243>\207\001\240?q\242:v\200\302\241\277`\263\037\323!\n\245? %vmo\267\244\277\024\002\245\340\252d\226?1\230\025C\237\263\200?\363\226\217\312k*\255\277\257\3645&\037\026\253?\230\300\364\220\005Y\255?Y\3624=\201\340\245?\013\032S\340\377\357\211?\301\317>\252\357i\244?.\236\031{1\277\241\277\371e\211\376ka\301\277T\252\220g\241\341\204\277\302)\3029b\256\240\277\277\206;r\377,\320\277\370ocU\262\323\256\277\234\232\020\342\346.\253?\220\266\371\230r2\221\2770\027\351,P\336\250?12\221j\211\251\215\277\376\3030<\003\336\232\277\306l\255U\331|\224\277\370\323\375\236\203\'\225?\010\247\000v@\242q\277\316Ob\361J{\207\277\032S\236\343\035\214\216\277~zdZ8\234\233\277\2400\213\375#\333\245?\272\345\353~\212\355\232\2776\240\277\177\334F\243?\310\254\2446\3559\033?\267\236\230*U\370\230?\200\254\313\034\327.\211?d1\245\206\032+\300\277\007\341X\267D\245\222\27780\373m6\363\221?\312\350\311\372\242\304\312\277\214!\274\032\371\354\233?h\345\354\nn\205\223?g\311\273\241+\274\266?\037\305\352\243\024\363\260\277\221%\'\236\251\223\255\2774\226l\031\311N\250?SW\355\203\364`\223\277\257\201Y\023\236\337\216?\ty\247|\264\252h?\247^\274\301E^\226\277\352@\'\233\252/\242?\272<f8O\211\270\277\020\377\200l1\366\210?\013\307\252C\231F\300\277\217\251\375\316\335K\301\277\345^\242r\372\027\252\277\232+\343\334\257\315\215?\0353\021\265\273\247e\277\250,\245\217BW\223?\032A\273\'5\322\252\277\346\211\277\2443[\230?\006\374E\311\336\344\265\277\260\251?7>\327\262\277JV\236p\021@\213\277L9\224\336\215\276\231\277\227)%\205+\000\264?\300\220\354I\024\345\242?\327\277\2253\256\224\246?O$|\0257s\242\277e\343O\301\322\332\231?o\214\007\325\262\'\234?n9_8L\376\301\277\276\026\301\355sv\266?\037\224\324b j\221?\270 \201]R\327\271\277M!\016\024\243\247\243?\331v\347D\023\014\240?\317e\017YIP\265\277\237$\270\354k\270\213?~\242,(~\037\223\277G9!?\336UV?6\210\263{\"\352\216?\372k\276\271\333\317\221?\360\350\276\035Z\304\201?\2619gA\261 \302\277\262\003\252)\020\020\256?n\001\001h\035 \245?T|\300_s\336\307\277P]3\330X\262\246\277\237\367\364H\353\276\237?@^\354\026\261\352\200\277uq])\262s\242?\325xV\303_B\261?\332r\r\267lB\257\277\2039r\213\226\217\236\277\313$\353\274\002\333\252?\260\237+5n\366\260\277V\245\377u\006\367\217\277\251\267d\'L\260\205?ZQZ\352\346\003\251\277\337Ma\354W\026\244?\270\354\250\033<\324\211\277,i*c\372\340\302\277\0203pJ\275\312\205?\022\341\224\366\\_q\277\257\371:n\315]h\277\026\307\375\036\'\022m?\303\372\237\371%\255\242\277\023\353\221\\\267n\250?~&e\314\tL\270?\332|\354\306l\335\252?o\n^\006\371_z\277;\010y\276\030*\252\2773z)\315\312\034i?\363O\2310\324@\247?\313@mmD\244t\277\231\257\225Gl\264\246\277\332\030\345\340lO\231?\357$\020\031\320\267\300\277@\033\031\341v\223\327\277\004\375/\036x\221\245?bY\233\214K\321\205?\362\366\307K\234\264\223?\t\037\211\030(\211\212?\006\002\360\221\305\344\242?\341G\303\226\017\"h?\022\352\233\224\177\266\266\277\361g\311\372\005/\304\277\036\030\330\024\334\320\233?-j~\2343\031\207?\260$\251\347\005!\240?\234\226\023E,\210\241?\027\022\000\201\246\334w??\021\320\354\326\014\206?\tI\224-\372Y\253\277I\223U\210|\324\251\277\251\256y\336X\023\246?\334 X*\257bo?\3048\267\275h\205\242?\342\317\270\274\256i\202\277\243^K#\301\257\244\277\374\267\031\016N\273\223\277\220\355\267\241\"\201\234?\021~\017\202\201,\241?,\376\257mcI\263?\326\255\236\223\336w\304\2778O\337\254m\374\210?\277j]Q\347]\260\277j\311\0132\307\307\224?B\246\204y\362]h\277\211\206F)\201\312\244?|i\202\217^\340\261?\363\347\'\021\353\321\223?e\273\364\217\273\021\260?\021\203\206\037\030\027\240\2779\270]0\004u\210?\235,\340^\314\250\247?\177gNs\377L}\277"
      }
    }
  }
}
node {
  name: "normalize_element/component_90"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "\233\214bm\027\220\247?\311\206\034\370\244\325\312\277W\305y\nI~\265?\314/\246@6.\231\277\213FUK\356;\214?\006\374z\273\256*\224?1\024;\020\025\007\260?\313\320U\023t\026\253?!\267M[\235\310\302\277\363\021\257\355\030\027\225?\020\247\240\226w\271\244?\346\203\010\262J[\203?\203\254\021;\377\350\222\277\340\201\265\365\311\r\251\277\307\3416\224\206\214r?\214Tx\3154\254\265\277Z^\1773\255$\244?\375\007\276\215\300d\232\277\206\263?v5~\241\277\376<\345OV7\240?@\013\244\354v\273\250\277\001q\371=!\243\253?\205/\2325{\227\264?V\021\357\262\277\351\236?\216\213\303\311\230\343\236?\325k\\\372\365\025\252?j]\257X\337\232\242?E\337\034/V4\225?\371\314\243,\215\251\227?Y\371\213\367\350\257\245?\275e=km\320\225?\232{\374i\231\310\227?\376\016J:\370\371\227?\236\003@\037\251\341\234\277\265\211\034\355{~\254?@\266\355\372SJ\230\277\317\371OU\246:\252?\266\016\004\204\263\264\240?\3046\356<\r\362\241\277W\3010\337H@\241?\220\274\246\031\350`\251\277\322j\246Me\351\230?D\237%NBwV\277\0009\311\245\335\'\260\277x\342]!\2709\254?\035\366\025\200S\023\255?\017\260\320\263\313J\246?\206\013%\005\251#\220?t\226$\222\222e\240?y\002\243\303*{\245\277\366\246u]\360\220\305\277\211\237\253\037.H\211\277r\2360\257\303\233\241\277}\030Ot\305;\320\277x\032\240\234\267\235\257\277\255\340\313\005\255\016\243?p\"\033\304\336\366\220\277\037\214\252\357\224\277\253?\233\343\3754\305N\206\277\210\310]B\r\370\231\277\031(\223\224\2401\222\277\251\251\007\372{\221\225?!R\217\021\251\231\200?W\026;\320\371\337\232\277\372\245\205\2309\307\206\277\032\376a\270+\325\232\277a\017\353b\332\004\246?\303\335L\221\353\302\251\277S!\201\263R\020\243?\265\253\026,c\260c\277\356.\304\250s^\222?\252\247$%\034\376\223?\222a\010Eb\036\300\277\3438%]\211\371\231\277u\237#\277l\245\227?\322\"\202A7S\314\277\350\251\333\307tb\233?l\375\205\002\334J\224?=\006\354\351q\377\265?\373\355\203\335\304Q\240\277\336\330DJ\331@\251\277P\205\276B\206X\246?s\014\373O\224\n\206\277\220\213\210g\253\300\204?w\240-k\213\000\211?\333G\343Z1\177\204\277s\355\205\256\266\365\240?I\344{y\023\331\255\277D\367Q\262A\313\203?\314;\235\027f\242\275\277\352H\344q\007\240\267\277\350\203el\350f\247\277\256\305\256\272\374\361\232?\216\320\302\252\351\226\203\277\250\\lP\267\220\226?O\237\214\r\267%\221\277\227\\v\234c\277\233?!\326vn5F\264\277\250#\"*\304\213\261\277B\346\341<P2\223\277&\344l\002XY\233\277\005\311u2\274\002\260?\2046@6\267\254\234?\000\314\277\332t\253\244?Akl\031\352\\\235\277\027\030\264\273\000.\232?i\236E\267\252a\237?\220\204\352\327\267\202\302\277\363,\013\235\014\313\264?Ex\225d\006\362h?\025k2\217n\027\274\277\326E\014f\014\246\243?F\375\213&kb\240?\270\323E&\272\020\264\277\357\023\017A8\023\223?U\201F(7\003\214\277\177\335\351\316\023\317i\277\024m\364U\345\207\231?\177Y\327\361*.\230?\206\177\350\2644\330\220?Tu\0134\n\017\275\277\214&O\r\277\221\253?]Nqk\276\211\246? .\006\375\357\202\311\277\216\326\000\216\005\321\246\277\214\221\013\037(\357\233?^\317\235\201\r_\205\277\3221;\031\211\301\246?95oS>\257\263?\202~\005\207\034\375\256\277Ix\214<Z\346\212\2774n\365\222\202K\251?13\304\225\331>\247\277\327dX\210\270\200\202?^D\2051\274n\216?z\232\371\371\342\227\245\277\202\315s#\260b\246?\203j]L.$\236\277ls3A\254\265\302\277\017\234\204\351\263\267\207?\255\223+\243.\245\200?(\314 \343\366p\202\277\006o\250\025/\341\223?1\377X\360\361\365\222\277R\320*\211\245\256\226?\032\340\202lY>\267?\207fv\224\205\332\246?\357SP\257f-M?\237j\224\370S\030\252\277\014\375A\224\227KV\277\263\331\034\335\304m\246?\266\245s\035aS\206\277\032\327\246N\223[\213\277E\315/\001\372\250\231?Cd\235\231|\r\300\277\221\372v\010\237\252\324\277\327Js!\022b\246?O\360\025)\t\223v?\242\350\276\362\331g\227?U$\364m\240D\200?\0013\2233\n\005\242?\254\347\203\351\244\214\202\277\'\376 y\204&\270\277\203\037\266\243!+\303\277\006e\250\367E#\226?\t\3776L\263\307\217?<\034\307\211[w\232?%\375<\224\010W\242?\216\311J\342\230\244\217?\247_\\\211\304-\210?\265\313m\261\221Z\262\277K\214r$(b\266\277\312\263[c\201\303\250?\342\332\220Luk\213?\220\277\271a\t\333\242?\213\243=!\345n\216\277Lm-\274`\252\241\277\254!\307\217^\370\234\277\321\nF\004g\031\235?\033$\216\206\235s\240?\014g\005&:B\265?\360\0079x\361A\304\277]\'D\254=m\226?h\321\262#\022\333\256\277\305\253?\321[\215\207?\226\347\361\026p\030z\277\250V\001\354\023\250\242?+(\017\202\303\310\262?r\351y\346\316\024\234?*\355[M\241j\261?7\232h\377\037\001\237\277`\241\353\3179\320\221?u\020K5y\353\245?#\305\363^$\320Z\277"
      }
    }
  }
}
node {
  name: "normalize_element/component_91"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "\021\r\372\3560\317\246?\236F\023U\343\030\307\277\363\303\\\340_u\270?=)w\305\252FQ?\014\271\003\211\256\212~?\004\232\216Tm\244\225?\337\250\207\373\327\330\260?\270\365\337\362t\210\254?\344\275\036\327|\030\302\277\257>\310\3715n\230?\215\271)\355&[\242?\032\367\370\032\010\035\212?\233\334\246z]\177\215\277=\337\230cN\327\246\277\003C|~\035\332\221?\240L}\002#\r\264\277D<&\0236\212\246?\350\263\001\255\000\254\226\277\024\335\236\023\207\333\244\277\366\274\016\341\007\003\243?\312\324xw\321H\251\277\034~\324\262\367\332\253?\n\206\236\215\217(\264?\217\231Iv\232<\235?\332v\356\376\367.\233?\304{\234\326^%\251?Z3%\236[\004\230?\035Y\316\345\323Q\222?\313\000,\377\025\212\232?Bu\367)\\\311\246?\351\370\310\343\362\352\231?\013\027\037\212\365R\232?\204\332(\030\271\232\233?U\300\216\026\237\266\233\277\274\035j\246>:\256?\203\302\301Z\214\354\240\277D\320)\254z\027\246?@I\223\350\353M\241?\252a,\304\004\344\240\277\205^\177\022\237;\235?7\363\004\362\207\307\252\277@[\355\262v\023\236?(\360\300\223%Y\200\2775\254`VSR\257\277 \374\034\003\330\236\255?Y5\204:\027\014\255?e\215\233\226/\232\246?\020\247\2672\355\n\223?\322\201\216Q\374\352\232?!\252~\022\220\020\247\277\371\3365\241vc\310\277\260S\235\357V\177\214\277wMn2\257\305\240\277ce\326\200x\305\317\277\260\367\224\374\205\'\260\277F\250\252\264\353\374\226?eMHEE\227\215\277\230\307\254t\375\326\255?\375s\020\3654\300r\277\337\021\217p\314E\227\277?\325o\3063\337\212\277B\357\377v\350\332\226?\021\335\232\0211g\222?\006\034\266\353\255\232\236\277\311C\201l\311\022|\277-F/3\004\261\232\277s\257\020yr\035\246?Pg\313\022\315\236\254\277\337y\242\036\264\264\243?\023\333\313 \270vd\277\274O\007\022\021\207\217?8;zE\265]\232?\340j\3108y\243\277\277\024\001\201\340\207\t\234\277\017\251\315\370\361\251\235?8\215\277}\265\324\314\277\227`Mr{\332\231?t4\266\363\327\r\224?\260\332{?\325k\265?[O!\025\316\207\220\277n\203\306\213\006\242\245\277\343\033\242\2738\262\244?\263\002\343\343\212\300e?\236(U\027\372\244~?\314h\375\220+\263\226?\342,M\223\027n`\277\342?\354k\256\261\237?l\310\2232\026>\245\277\360gM3\252\372\177?\270\331i\265\321J\272\277\263o^\004\334\337H\277\252J\201#\206\277\230\277s\000\343j{\363\242?\243\010\215\206\252\235\213\277\024\"\277\002\301\261\233?H\303\226\017\"\310\244\277\271\272E[\363\265\240?\213\355\021\021\316\014\262\277y\273\261\342L\372\257\277\002\207H4\036\370\224\277WS\032\2602\272\234\277Z\335f\001E\362\250?\325\n\262\3511_\232?\222\225\265\006\034-\244?M\274u\221Q\204\227\277\026\255\263\214\232\320\232?\343\273%\035\013(\241?\005\247CIv\234\302\277\316G8~\277\320\262?e\240oa\226\243s\277\321\202\020\303 F\275\277\307\007)\267n\374\242?\025\213\271M\263\236\241?Q\260,\274\276\033\261\277\306Cf\316\375L\232?\356\374\r\240\000\006\201\277,\311\336\253\206_z\277\243\364\243\346Ms\241?\210w\244\355\244-\234?3,~\007\312c\227?\007\212\265~NO\265\277^\026R\377\322\002\252?z?fN4\233\245?tf\222\303\355\361\311\277\343\035\357t8\321\246\277\372CT]\227L\231?}-\347\006\316\017\177\277\021\370BOj2\253?Q8*S\246z\264?\221C\224\224\223\007\256\277\027^V\034__Q?\264s\206!\363z\247?\311\233\330P%[\233\277\360\241\271X\225\240\245?{\303a\217\247\352\222?\224\354d\262\260\216\243\277,\017\331\r\3113\250?[\314\300\342\037\237\240\277\3063\325\204\316\232\302\277\025<\333\\bP\211?\214;\374:\022]\223?\00324\321\371\206\210\277\263X\275\325\320\214\240?\302\370\035NV\310i\277\007e\274\333,\306\213?)\rN\247\351\361\265?[\311\r\r+\337\243?-\346\221\206\355\003\201?\304\251\3363u\313\251\277\300\372\264\224pD>\277\344\333\346\206\331\335\241?P=\353}W\302\206\277\267\322@3U\036\221?\275\206U\306\003\355\231?w\244\270\262]\204\275\277v\201S\236\307\010\326\277\370\r\205b:\223\246?`\001!\231\333\253i?\r\n\265l\316=\242?\0332\014\302V\265~?\351-D\245\026\354\241?\345.i\\\235;\222\277\233\365\013q\n}\270\277\243\362\024\021|\016\302\277\177\276ot|Q\224?A-\202\326.3\223?I\273\253\000\332\264\230?\023K\210\301\025\263\244?\321.\375P\013S\231?\255\204\351\331~\302\211?\207:<\034\016_\265\277\376p\336\237U]\275\277\305\241\213A\270\346\252?\177\014/\036d\255\225?\220\024OEC)\243?\222\326W\330\205\177\222\277\025\204\365\366\034\225\237\277\244BVf3O\241\277@\016\243P\261\222\240?\371\276K\270v\363\237?\365]+Pt%\266?ruNS\316\316\303\277:\205\270\031>\207\237?\201\257\343\035\262\021\254\277s\226\352\346\0107v?\214\300\254\336N\023\177\277\364\374\374\006\014\343\242?l\002[\021t\265\263?[d\347\337\301^\241?\022\317D\236Ek\262?\tt\247\355\277\313\233\277\"\250a\222\246N\231?\034\274\235\347\311\341\244?U\301\221\010\331\356h?"
      }
    }
  }
}
node {
  name: "normalize_element/component_92"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "#V0>\215\372\245?\322\202f\303\331\256\315\277c\322&!mp\267?\033\341\020Q\034\245\222?\342F\013|\267\014\177?\271\352\203*\n\373\227?|\365\nn\030\303\260?\000K\370\357\013\371\256?\310\342\362\2604\226\301\277L\274\231W\311U\233?[\336\364\345\007\331\240?:\230\311G\275m\213?\311\206\2400I\341\211\277\234q\221\260\254\212\244\277\326\343rG\365Y\226?v\342wu\2749\262\277\366\260z4\223w\247?{\021h\016\033\365\224\277%\037\273\013\224\024\230\277\030\340\035As\233\245?\2608{\353\354\371\252\277\253\351$\2422\332\253?\'\301*\375\325\372\265?\014\242\210!F\303\234?\324\201\024\213\3130\240?\362aL\263\246\235\244?\346\254k\216UE\222?\263\341\263\354~R\223?\213\016\210\335e)\240?o\325Eo\220\307\250?\014\204\317\234\0268\240?}\246}\304\306\364\232?E\235\204\225\264)\241?\345\305\037\313\326\210\231\277\373\230\273\010\346\367\254?\244\261w\370\313$\231\277\301_6{L\026\242?D\230\233\2425\234\241?\331\003\t1g\033\235\277-T\"|4D\235?\032e\235\3645\000\247\277\250\364b\024C\363\242?\206\377\261f\035\273\177\277\005\247\030\311\031\350\254\277Jc\223\200\301\003\260?\371z\277\035\035a\255?x\300\000\270\025\237\246?\216\267\215\355Rv\224?N\263\250\236\270[\223?\321sC\007\350\264\246\277I\362\272P\211\003\310\277=];#\332&\216\277\215\006\247@\221\347\231\277\314\210pk\211\027\316\277H\034\177\220\317\245\257\277bBbA\265O\220?\250y1\016\332\035\205\277\337\205Mg\236\221\256?\350\256\222\200\262\330\177\277\031.\347\\\316\310\223\277\267\336\263\321\340\206}\277\330v\214\213\240\272\230?\235\260\302\002\237\354\224?k,\025\337F\206\240\277\263\240\261\250\350Ef\277\033\305\036L\035\363\232\277m\353\322\177\t\356\245?k\203\260\246\364D\254\277\314\203\335x\303\362\244?\253\032J\016T\235`\277\314H\023\250+\303\223?\006[;=.+\236?*\237\023\262[\232\276\277\022Q\351\263E\312\227\277\3425\003\352:E\242?c\202\240\367T{\313\277\365\260\207^\225\367\226?J4X\243\344\366\227?Y\374\253i\014*\265?\2334k\373\347\001\244\277\341\356\327]\323\225\244\277\226\316\250u\362T\243?\317\227\232\341_4\202??\223X\255\247\261\200?\342\237\361\37390\235?\335\302\331\376\2541<\277\340B\005$\355\210\235?E\225 w\237P\236\277\271\022\216\024\"\304{?r\364\320\365\177\271\266\277\371\177\204J$\375\322\277)\376\326\353i\311\207\277\253\355\230M\217\214\246?\203\202\355\210\214\014\213\277a\254S\013C\351\240?K\204\236\261U\240\240\277\226j\362\326\361F\245?\365XVA\334:\256\277O9B\340*J\255\277\343-H\024\t\217\220\277`?\32318a\236\277w\227\332>#\222\244?\327\211\223G\254\317\241?\352vh\353\357\213\246?\251\263\266\320e\317\227\277P\214n\2655\277\233?o5\030\016w:\242?\215\277;\231\202\354\301\277\201~\261\207\216\316\245?q\212\226U;7k\277P;\304\213\372.\267\277\250\234\255\276\345\252\241?\245\'\336a\020\341\243?\367\224\2120\277\177\247\277;\241\223\202\307\347\234?N\215\213\373s\367g\277*5\227\365D\322\200\277,\214*L\252y\242?\363ZZ$%\361\231?^\354]\206v\203\231?\212\317\206\304\211$\256\277\177L@S|j\252?0~\006\023\000\225\253?\306\300\351F \352\307\277\302\"\245*\204\r\247\277\343h\r,\347U\230?)\"\230\252\201\324\200\277\374\033k\201h\246\255?\273\214\303\3425\004\262?\244\202\365Eci\254\277Sc\242>R\017t?\202iFv\rI\245?u\213\220\037\311c\220\277\264Z\322\344q7\254?F\224\010\352\032\201\224?_W\rn\335`\244\277\220\337,<g\277\250?\017\010e\373?p\221\277\313\365\002(P\210\302\277\236\310T@(\217\211?\252r\002\034@\224\231?tWg\226\263`\206\277\307F\372\2264\244\242?Y\030\331\320\370~=?\337)T\237\372\363\200?z\rR\324\277\302\264?\335h\247\2669m\241?=\345k\253f\221\216?\270J\233\235Qb\251\277\216\362W\276\352\245\202?p\254G\276k\000\237?x\251C4\333\221\211\277\035\314\201y#N\242?!\013\345\005W\307\231?\241\342\242\324\n\305\276\277I>X\301\315\024\324\277D\305\230\361?\304\245?\350\225\367\340\321\240r?\255\267\366\323\271\201\245?${\301\37592\216?\3056\305\275\333\267\242?\261\327?x\2027\217\277\"\017\344\243<\250\266\277J{\360\313z \301\277\372JP^\214\312\227?\321\037\220\007\377{\240?PH\201\361K~\235?\363\'\035\361\323\324\251?r\025:\230\025\326\240?b\376\334`@\340\211?\263\366\220S\350z\263\277\270.]\n\r\031\275\277X/\245\177`\306\253?&\034T\304\344k\231?\253T\033_%f\243?$*\306\214\377!\222\277\363F\377.\340#\240\277\313\315\322v\225\263\241\277\317\"\021\243\262$\250?@S\n\025w\027\237?!\314\302\336\221\237\264?\324r\315\010b%\303\277\257H[{\360\361\241?\002IET\302\302\250\277\270?\347\323\0022\232?H9\356M9Jy\277\311\300\377+2\007\245?kJ\306\362-\372\261?\220\004\271BZ\216\241?!\365\302\220\341\240\264?\350\315Zj\272\'\234\277\017A\354\204KR\233?\332\263\000\320\325\024\245?-4\264Z\220\310w?"
      }
    }
  }
}
node {
  name: "normalize_element/component_93"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "\250\307\300~\253\034\245?\274ka\372\204\n\305\277\231\204\243\225\217\345\263?QK\307*\022\004\233?K\272=s\234\374\212?\r\005d\226\332\336\232?d(\207L\202\002\260?-\020\201F\220\032\261?\372:\357Ms5\301\277\350\366\251b\336n\237?\274_\363\024\263\n\240?#\002x\205\352X\210?z\203]\204\221\255\212\277o\262\207\242\262\364\241\277)\334\014\346\230\364\223?+\355\024x\025<\260\277\347\036\301v\370\267\247?\304a\33350\330\224\277\367\372\244$5\376\202?Mo\303K\0272\250?\313\232t5[t\255\277\301y98M\251\253?Of\223.\303 \271?\331\314\306\357\022A\235?g\343\310\320\237\240\245?_\370|%t\275\233?\246\265\212z\230(\222?>\356\206-p\213\227?\376\362\2555\2620\244?X\245}>\215%\253?g\203\031A\315\n\244?\242\336\230\rN\036\232?\312;.z\014.\245?\260\372\nob\212\226\277r\027;\303\317\335\252?\321iH\242\270_e\277\316\026\374u(\274\234?\262\002\312F\352\264\241?[\202c\001\331\014\226\277\365\n\"\212}\215\240?@\204%\017%\t\237\277\307\276\362\215\331s\247?\332\016\006\321l\264b\277\272i\252\\\345_\250\277b/\356\350z\200\261?\022e\375\323\376\350\255?\250\221\361\203Nc\246?\200>x\212\250\313\224?y\323n\2402\221\215?\344\3270\277\252\345\244\277\001H\2117\0249\305\277(\251\2442\353\343\216\277U\201\331\213\010\311\215\277\306\336eh7\230\313\277yxF\220\207\024\256\277\371_(\014<\212\220?0?\375\210\333xr\277\236\345\031\376J\034\256?\007\002\343g\303d\221\277\2717\357\232\270\236\216\277\347d\022G8\223\021?\377\202h\243\366\377\232?m\032\2532+\222\221?\231\022Sf\246[\240\277F\312\232\201_]T?t\312\2177z\256\233\277\021\220\030\005\rr\245?m^\315\350\344\230\244\277\244\254&\"\330\305\246?\364>\363\021\257\355H\277\261{\353\366kH\234?\336(8\020 \260\237?\277]\022A~1\275\277I\230{\336\023?\214\277\266\2227o\205x\245?\016i\361\265\251\262\310\277&h\347\302\265\313\222?`\204\n\275\347\210\236?K4\t]\0201\265?o\205\243\360H\330\265\277^f\274\323\273}\245\277\232\376\316\361/T\242?\376\3551\337a\335\203?\020\253&%\220T\207?\027\217*A\201\242\240?\210\225\215\253\352\025q\277\252)\013W\356\242\233?9\010\310\004\355\357\237\277\245n\350\337\216mz?\005I\2619\215\010\263\277\223\214\004i\262\276\245\277\016\231\350\2574I\\\277\251\323\366\271\036\250\250?\322\024dx\252K\203\277=\021;\210\332\214\244?\004\031Z\315\325\267\240\277\346\203\027\335w\225\252?C\242\3711 Z\247\277Y/\373\177\031\257\252\2777\226\255~7\240\177\277cG\343P\277\013\240\277SK\301\272\364\246\244?\026\324n\3662J\252?K\213\322\\\251\222\252?\265\242c\215\316\207\234\277\371\243\255\354\260\371\234?!\342\315\267\221\364\242?\034\257\333\310\276\251\300\277\264G3\014\333\363\215?[;\301f\317Qv?\214\347\212W\373i\252\277u\210}\327\247\351\237?\240\220`T\231\374\246?R\031\013\262\201N\224\277\272\000>\274\n\320\234?\3014e\327X\352b?\n\006\230x\216h\201\277\264\3117\224\007\r\241?H\357D\336\254\240\223?/~\253Y\215C\230?\200\017\366\327?\020\246\277\332c\347B\354\031\254?\274j\252\226\220\351\242?\036\247\234\272\350\'\304\277\205Z\352XYf\247\277\351\033\376\276r\311\230?\266O_\200\221X\205\277\311k-\345\337\333\256?\224n\350\271\307\312\252?\n\013!\371\340;\252\2778\225\201\r\314-D?c7R\007\220\331\242?(#\301c^\230\207\277\262\026\372\273\322\215\254?M\316t\242i\370\224?5\247\334\216\272\347\246\277\2426\232\361\360}\250?\234ZF\202Z \206?jVA\002\002z\302\277\3031\n\003H\315\210?\366f\275\340\037+\234?\3226TE\036\254z\277\211,\327}\365(\241?\321\251B;[\313r\277q\324\300E\335\275\206?>\r,\010d}\263?\\6\000<\036\n\240?\020VT\336=)\225?`\205.\275\n\344\250\277R\363\362\307\366R\231?\036*?\ti\026\235?f\201\210j\320\353\211\277\025\222C\371\277y\247?/b\031\307\272K\231?r\"\030\014P\310\300\277\375\366T\322\263.\322\277l\037\307\026O+\244?\216\323\330\252\231\277\202?+\\\267\212\303n\250?\220\210Y\312Z\214\233?\251Bx\276\3437\244?\326\242\233\203\273Aa\277\267j\244\223\017;\263\2774\230+(\261P\300\277\026\032\377s\325\222\237?,\245\350\372\236\216\252?.X\223o\002H\243?\312\215\352\300\2560\260?\033\315\3740c\206\244?\205\204\0335\316\302\210?\245\273(\320\340\034\254\277\260\343\'$\205q\267\277 \336\0227\251\223\253?A\016\233\337h{\231?\'\213r\236\356\222\243?k\267\341\240R_\215\277\377\262\321\362i9\242\277<E\372,P\004\240\277Y\346c-\364w\257?\003\236\201\177\264y\236?\324\361\344\017\020\220\261?\334\222\274=\177O\302\277\270Z\277JRZ\242?\035\362\023*\337\003\245\277\233\0253\275\"\312\257?\325\304\264\317`\334h\277q\024\346^\334\035\251?\200*\265\261\356\254\260?#\203\341\376Q\013\237?Y^zz\363\273\265?hg\221 n\344\236\277\317\017\254u\245\017\232?\327\006\335\024E\376\245?\344\230\314{\023x|?"
      }
    }
  }
}
node {
  name: "normalize_element/component_94"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "f}\213\315\025E\273?\006h\261\315\363;\344?p|\030\032\2025\302?\247\305>\323\333\267\316?S\222\262\233\322\'\273?\206\226\325q\205B\276?\000W\3718\257>\271?q\257\374\224\213\272\305?\307L\027lg\373\331?\253\203BX\033\320\277?\026\246E6\275/\271?\331\350lf\314\333\310?\263\362\034\250\213H\315?.\335\025\333S\233\301?\024Ud\031\207\337\310?\350\247c\216\030\357\321?\000\327v\\R\212\302?\304P\366\262\307m\307?R\226\r\252\216N\276?o\000\252vU9\303?{\"C\037\020N\301?\235\010\243\330X\251\266?\254\003\377\337\0013\277?\235\204o\355\206e\257?T\372\331-\2419\273?\267\307\r\352\033K\266?\340\305:\326>\275\301?\021\261!5vT\266?Y\202,\016\336\214\254?\276\307\330\212\257\226\300?\001\330{O\267|\252?\362\315\013\267I3\277?\237\276\245i>\221\302?4\330\033O\340\352\317?\231t\361=w\320\300?\264kE\022\362\276\304?\371\265\266o<\277\273?\313\311O\240\013\207\300?\345\3631\357\326Q\310?\255\357\226\300\272e\301?\337.\010\240\251{\311?l\017\'\242\362\376\304?\361M\r\023\221J\313?\360$\274\031BI\301?\"\355\024\345\261j\266?:\324\233\303H~\301?+\001\214\302\211C\271?\272\357FV\346\274\300?\027\253)p\202\324\257?\301\371X\352\3564\303?\032\273\351;dO\325?U\323D\213\253K\317?\036\'\371\317\2420\322?\232i\261\312;\335\332?e\333\302#\214\207\302?\014>\356\327t\357\266?\225n\224\2729\234\273?\0343`\373\217m\265?\321\356\237\215\255\276\303?\372#\220;:(\302?S\033\312\300iP\300?\337\006\267\340\005\204\310?_\244\277\263\0273\303?+,\300\2208x\321?+\355\254\224\240\n\322?;\035?\211\014\001\300?\361?H\002LZ\302?\275\340\025\271\216N\311?\230\017a,n\304\312?j\230\244\251\323\376\301?+\372\001\027}\250\302?&\025\203CL\342\275?\364\302\201\266\363b\332?\205\275\031\315{0\305?\264\264\275WYM\266?\006\023\204\315.O\326?\236\016RZ\371\221\300?\310\215\331\224V\274\306?\\\316m\016L\370\273?\331U4\025c\262\325?\341\235\375\372\201(\317?;\373\341\037j&\304?\363\333c+`i\317?\010~\271\356dr\304?<\203\n7\256\371\303?\177\204\032\353\006=\311?\215\353\264u=\277\271?\034^\025JT\337\310?\244\306\3614zd\304?\345\007\237\307\327\307\341?\334\256\266\263\306\270\342?,G\230\007\210\000\307?\342c\371\270\013\024\320?i\247~\217\016\320\305?\314\214\230\210\2402\266?6\237Yc\347e\310?\302g-\3752\265\214?\021\246I\245\257\022\321?\321\342s\304\255\304\324?Y\232hK\256\206\307?\321\2539\364\241\201\320?pANI\352\305\260?:\325\243n<_\310?\020\275C\214\002=\263?:\032,A\353\206\307?\r\311\214a\225%\271?K\271I\254\217\376\274?6\251\274\253\213\014\330?\347\206lAkU\267?\261\321\315Y\372+\275?\000\321,\006\230\304\315?\224\330\241\331\366/\300?\322`\004\241}\253\271?\020Y\021&\246\372\321?\367\225-\260\314\375\274?\020cS`a>\302?\263-\034k\363\375\303?i[-\255\017\366\302?\251Y\315^\251s\305?Vs\341\211\036\r\312?\327\000\276>\347l\321?\037y\277\210\270\344\267?\325\344\3118\275\200\301?\262\325H\277;\201\333?,\223\235[A\203\272?]\022-\232J\226\273?I\277$e\360\217\303?\177\243\321\250\266W\310?#\336\031\361\2156\300?_\312|\344/]\317?\351\300\031\314\304\214\306?H\220\366\261\025C\272?\374\177]\314\035]\303?\211n\346%9?\276?~\324\250\205g\311\302?\027\232D\355\031\212\320?\353\005\270\203\205Q\250?\036JY+\177\343\302?\317H\277\250\235T\335?\271/\3465\026\327\301?\360q\326B\361\354\302?\342\230\026\t.U\305?(\3054\304\222\341\306?\376\021#\327\217E\315?]\372v\226I\"\272?RPE\202\215\021\270?\273\3706X\223\202\263?\217\367\376\224\227\255\315?\275\205\352\360T\343\307?vi&\214$\t\312?K\271\036,3\n\271?\374r\301t\265p\303?\227t\345\312\330\244\320?\331\201\032\216L_\277?\'U\032\2623\245\312?X@d;&u\344?\357\237l\237\225\001\303?\205\303\264j56\302?\243n\014\246\006?\267?E\004\002\356\220\032\301?\375J\221\303\372\033\272?\004*\206%\312\320\274?\335\203\335\236\212\025\325?\247\233\274\257g[\327?\023\241*\t\375J\302?\211\310*Qh\354\271?\317\227\007~\216\356\300?\322X\201u\252\351\275?\007wA&\024\000\302?O\212=Qe\332\270?\213.?\325\300\355\331?\035\265\205\221\245Y\340?\205\354\233\177\344k\265?<\345\376\0168\227\306?\217\243g\352\335n\264?\213N@Z6\017\316?|\266\246*\201\225\321?\345\312\330\204?\371\307?.\2021\350\245\336\276?\3765[\244I\\\276?\032%\323\224\251\361\232?\205\266\t\350\237o\330?r3\206\200\026\247\276?>+\013T6T\312?a,n\004+\314\266?\337q\277\200\2648\314?\256\210*\2246\251\304?\2636\322\301\026\225\256?\353)o\320)\213\272?\301%\322\306\251\007\262?=)h\232}\214\277?X\022\207\t\366a\307?GQ\244Q:\276\265?\3669<Yqw\314?"
      }
    }
  }
}
node {
  name: "normalize_element/component_95"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "\337\000\000\356\034D\244?O_\350t\315b\305\277\221JX\353)\321\301?=\210\266\306\024j\233?\330\366\314K+\251\226?\"?\302\000\'\263\232?\200\266\354H\251\017\256?\201M\221\324&\364\262?ef\272e\364\324\300\277\350\277N\204\351\210\243?\215\277W\356\261f\237?\235\325\031\027\302\365\202?\371\0373,S\207\215\277\365\343\340\346\025\316\234\277\355qIO=D\216?}!\014\205\315\325\253\277f\315b>-\372\250?\343\364\232\303Z!\225\277\304Z\005\374\335\345\247?\r\371\362\370y0\253?\rrh\250\211\362\257\277\356\375xu\257\017\254?\017\241Y\370K\242\274?\321\311\260\\\377F\236?\335\002\3533\305\356\253?\204\3161A\211\246\212?JGn\212\035F\222?Ww\333nJ\305\235?\272\014\300\205\303r\250?\025\006\021\033\277\377\254?fhg\221 n\247?\335\223\\\005\376\336\230?y\317\370\363\252$\250?\226\217\007\317B\n\223\277\330Sf\333M\026\253?U\267a\261\331\323\230?\333\257\010\354\324\326\226?{Y\250ox\305\241?*\376\231\210Q\354\211\277\201\010\302,\354\035\243?\266\n\300\021m_\211\277\014\035RD:\307\253?pZ\244\024j\tv?\261&\201\223\216\356\242\277\3463\025\354\003\354\262?\'Wl$\355l\254?\371#:;\201\377\245?\236\364\206GW\363\224?\277K/\205\225w\224?\300G\324v\331\320\241\277\3339\341\346\323q\301\277\246)(c\201Q\217\277\247\223 \347\363\ri\277p\254\271\023T\243\310\277t\006\305\335\300\347\253\2776\303ki\3760\223?\247a\305\227\363\006d?\220\001\260l\254\345\254?L\333\205\007Iv\213?\234\324\014\263\024\354\202\277\231~\301\"Jq\201?\263\202\206\316\320\027\235?rw\316\375r\271\207?\210n\0053\367\247\240\277\010z.\247\222nt?\352\321\177\317B\024\235\277\216wL\177$\\\244?PsM\334\205A\241\277\357\345\3508Q\'\251?\267i\314!2w\204?Ir8t,O\243?\207+-D\003\210\237?5\323\314y\027\206\273\277\2124$\000\225\260r\277\306t\363\035\224\341\247?Cm\266\032[\215\305\277B\333\355WZv\213?\223\266\370\341\016>\224?\205\325\210\373\360u\265?\032\'X\370\007\205\301\277\244\rUk@\010\247\277\310\342\260\224b\320\241?s\037X\014Y\010\260?x\034\350\234\375S\220?\343\332b\024\212\310\242?\371\211\034\205\230\t\206\277M=3\nGe\232?\376I#6\275c\241\277\026\013*GT\352z?`\256\364\303\3206\257\277\347\274;<\310\016\277\277\312!\216\347\306\003\222?\364\004\340\244\013\337\251?\276\3333\200\364\243j\277\013\222\343\363/\356\250?\217fP`F \242\277V\340E\016\372\232\257?\210\'jR\322\017\240\277\261\376%bw\245\247\277\200\014\tW\301!d?L\376s\r=\246\240\277p\001$w1\375\244?\263\301\352\021h\005\262?\345K\003\232c\324\256?r/\3738D#\241\277\035\354a\360\257l\236?B\010\017m\334o\243?\201~\356\352\246+\276\277X\017A\320/\034\240?\251\303\363\032\007\323\222?I)\302/\360:\263\277\312_\316*;\026\234?7z\360k\010\264\252?\0069t\357\353\004\177?\214L2\005z\307\234?\361W.?ck}?a(\372X\316\231}\277\352\330\035_6\222\236?F\245_\302k\016\211?\026\223/O\204`\227?\362/\204\307w\\\243\277\361\330\270\306\263@\256?:\326\263\212x\227\241?\246\254\021\207\215\256\277\277\345\013\355\253\221\256\247\277\361\350DW)\n\232?0\262/\234\025\230\234?\tC\371\217@\024\260?\265\345\214\303\301\'\240?\027Hq\n\002\226\247\277\316\264\244s\343\265y\277\351G\327\rZ\226\240?\302\'\022V\247&\204\277C\001H^\267\267\256?I\354\226\301qI\224?Z\266d\302 \312\251\277}u\215Ju\367\247?\225l\366\271:\375\244?\323y\224\027\207]\302\277\246s\231(\257\206\211?\021\007\331\027\250C\235?\220\024pS,L\031?\223\253SC\355G\234?y\360\236\371X\236\210\277\233]MW\335\016\234?A?D\204.\312\261?\325A\245\344\261s\236?\n\243G\366\202\373\231?\341W\366n=T\250\277B\177s\017\241\373\245?G\226\277\207\272+\233?\016\245\310\352\356\353\200\277+\324\247\020 \'\252?\033bpX\020\206\230?\227\252c~6~\301\277\276e\247O\r<\320\2777e\270K,:\242?\016\207!I{I\220?lr\332N\271\224\252?k\027=1\227\306\244?\342\344\232\334\321\372\247?\t&\326`\034\207r\277?\206)\362m\277\256\277DV\240\336\330(\277\277\nm\'\264&\302\244?\212^\343\206!j\235?\344\211F\225f\225\250?q\325\325\032\323^\263?\n\3664gJ\331\247?\323\250<\221\222\344\206?Q\325\201\317\266j\236\277\"\252\033\350\324\247\257\277%\366v<G\223\252?\'\035\037\014\300/\227?,\370[\2455\262\243?^\323(\311\337b\202\277\324\331\357\247\313\004\245\2770j\",]\323\231\277n\306\234y\317\007\255?\366P$]\010y\236?\242\264\353i}M\254?\021\323t,\245]\301\277!^\232\314\2770\242?\377\\\343\034=\312\240\277\005+w4H\240\233?\003-Cm2\342V?\235\373\001\3106\224\256?\377\027D\256\030\321\263?\242x\213C\332\037\232?\352<7(\362\010\262?.\355{\244&\231\240\277\233\250\240\000\\Y\230?\222\241NlJ!\247?\322p:1:\014}?"
      }
    }
  }
}
node {
  name: "normalize_element/component_96"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "\0364(\213\334\202\243?\364\323\013\200\351\033\304\277G\332\273v\321\246\267?\313\227\267\355\362\342\227?+(\247\236Nw\241?*\276]\323\334:\234?\202\220R\'\245B\254?iD\330\014J\372\264?$V\341\367\270t\300\277\220\327]\202Nf\250?\335\202\337e\n\306\236?\016\274\355Q\236\312x?\373\226\253\262\376\265\211\277\306\352\003\207\037\265\224\277\327\312`\231r\026\202?\241\030m\026\256\225\246\277\017n\211a)\300\253?\365\374}\207!\300\227\277 \000\316\021M.\264?\203\350%\323\\\377\256?\303\2020\364\336Q\261\277\355\177{\374\260n\254?I\347\003\317\253\244\276?\201\317|\277\262\201\237?\213Loh\222$\260?5\244\316\377R\326d?\014\266gO/\034\223?&^Y\372\264\260\242?\277\332\2768\322\310\254?\006\224\377)R\352\256?\263\215\361\301h\337\252?\375\331d\2244m\227?\3218\273R\"\313\247?k\300\314\351E\374\215\277!\340\314\214\327\354\253?h\375\276c\236\263\252?\244\0026\006\356W\221?}\005\277\306[\322\241?\020q\023\270\354Ea\277C \234\361\253\251\245?\"\1773\250k*q?ooL\211\003l\257?\325\032W\027H4\213?z\005\036\357\300\306\234\277\243B\177\345d\t\264?.W\220}\310\017\254?e{*0/\203\245?\365\034B\251~$\225?\331\n\232\226X\031\237?\323~\243\321\250\266\235\277\030\300\233;\350\374\272\277\223\352\335M\'A\216\277\233\275\207\3318Sr?\252\250\"^\234M\305\277\250\323\003\344 (\251\2771fC\345\374\240\230?\347\205\333\244\031\300\204?]\234\373\"\326\037\253?AB\030h\014\255\211\277\t\263\272\351W\271^\277\331\002z\225@@\222?C\312$*!F\240?\361\236\240\240V\311v?madi\252\236\240\277\274}\370\'(\255\202?M\312rL\365\350\236\277nC\030\201\251M\244?\204\362Z\343\025\203\237\277\260\204\324>4+\254?\005\240GH\201^\204?L!\312\366\245\247\247?\'h\373\246\234n\236?\262\031p.\257p\271\277\033#(j\250\322\204?\247\324\367\252-&\250?\233\217\376\246\226\376\301\277\\\372S\2075\305\202?v\303Nb$<\241?\272\300\352j \315\265?\315\371\231\342\300\027\305\277\353\370\251\3264\202\250\277\336\240\341\300\360\271\241?\223\334C\275>E\242?\312\276^s\244\271\225?}\263#\216\242\362\245?\232\031B=\231Y\223\277)\321\023H\351\317\231?g\213\350\372\345c\243\277\333\325\004\2010\030}?\2656*\303\3727\247\277\216\361\003\205\261\255\302\277\256\t\227\305,\312\240?\224T1\213\014O\253?Zs\371o[\344q?o7\017\307\275p\255?\337\030\341qz\254\244\277\265\321\0322\007\211\261? t\262\317\301\005\221\277cyxKIA\243\277j G\207H\314\206?\270\027O?\323\013\241\277\353\r\323\313\343\301\250?\351\252\253\310\t\017\266?q\010\260#i\222\260?[\007\225%+\240\243\277N\307\025w\271\021\240?\264hg\274\240\312\243?H\366\357\227\242\036\273\277.\246Z\2122\273\257?\361\317\031\014\006\273\240?*\036&\000P\334\237\277M5\241\263F\351\230?\207%\270m\354\315\256?\251]\2444\301\216\234?\253\205\'.\246\035\235? \000\330\203\300\377\207?\303\314\377*\016\007t\277\330J\205\004\316J\233?\242\266\r\243 x\200?\005\024M\024\337X\225?<\332\027TD\033\241\277\010\200\217\231\302\205\257?\265k\347\240\360~\237?>d\222\335A\366\267\277$\005\266Mh\307\247\277\220u\345q =\234?\000\t\261\235in\207?:\242\243\236\003 \261?\243I\321\346\022\360\216?\177\212dA\301\302\244\277]\036T\252\220g\215\277\2729\210\342\375\324\234?p\234D\037T+\201\2778\250\026t\357\237\257?MmK\022\273\036\221?\004\017v\004\034\264\252\277w\372\227]]9\250?\245\354\224\021\216\016\260?rj\377\264e\001\302\277\261){>\017]\210?\313\210\357\352s\272\236?<\344\240c\213\315\200?\356\036\032\302\243 \225??*\235\306\370[\221\277\231{\350\205\262%\250?\310\371\303\030VF\260?\277\233\035\222\"~\236?V\367\266\003\357\220\236?\2543\252KG\262\247\277GQ\005{\312l\256?\225?u2\214I\232?\371Y\331\374\307[Q\277\367s\351\343\312n\256?R\333tnTS\230?\253\000c\246\202\204\300\277\017\013_\246\300\236\314\277\245M\216h&\013\240?\"\224\352G2\307\230?\254\n\356\266\3640\253?A\n>\320\201\032\252?\313J\344\231\317m\253?\337e\223\267\264\376\224\277\332\303\333\246\037\244\247\277\010\036B\t\361\320\274\277x\031\344\177\t\024\253?\303\253\361A\353\273\260?\266\317\244\371\325\257\254?s\337\026\236*n\265?\002S\037\253\010\365\252?\0060S\375\304\255\204?\016\nsP\374\367|\277\377\272^\220\260L\241\277Xx\307\304\016\254\251?4\356hD\262E\223?\026\2234\010>\311\243?\321!\010A[\217a\277\223\"F\220\3110\250\277\344R\244\341\345\000\221\277\262\025_\255\r\'\250?\350\345\255C\0003\237?\3457\371\353\035\207\247?\243\276\302\0105Q\300\277\216\322h\0341M\242?\247\217?\237h!\230\277\213\tg@\210\'\270?\275\016tk\324nt?7\203\030\030\024\256\262?\216\312\333~\3529\270?a\234/^B\361\224?{\205\005\367\003\036\252?\305U\356\320s\265\241\277\306\377\001\374q\000\227?\353\002\366\202cW\247?\3064\316\004\225\201{?"
      }
    }
  }
}
node {
  name: "normalize_element/component_97"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "\225\303)\236s\352\242?%2Pr\267F\302\277\254y\235\363\244c\274?Q\251\373\310\371\327\226?*\253Q^\027\275\250?,t\273\0355\264\244?\365\021\0026CQ\253?\357\252\220\275\241\032\267?\021~\201\327i\017\300\277\035<\246\375\365[\255?\2075X\342H:\235?\241\027ek\272\364h?{\342R\370\340s\213\277\t\277~\317\342\241\210\277\317\257*\036\276\034k?\302\210\357W\020\351\240\277\345l\324\037nB\257?\273-\274\213*\325\235\277O\r\272\330B\375\267?\036h\257\205\363\005\262?\331\n\341k\344\307\262\277\261-s\"\020\233\252?\321@\236\360!G\275?j({lGH\240?\267m\335\242\323\300\257?\350\356m\014\227\3331?\t\351\034H\2068\230?cS\017\032\277\305\246?\366\257\276\027\345m\260?\361\333\267*\356\227\260?\037\311=A\210\202\256?\220\315\225\016\304\034\226?\300\203\302G\224[\245?\241\230\357\362\n\312\204\277\302\007\232\302\217\331\252?\260\\bq\247\220\263?\214\005A$\234F\205?\241\356\340\200\306\347\241?\236M(\363x\"\204?\037^\000\257\tH\247?\322[\336J\346\300\215?\323/\360`\264\334\260?\314\003\334\034|\233\223?O3\201{\316x\231\277\201\374-\200w\222\264?\024l\325\016|\225\261?r\316\355\375\304\003\245?\244\214\2229\221\276\225?\377B,\356\201N\243?R@\347)\003\353\232\277\313u\205\004\255\274\264\277h\366/\377\327o\214\277\0130E\034_9j?\376\3072\222w\255\301\277G\006\000a\274\363\245\277k\367x\017:b\240?\335\246\347\371\255\177\222?\005\370_\310\231\017\251?9\313\314\317\204[k\277m\327\375\303\223f~?\243d\341\007\301\214\234?\252Fz\024XG\243?A\366\204i;MV?u-\352+\371\354\235\277\237\230\355\361\337\017\215?\340\315\246e\234m\240\277\253\203\000<I\212\246?\257f\213\016\302\210\233\277R\320 \0272\335\257?\241\337\236\267\026\005\222?\263\275\234-\256^\251?B\005\243ls^\235?\312D\235\373\243\326\266\277i\\\337WJn\245?\213HGK{\t\245?\216c\216_$&\273\277\020\007\222B\034\225z?\226\210\260\024\333:\241?sp\213\'\362\014\266?\264\206\246z\237\333\301\277\256\265\t\215\346\034\251\277\325Pr\240\352\004\242?\206+0\374\2216\251?\010\330\334\013\253\374\231?\275\336`\034\032\036\253?\006\027\363\277\321\230\233\277\325\212\355\360\002\345\231?><\251\001\023P\245\2775o\002\367/U\200?\350\3365{\257@\231\277\312\237\337_S\023\304\277\227~\'\005\224\210\235?m\302\324\316\344&\256?\307%\267\273A\223\210?\022/\274\203\271\014\261?o=O\253\004e\246\277S\322j\030\243\315\261?\221\341\302\313\035G]\277\351\373d\035rY\231\277\254?\367\"0\217\216?\340\007\357\304\017B\241\277S\006/v\322\255\265?\003\337(\n\330\264\267?\376)v\260\325P\257?\213|\236\014|\257\244\277\271\312n\301\255\026\241?\362M!\367w-\244?l\000dX-\377\270\277\026\n\326\r\0332\256?[\361G0Y\005\247?\207\240\310el\200\243\277\250o\260o\333\202\227?\273L}\273M\201\261?\371\004\266nv\260\240?\336\347\0360\024R\236?\250\271\223\212\361Z\220?\216\246\255#\244\364`\277\305|\016f\362Q\231?\326\341KU\230\306\204?Z\023\236\337\026}\214?\001\330\234]\240\237\221\277\213X\221\277\036\215\256?\344t\212<\346\217\237?f\222G&\226J\263\277\002;\362\230eu\247\277\223\365\243\3721Z\237?\325\367h\021T\004\235?\311\005\2707\367\013\263?x;\210\2767]\205?E\222\213\367\004\005\242\277\264\023\242\237P\037\226\277\257\301\300Ho\205\230?\240\206(\214Q\312p\277\033\217\204C\220\377\253?\376\273se\246m\227?\026\312\212-yF\247\2773\311\273/\326S\252?\271\010\252Kh\300\260?\261\216\200]\217:\301\277\224\313\235\236\031\362\177?!4\217\267\355_\241?][\335\211\020Y\221?U\301\371\353M\300\216?\331\325\266\361\277F\216\277\320\336`B\341\300\255?\247\360\341>\344\300\255?\355Q>XT1\240?\265\004t\272\207\337\241?\211\1773\214\026\373\246\277c\302?\327\204\325\261?\203Ub\217j\207\232?\211\373\t\023\270\010{?daU\253\031\023\264??\005\360\261\034j\231?\005\023J\"\245 \272\2778\354\204\270\356}\307\277\310\260\350\2503\217\233?\216\2375[S\002\241?\202\200z\010\352a\251?i\222\372\340\354>\253?\032\203\375\300\035\364\247?\262\251g\377\013\035\251?\373)\310\2568\305\242\277^\301k\324\231\264\270\277\t\240q\021z^\261?\235\324\244\317\237\032\260?]\307\016\343\233\221\255?T\237\222\0208T\265?\360\202\341\214\374\"\256?\037H\263\2717\255\202?\342G\273%\307\nw?l\360er\317\222\222\277\211<\230\000;\270\251?\370\220\263Z\247d\215?Oj-\241\302\336\243?(\370\001\243&Uv?\'\362\272\004\373=\253\277\340m\302\343\371\021y\277\273+\007\357\265\344\253?\361\274\3203(`\240?\312*\327\241\273\240\247?\004\324d^\370U\276\277YS\264\315\350\242\243?\266\325:\336\325\214\213\277h\377\2439)\201\270?\331\274\370B\3131v?\245\036\026(1\241\266?8*(&\036\271\274?\204\225\361\214\ts\221?\2708\317}\336\371\247?vJ\n\243\216\313\242\277\267\300g\351\3375\227?N\373\241*\212}\245?\366\006\365\263\254\211z?"
      }
    }
  }
}
node {
  name: "normalize_element/component_98"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "4N\265\251\311r\242?\221%\224:\330\315\277\277\277-\021\325\177I\276?\n7\360\325T7\227?\264\312Li\375-\260?\026\371\331\356<\366\253?\302\326\312V\'\377\252?\212\305?\321\0248\271?\177\000\376\233\252\n\277\277+\202\305\002\333\030\261?[\311T\342\266\215\233?c\374\226a%\344H?\273_\366\314A\271\225\277\035\010\255\255\366\265p\277b\366\212%\347\357>\277\375\"\243.\022\r\226\277\367\010\247\230\222K\262?\367\255\246P\265\224\242\277 >\023\016{)\270?2\014U\272\206\334\264?\000\033\311K\"\356\263\277\324\313_\211V\332\250?\0260\363\260_\226\271?\304A\320>G\305\240?%\254g\352p\322\253?~>q\320\303\250r?\366\273}D\266m\234?\001:\311\337\210\261\252?# \364\246\001\007\262?1<Ol\240\241\261?\200\262x\235L\335\260?\020\320\025V>\214\225?\271\031\231@D|\241?\034\235\375\305\217\330v\277\265\375r\000\331\370\250?E\331[\312\371b\270?\354c\177\205>\353i?\310\017y\361\2342\242?\034\355F\214\2170\227?\312\360\373\336v\006\250?Y\376[M\3071\224?A\345\026\365tn\261?\243\000Lw\251\241\227?\353!\274k@\354\231\277\016\013%\3736\260\264?\370\"[\017\277\230\265?f\024\366\255\t{\244?5J\333\033#\251\226?\232&\t\025^z\246?\206E\366Uz\354\231\277\322w\313\226+\n\260\277/\025\372\344Q\277\211\277\317b@.%Vl\277I\216\tkB^\274\277\210Qp\256\352w\242\277\247\247\275\370\n!\245?\320A\033\251\214\271\232?Y\374Z\"\r*\247?\363UF\261IoI?\374\356\021\302\2078\222?e`kV\200f\243?\211\345R9F\342\246?\311f\273\000\003ZM\277\177H\035\357\0368\230\277%e<^\t#\224?\345\334D2\206g\241\277\013\336\275\307\214\374\251?\342- L;I\227\277U\373\251.6\346\261?\326\322\275\375\242\314\230?\257\242\244_\331\007\251?J\263\2738\3308\234?\232?*\356\r\370\263\277\357\255\345!\225Z\263?\3141Qk7M\237?N\224\010}~\322\262\277\005!QO\274V|?F\235\254]\202o\242?v\271\007o\257O\266?\240\3238C\215\034\264\277\231`p\201\217\267\250\277`\000\341C\211\226\242?\r\2408\260\267\365\251?`L?P\2120\235?\232X\367\307/\307\260?yHu]\237\t\241\277\005\262*\004j\030\233?\250\240^\315Z:\246\277+\265S}+5\202?\330\307\010}\360\247d\277\231A\373\337\261\342\302\277\225/\000>\214\321\211?\257^\267\233\357\306\260?\264\310\275\223+\311\223?\3268\003ru?\263? \007\021\350\315Z\247\277\022\033\250c\000\356\260?\320\360;\215\201c\211?\263\3222\277\213\330\202\277\006\247\207fs\334\216?cY^)3\364\240\277\312h=\254\322>\275?\270\204b|\257Y\267?\205\312\246\371\266\242\252?\t\022\030A\034Q\244\277\362\372\316Z\312,\242?e\363\323\340\377\214\244?\003\032\014x\020p\267\277\251\314\360F\266X\244?\217\360\322Z\214\022\254?\223%\274\002\246\023\246\277\031\374\351~\317\301\227?AM\275\006.\243\263?\246\312PE\214\377\232?\030SU\rg#\240?9v\256\372\354\030\224?\324\213\322\214\342\250^?\327\317`(g\365\230?6<4a8-\221?\331\314\254\233\016A~?\303\330\276W\337\206q?\025\3770o\371;\254?dA\233\373/\000\241?\202E\035\324\200l\261\277\327eQ\010\177\347\246\277\375W\327\032\252_\241?7\206\313\355\010\356\243?&\222\374I\373m\265?\233;\365\246\364\334\216?\300\263\000\027\253\240\236\277{B\007Amr\233\277\333*j+T\t\225?\220\212\307\221C\316_?\226^\010*\304\322\245?4\357)\032\0328\245?\305\024\373\267\n\343\240\277\240B\"+\307}\255?>B\220-\022\255\253?\335\003\0174\350\t\300\277\337\214\312\350\250\354i?\224\021.\034\274:\244?#\253\014\367R\367\231?\004\352\213\214\'\345\206?\210\357\333H\215\224{\277q\241\210\313E\n\260?\235\230\002\215*\247\253?E\352\274\024\276\301\241?\322\377\005\221+F\244?\230r\377=\352B\246\277\342\206\010\315\350&\263?\224\177\261\347\000\373\233?2\030\315\021\314\255\215?\007L\207\036\226%\272?\177\316+>\010x\233?-&}\364b5\260\277\315y\245\260{\300\303\277\035\315\003\353G\251\227?\240\367JI\244\247\245?\334\307\246\234\374\004\246?\213\021k\354pF\251?\247\346BJ\213\261\242?\331\303\243\374\300/\221\277*\366(@:\223\237\277\272z\265\246\360\325\263\277h\214\307&\250J\265?\237Wgu\245w\260?P\272\367\347\327\023\254?_Kj\226;\233\263?\232\253\017\271S\231\260?\336\036\332\2005\362\200?\033\375\351\270zK\206?\351\234\317\033OM\207\277?\213\233\326JA\252?\n\223\303\326UI\204?\326\374\201=\351\356\243?\032\253:\234\332\310\212?\2524\030\331\204j\255\277\262\350p\21109v?\277*\027*\377\332\261?a\252\006RC\312\241?\261\247\035\376\232\254\253?\016\312R\360\266\000\274\277\016\225j\222d\305\245?\334zFU%\'i\277YG\244Y\030#\272?\310\200\257\222\326\262q?\352\302\233w\224\261\272?\343NB\031E\267\273?\326\\6\206u\355\217?\334\252!\372\200\003\252?\315A\344\265\2219\243\277(\017\277&ab\230?\3240\2616\034O\242?\246\314\366\266\323\265z?"
      }
    }
  }
}
node {
  name: "normalize_element/component_99"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "Y \n\376hL\260?\217\354\373\204t\367\276?fqC\257\346P\262?A\352<K\014Y\270?\307\375\261\212\3432\257?\333bD\303\336\033\263?\307Z\317R\252+\251?A`\272P\306\346\252?T\313\00649~\263?\332\240\030!\210h\256?\203:\226\213\271j\262?R\010!v_\373\242?\206\035\245\226\326\364\262?7s\340\206,\023\267?\305S\2174\270\255\267?\323\236\033e\300\003\251?\222\230\252\370\3422\255?\362\257\'\262\2753\264?\240\025\3551^\341\300?-j\273\377K\366\261?\262\001\362\324\014\361\261?\316\227\206\375x\221\250?{\250:\322\203\274\300?\327H\226\274\317+\251??o\336\303\033U\245?\013J\352g^\314\246?\024-l\022+\277\267?\203q\211\2069\377n?{\007\027\2512\267\265?y\033\037VMJ\260?\245D\025u\033\021\256?}Z\214T\364\224\253?\316\377 \234\223:\256?\204\352\2547\346\314\270?\235\201\243z\361\231\252?Lt\252=k\005\240?AI\261>F\302\267?\256\217Q\025\210\333\261? X<\222\036\310\267?\'\2502\243W7\261?\227\235\205\n\374K\254?\274\372\246 \247\376\247?\207\263 iw\225\275?\2450\316c\275f\264?\rH\036/t\212\211?,\003n\340\205\342\265?y\215I\276\223H\266?%=\327\272~\210\266?&\221@-M\344\261?\3243\"\360>I\262?\221\233~\334\300\225\302?\353\230\273\342\036U\252?\027\374\313(uM\262?\027\323\211ZS\206\274?0\260\335)\\\020\246?C<h/\010\320\261?\335X\256\211\225i\254?S-;\'j\'\212?/\027\320\217\257R\264?J#\333\003\361\335\265?\252v*9W/\246?)!\353\270\000\205\260?LCx\247G\302\241?\311\007\005\361\366*\264?\227Y&\361)h\264?i\350\336D\246\\\272?\220\307\215\324\333\234s?g+Zy\374p\263?\222\014RS?\255\265?\331\256\252@(\315\261?\000a\226,\335\023\247?\226\251G\357[:\303?\265\247:\235\221,\302?\237\212\317(S\010\267?B\216\246\255#\244\246?\tPt\331\277\035\274?\377\260pU\203w\251?4\200\371\\T(\254?\013\252\272\005\032\205\247?\200\350\017\356J\242\256?\323?\344\324\236\367\266?Qn\032\\\354V\246?\200\026\205<\006T\244?\013\2323.^$\247?\206\213\261Sy)\252?z%\252f\2776\272?q\227\324;\242c\256?\200\204@\262\251\210\271?\323\237\363\326\235G\262?\243\253-\242\021_\304?\031Y\021\271\tL\306?\376\220[\354&\023\260?\325f\013$\002\267\256?,uh\017\266\003\267?@#\362\014\003^\251?.\322\262X\004\253\262?\375E\010C\250\310\263?\027\024\\e\3235\266?\341\277\336\234\310\316\276?+\252/_\037\234\263?\216E\361/$U\267?r\003\316\352\316\'\242?[#\357\r\237\243\273?b\302\235H\206\325\255?<\375\320gh\205\301?\202\207qP%w\240?b.t\350\236\274\246??\005\210\316\247\230\267?\245Z\215\352I\240\247?j\243\370\000\3664\260?*\270{`\227F\275?s\035\277\304\023\322\255?\265\374Xr)\357\260?\215\230\026KJ\247\244?\304#\177\235\214\013\261?^\"\266r1\261\265?\204\202\006&-\030\242?U\353\377Gf(\254?\365\305n7r\361\270?-]\354\266>\276\241?\\\037>\377)\224\266?\231J\353\341^\250\266?\215E\003\023\340=\260?;j\027\226\351\336\253?O\256\001\310\013\024\257?\365\210,-~.\270?\335\311\344*\317i\261?\322\270Q\023f\242\273?\314\374\245p\375\356\246?:\342Vb\032]\267?YRcL>\231\257?\307(\002\256\301\201\230?\325\325\016`@\030\255?%9V\345\037\326\260?`s(\362\rM\255?\3560\261\357F\303\263?z\201\025\204K\367\254?\226\331\350\350-\250\266?\330\305\346CM\375\272?\204o\302\006\t\246\273?n\220\365F@\024\273?\271\227\2778tW\256?\343\017\246+OU\243?+\374\036\227f\252\265?\250^\005\230\374\306\262?#\344\332U\352\207\250?F\342\362\023_\321\253?\222~V\364\342\237\270?\356\247,.\201\240\225?\240\255UK\322\346\266?U\211\226be9\260?D\333l\327D\231\256?\032\027\307\256\330R\255?/\276\347\016\002\365\247?\324<z\325` \262??\307\005oa\300\301?&`\t\336o8\236?\317\276\302\347&\350\247?\333i\357|\324Y\300?\365g\031\213\241\372\242?\231\360\227\213\002\301\231?$\311K\265QH\267?\013\257WjS{\270?Ri\226\224Sl\261?\320\263.u]\346\254?\364C\341\275\347c\260?x\316\334d\320`\260?\016\304\342\322Y/\260?\206\215\032b\250\202\262?(\032\035\360\366\251\250?\223\3651\245I\267\255?+\276\350\305e\351\243?J\234\371\373\343B\262?\212\224\224+$\257\256?\254\203\201\274^g\254?\240\356d\271js\235?\356hIk\377\217\275?2\301x\037\252\235\244?b\226\357y\373\374\256?\016\030\252\266)\213\250?\256g\361*\267)\245?\311F,\321u;\264?\306\341\333\332\023;\254?\220\025C\014P\'\251?w\262}\303\242\364\233?\274S\350Y\234s\263?\231L\3716\0330\251?~\272\177\001\304\252\264?/\r\022\216\230Z\222?\324\265\306\005?\250\275?\222\027\222\306z\000\267?\254\302,\325\201\203\247?\352\225J)\374\332\255?9i\354\333\341`\233?"
      }
    }
  }
}
node {
  name: "normalize_element/component_100"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "\261\240\3735\003#\260?X@1J\201\031\301?BZ\r\320P\270\262?\255 f,#@\270?\335Q\304k\\\324\256? n\320\\|\221\262?\267\241_\3440[\253?\222\014\304\250\'\320\250?b\361\250\354L\005\263?\231\"\nwx\031\256?\223\252\367\230k\370\262?\220\036\2268\270\225\242?#\006\177\224\030\321\263?k\013\014\257\335#\273?0Tr\014\320\317\261?UE\002W\303\217\253?OX+\330\033\274\253?\225\376D\266\n\032\264?\023%u\220D\240\300?\234\363\254\324N\365\263?3\272\315e\264\237\253?\347\343h\373H+\250?\017W\260\210\277\270\300?9\362p\235\247\203\252?\316\330<\263\311\206\246?T\256P\241C\253\245?\'\321\346\306a\241\271?\357\226j\272,\223r?am\376\362\330\265\267?\224\314\211\364\335X\260?\026\224\251O`\244\254?\362\002\2141\'\235\253?A\261\367\335\322<\256?\327R\214hE\230\266?\211V\313\366Q\250\253?\270\225\264\233F~\242?\220\204\272\236\241e\271?\014_\217$i\000\262?\345\363MD\006\014\270?M@\021`\230\231\260?\032vx\005+\031\255?!\212>)\3277\250?\272iY\025\346_\274?\262O\261~\364L\264?\336cw\356.1\215?7TE\036\254\362\264?A\230d\257:\034\271?\367\222\r>\251\003\267?X\224\216I\261i\265?Z\0075\263\376e\262?\222\005\000R\221\306\302?\033\326\221y\235:\245?j\326m\336\245E\261?\346!\375=Kl\300?H\226\262]\270\253\245?;\000\267.\002Q\262?kX\344\273\272\201\254?:\007\360\222\017\254\210?\"j\344\353\031_\264?\315F\356\266\371\351\265?\037\177\314{ZM\244?JL\023`\237\323\260?\013\005\300\006\261\244\261?\016\263\300\354\330g\264?\216\204Us\273\302\264?\227i\214\272\374\245\265?]Y\360B=\364z?\331\031\346\321{\315\263?\306\324:\312\361\245\263?&#\016\251\007\244\261?C\204\371\327d \253?\324vl4\033\014\276?\026\246\364\356\275\257\275?\237y\035\227\217)\270?\000Ut\325P+\253?\3677\204\004nX\273?\221\312\373\325oh\247?\240\341\024\360G^\252?p\020^\317\230\310\247?\340\026\255U\033\231\246?\263V\354\343,\342\265? \211\340}*\256\245?\213\312\266n\253\242\244?x\220\350\257\241\345\226?}\010\271q\334@\252?p\352\323\217%*\267?,(o\364\357\002\257?\034\032\322\205\2615\271?\262\206\305\207]\004\262?|\360\264\336j\273\303?\306\353\"\316\210\247\307?`-yg\255\233\257?1HP\265C\347\255?u\037>\270T\210\272?\r\232Q\204\270\230\251?\'\243\365\260J{\262?\267\355qb\354]\264?\320\332\024_RT\264?n\017)\243\035y\275?\001W\034H\303\233\264?K,L\206\263\300\266?)7\313\021\244\345\233?/H\341\027\352\362\266?\332\275\226\t\037G\255?\214\371\247\276m\022\301?z\275\177\034b\366\242?\313}\366L\304\225\246?\310D\301\301\033(\267?5\243^q\352c\247?\271\367\277\017Fm\260?\024\263Gpos\277?:\232\237\362\032\201\254?\252\035w\252y\227\260?\235\251T\254\301\313\243?\376\031\340\255\3545\261?;\031\373\026\306\253\265?\270\272\\\367h\007\240?\371+\222\346\367L\251?xI\253@~M\272?-f[8\326\346\213?\354KM\272\341\202\267?\365OT\\sL\266?\253\362\315\316S1\257?\370F!\207\220\014\254?\367\367\r\244ox\261?5\020Q\240\335\216\267?\225\276\037\235\013:\261?\255oo\235\320\002\273?;\213\343b:\344\245?t\315!\377\205K\266?5\251\010:\321\343\260?t9?t*\341\227?\230Qs\214@\311\252?V\232\205WA\365\256?\324`\243w\355|\254?\205\270\213\223ot\257?\314j\010.Y\214\252?8\250X\220\301e\266?\007\022~#f\350\273?`1{\275!\253\272?\273@:V\330u\273?r\311\200\322\241\352\255?\225\002\022\032\257\343\242?K\237\300\265\277%\263?\225\331/\276\271V\262?\251\236U1X\033\255?\334\306\234\360\335\251\254?E\372nl\326\026\273?\030?\210\3029\263\227?FD\357\\1\006\267?\371Z\232\322/N\262?\374%\276\347{\036\261?jf\363Y\032\317\255?\315a\255\220\250\006\250?\261zU\241`\312\260? \006>/\252\177\305?\367&~s\034\313\235?\210\356Oe\365g\254?\007w-B-\035\304?\255dg\324\363\243\245?B.\333\310!T\234?z\273\021Uy\264\267?\314\211\243\226\331,\253?W#\002\250\276\200\260?\267\235\273\377\275\313\260?\225:\204\316\304\244\254?\2552thhn\261?\031ud\347\230\354\257?\207)s\356\324\256\261?\222e\211\032\301\320\250?\226\323\221hqb\267?\004\006of\371\\\260?R\316\342\210_\370\265?0\325\227h:\002\264?\366\207c\346\315\244\254?W2\273\177\020\357\233?\346\321\200\206\246\210\275?\362\020\3302\237\307\245?*9\377-\003\371\256?\272\232\024\235g\027\250?\254\225\367\333\030\347\251?_\' \346\305\233\264?\016\256o\026\345\210\257?o&/\375\016\357\247?\266\374\317\200\313z\241?\247\004\013\372\347v\263?\245\202\350\033a\351\242?n\261\032\314\3300\264?V\301\003^\301\221\221?\210\036\211{R\304\273?Z\361E/.K\261?\303\346\007\241\310\002\254?WN\371\022U\270\255?i<\256\231\276\317\235?"
      }
    }
  }
}
node {
  name: "normalize_element/component_101"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "\301\2375\315\250\352\257?\177a\340V\315\365\301?\32098\013\215=\263?!\3219|(\212\270?5ZA\345\365\346\255?[v\002F\t\r\262?\311\221\205\352\021c\255?H\261\0337\256\337\246?\032\024\356\021A\207\262?fQ8\270\375\275\255?\307\217T\206A~\263?N\327\035\317\212O\242?\372Q\315\337\226\245\264?3\226]\356\233\024\275?\0204\326f\262+\300?\206\035\245\226\326t\256?\231\211\243$\204D\252?\237\271\313\241\354\375\263?,\024\261\324\357L\300?\256\020\017\216}\274\265?\267\213u\031\032)\245?\244\350j\363K9\250?7S\211\001\376\250\300?\233.\252\226\2130\253?}\343\006\244F\346\247?\243lM\227\036}\244?\2472\246\017F\264\272?\352\266\026\366L\340r?\207A\240\000x.\270?q\235\213.\213c\260?\274\222\230+y\370\252?_L5\336\026_\253?p|\244\303n\230\255?H\031\227\310\n \264?\213\020\235\354\006\324\254?\362\256\335\352\367\314\244?c\240=\'U\214\272?4\031\375\204\215\024\262?\000^\275\217E\310\267?\205_\200\003\256\271\257?\2372i\031\312\005\255?1\300\262\220\210B\251?\354\274\033x\246\261\272?Wg\226\263`*\264?\030z\311\241s\356\220?b#\004<M\014\264?r\326Lc \364\272?)S\372y\273t\267?\376|rL\312h\267?H\255`\266\305~\262?\336\233N\316*\025\302?\245\n\375N\276\231\237?/\n\321\r\214=\257?\252o\003\270\005\275\300?\255\362]z\226H\245?I\226u\372\237N\262?\205\320\031\317\242\242\254?\325>P\200\276\263\211?\250\217\237\021\225[\264?/\224\024\244\216\230\265?\256\370y\230ek\242?\276\250m[E\023\261?P\274?\350\035\312\240?v6\ng\274\317\264?S\314S\263\215\023\266?\216\316\342\215\030\262\260?\267e\365K\032\\\200?l\200S\321\270m\264?h\000\nV\036\242\261?Dp;\270dj\261?b\304\202\036\021#\256?g\rUf\207\316\260?F\203\346\003\2329\266?lEm\253\361\203\266?\327\025\r\3738\370\255?^\202\353;\323\214\272?\350\377\217\362\027\243\245?\024\027\2679\344R\250?\275>\202\001\325V\247?!\351\376\252V8\242?wQ\267]\257\003\265?`\301\344\343f\372\244?\223?\304x`\017\244?R\312R\210\323\213z?Od\016\313d\r\252?\"\266!\3521\326\263?\254o\024\344]\261\257?\031\\\371\200\316\021\271?:lbN\276\303\261?[\007\375\010\240\361\302?\310|\371\312\247\272\310?\270\362\331\324U\216\255?;\0008\257\027.\256?\024\320\341\2555\214\274?m;+q6\200\251?~L\333\'\226G\262?\241\331\313o\376\312\264?>\035Un\036^\262?v\031\335\305$\361\273?\"gMkT\331\264?\324%Un\261A\266?\341\3164J_T\223?\340`[~a\253\263?\250-\\\3636x\254?\026\030Y\002\216\\\300?\376\304\221\237>\026\245?\223\215X\242\353v\246?\212\263\260\024\272,\266?}\320\tZ\256\242\246?i\251\022\036\232\235\260?\330\035\2635 \027\300?\376Wg\306\354v\253?#\332\027\233\031\247\257?6\367\3438\350\371\242?\027A\335\354\201i\261?\301\212\036\273\265\223\265?A\256\254\353RN\234?W\314$\304>\374\245?\375A\0014z\320\272?~\353\341\320\375\312Z\277\343\246\0356E\213\270?=\215y\362\360\353\265?\236o\016Ny\261\256?\230W\tq@\246\253?q\317\2256\214j\262?\200\210V\354\004\273\266?$\362\222<-\370\260?\373\033\027\202\332\367\271?\262\303\213\312\365\322\243?3*sj\234\n\265?\254\221P?\027)\260?\026-\'>\312\312\227?\207\306\253]\'\266\250?\014x\025)\377 \254?0\364\222C\347\334\252?g\371\226F\207\030\250?M\020\267;R\032\251?v\375,\335\367\004\266?@\2531\300\274\202\274?\344\031\006\274d\315\270?\240\371\222I\352\335\273?\245^\006O`\273\255?J\242\"D\265e\242?\307\243\027_\373\234\254?\356\227\330Gj\313\261?\034\322p\026k\302\260?\323a\263\223)5\256?\001\343\3054f\241\275?0\225|\301\256\363\231?\355Wq\022\231\245\265?\320\262|\312\".\263?\204\3637\016\255/\262?\271f\365\205\305\345\256?\370\353\331i\'\'\250?\033J\035\177\312z\257?\032ROc\236|\307?p\225\321\017\275\241\235?\305\377\314\t\242\272\260?\356\312\330\027\243\212\306?\332\241\035\024\355Z\250?\0269\203@\340\341\237?!>\006\344x)\270?\314`\207\217Z\361\254?\177;\261\320\314h\257?\321\2609\203\226\340\262?\301\345\322tM\263\251?#\225\326\235\366\255\260?\307\004\270\375K\202\257?\324\212\336\305\325\252\260?\203\334\037\321\377\320\250?f\371\277\305\270R\274?\010\3406\270L\004\265?t\306 E\327\344\267?\374\214\3041\266\203\267?\240f\307\224\257\316\254?\254{\013\273\215\245\232?\351Z\215\202f+\275?4\247G*\276g\247?\245\376\n1H\016\257?\023\344:\242O\237\250?y\377\013Ceu\256?\227\234\311\355MB\265?hC\306\357\342\207\260?\242JN\237}\342\246?\177%\336\241+\210\244?v7\347\221S|\263?HiR\344\362\032\233?\'\243\324\242aX\263?\354\237\005s\204\244\222?\342\352\000\210\273\372\272?\220\227\177>\333\264\243?\335}\264V\271\362\257?\265|C2\373t\255?\271\227\352\270\320K\240?"
      }
    }
  }
}
node {
  name: "normalize_element/component_102"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "E\251\352\t>\022\242?!\221\334\270\312\265\273\277\251x^U\266B\277?d\014\370q>\271\225?\320\212G`\256\360\263?F\200.u\353\220\253?\351?\352\375\346\310\252?ci\025:\0052\273?\225\202\352\366\304\200\275\277\245I@\204ld\263?A|wc\365\322\232?\246\231\332\221k\274D\277\256W\031\014\374H$\277\241\327N}\350\316h?~\251\007\033\212zb\277\342\341\221\006$R\204\277\006\236Z\001\256\371\266?f#B\351,/\246\277H\350\355#EQ\267?\227\300\345e\330\236\267?#\005[\224\365u\264\277\\>\372u\223W\253?\353\003p\203?\033\265?\350Mf8uP\241?u\027\303\375\311\335\246?\330\361\212\240d\204\211?\233Z\273\217\321q\227?\\x\344c\005,\256?\232\256\035H\273*\263?\363\033\2766/\217\262?\033\276\333u\234F\262?\300c\0374 \032\226?\006\327\206\321F\212E?\370m\210\361\232WU\277Y\006(OQ\334\247?\350s\312\260E\343\273? VE\331\327\221E\277i\224!\323I\322\242?]\356\255\367\004Q\242?\265\177&A\006\222\250?\356_\216[\"\320\226?\261)\200\367\310\305\261?\023i\350\215\375\246\232?\226E\330%\347\032\233\277\200D\016o\250\250\264?!\311w\354\021\261\264?f\232%\013\334\335\243?\214+\371\233\372\207\227?@M\305wv\272\252?\277\331tq\014\342\230\277\341z\310\037\002\312\247\277,\304AGM\351\200\277\343\311\311\037g\365\205\277\352\276\316\023\360g\266\277w\177\037\202h\265\235\277v\335V\330\3367\252?\235\311\321\370\222\201\241?\234\223`o7\310\245?\370J\021\372H3n?W\210\266\177?\336\234?\260\333S\261\262/\250?\024\305<\017\024\226\252?R\265\255\313\310\327`\277\001\255\320rf\334\220\277\354G4\310\367\241\231?\'\250F\207>Z\242\277\203\034\316\333\\%\256?k\367\3339\365\312\222\277\037\213\024\232\211\301\263?+\206U\003g\005\237?\331\253Kj\301\273\247?7\363\365\306Z\215\232?o=\022H\354\007\261\277\354\217\327S\020\333\266?\210^-\024<\307\222?l\246\335\020,\014\254\277`qY\001\225\\\207?\266\017\220gK\341\243?\341\240\345\302F\256\266?\377W\020\017\320\231~\277\250\020\t\213\374\215\247\2770\323\240\257\363K\243?\221\230k\224\237\233\250?\356ykQ\200\327\241?\253\325\274\202\353\014\264?\306\317\375\327\344\351\242\277E\371kz\234\336\235?*.\311,;\367\245\277\305\347(\351\\\257\203?b\034\226\345ok\222?\333\260\345\026lC\302\277!\362\223\363\220\354{\277\305\317\303,[;\262?(J\276\351\310W\233?\324\323\320\321m3\264?\242\235\342W\375(\250\277\341\254e\213\324\026\257?h \371\367\327\372\231?\223ej\r\003h|?vuH\343\2601\214?\035l0[R\270\237\277\365\344\205gN\206\264?\010\006\214\005\360\334\265?\231\250_\233\355\007\245?\237k\336\277\031\377\242\277\032\220C\030\3157\243?\033\365\371\360x\317\244?Z%D8\347\331\265\277\210\177\020}\002\036\240?\303.\260\345\232$\260?\236\266\372u\235\311\252\277\237\177\234\337\0315\231?\256%B\365\237\315\265?k%\322\010\306Y\220?IH\353B\2108\241?v\2046\255\322\345\226?\251\215+\332\216<\177?\322\265R\257+\313\231?O\337\3224\237\250\231?7\035s1\025\001\203?\353\177\312B\2054\226?\262\211M\335\365\317\251?\021\313\347\216^\n\243?@(\302b\341_\261\277\327R\233\223rR\246\2772\021\227eM\001\243?\235\233sFM!\250?\276ot|Q\216\267?\211\217\340*u\347\230?\350\244\367\215\257=\231\277;%\023\374\336\302\236\277\274\344\376qb\022\223?\314\362\177\213q\245~?\315\301\364<\006\313\235?\274Qu\331\371\310\227?\343;;]9\"\223\277y\317\220\0206S\260?\331r\357`\022\316\242?\020Gk\315\325\335\274\277\265\"\312\024\374\001b?\263\204\020\353\350\023\247?\272\210\330(7\306\240?\212\312\261\265\3619\201?t\330\311U6\360v?\371\214\312\241\323\340\260?\356\307A\227\335\204\256?\336\265&\013\317\263\243?\365I\206\315\024\373\245?\260H\346my\240\245\277\321!\323N\213\311\263?\266#\346\243\326E\237?\356e\323\370\"-\227?\2346\362_q\317\277?6i\030\023\242I\236?8\306q\207\035+\226\277\235\014\022\313\373\362\275\277f\001\3528D\375\224?`\257\340\031\225\035\252?\333\303\022\232\032$\242?8\340\341\340L\370\245?\026xz\347H\025\251?\340`0\376\004\267X\277*\314nrgB\233\277o,\375\213m@\256\277\375_1\307K\347\270?\232L8\233^\307\260?\235\177\031^\331\235\251?\342\272\217\307\377)\261?\201+\374\300%\345\261?&,B\310\261\251~?\274\304I{2\350\214?\264\316\305\315\023Ix\277\000\177\347\315\227\315\252?\337\202\360\221b\272w?\032k\177g{\364\243?\337\0029\3035\300\224?\236\\y\347U?\256\277\201$B\334\002-\222?\256{hu+1\264?\020\213%\240\032\023\244?\033#Ix\221\365\260?\207=6\307\216\315\271\277j\271\221\204\r\347\247?b\254K\232\372\321|?\324\032\321\335xn\274?\232\t\247\201\366Uo?F\345\010\024\017z\276?\273\261\342L\372\230\274?F\305y\344\201[\212?*\r\317\'\377N\252?\037\241\371\253\346\212\242\277+\341Ch\210S\231?\212$\0226P\241\235?\352\311\355xB\230{?"
      }
    }
  }
}
node {
  name: "normalize_element/component_103"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "2\230\267\321\235\263\241?i\027\006>\234F\270\277\r\322\344F\267\374\276?\236\341\313\031\221\365\224?\254\202\270u\256\335\266??)\237\215x\214\250?\036\312\217y\226\200\252?\252\353\210\367\247\312\274?o(L}\3700\273\277y*u\003\344O\265?\375J.\231?\263\233?=\'b\266\t\2341\277\'\230\350.\2643\242?y\354\004\207Y`\202?\332\026\272Z{\233\026?\001\250\264\216BC#\277\301e\200\321\006\\\273?\357\303\203^fu\246\277\272\241\347\036+\333\264?K\2236{\276\353\271?\361\335\270U\250\237\263\277=\016\021\244C\301\255?\240\307\007\301\323y\261?\266n\307\367l\355\241?\341K%_\260\353\242?g\342\360^\302\\\225?\347\017h\021\323\203\221?\201m//\341L\260?\216\302\213D\274\003\263?\313\257wcg(\262?\320\2305\360$\033\262?Kc(\345\275\203\230?\350\342F\374P\212r?X\031\021\265\002}a?\365\255 \027\346N\247?\031\037\330\204\303q\275?\0104\357p\357\245f?*\027\372\305D\001\244?\212D\231\364\224(\251?\300\241\253\005\332C\250?\211W\371h\350\324\230?D\222\230!\007\205\261?2\201\256\277\035\217\234?\276\261\213\225\335;\232\2778@\r8{\202\264?5VDH;\300\261?O\361\035\324\3743\243?]\240\273\\x\351\230?\330-2\234\223`\257?\335\224\307\332\254\350\225\277\250o\035\014\n\275\241\277u:\334\203\032\002s\277r\025\213\337\024V\216\277Ze\367\373\375\026\262\2779\370\013;a\311\226\277\305\016I~\333K\256?\017\351n\331L~\245?%O\202\314\010N\245?\333\236\007\024=2n?L\213\377\3350A\243?A,3V\257\343\254?\2159\213\273\232l\254?f\255H\034\027\255Z\277\255t\225\363gm\202\277lkP\243\254\271\235?\346\023!\221\220*\243\277\216\360\315\241\322\251\257?\302\366h\261\341\327\212\277\341\276\374\270w9\265?\232D\302\231\215\005\242?@\323\013q\276n\246?\350\032\204\276\226\205\230?\371\244\260\336\3521\255\277JY\337\360\035]\267?(%\263c\353e\200?z\300~\200\234\315\246\277\007\013\2430Z\r\216?\261\260p*\003\033\245?\017\006\265\027\205h\267?\"\216\354\177\275\030\251?\210o=\027\001\246\245\277\313\002\353\r\376K\244?\020Zr\211\341\362\244?F\327W\347\260\254\245?\265C=)\005\360\266?\026\341\242j&\245\242\277\346\'\n1\355T\241?\343\347p\301\332\227\243\277\216\3324\036\273\367\203?g\254\320\034f#\236?\306\223\344\206\315j\301\277\311po\220\246\000\226\277C\203\177\327\210\334\262?1\003\201\r\t\221\240?\212MOK\270\377\264?\006\340\336\266ha\250\277X\365\221\022\275\267\253?,zmWdK\242?,\343\300Z\236\317\224?i_\241Xlh\212?\022K\014\372\271>\233\277\254\202\237\330\rR\231?l\201\230\337\304\353\263?\312\365\356Cie\240?\346\320\\\206\203\255\240\277\216\031,\305#+\244?\014\375\210i#\372\244?\022\335<\240/\347\263\277 ]\256v\373I\236?P$j2{\212\261?\270\264,\365\262A\256\277\022\027>*\027\215\233?\356\010[w\351\342\267?\204\017\227\257\332\033\201?p\373\234\275^Z\242?)\232g\"\365i\230?\t\276\030\263\355\000\220?\306Z\014\266\302\010\234?\255t\300s\304a\240?\271Y\216 -\177\216?\352y\356?]\235\236?]\272\201\266`\237\250?M\372\030\377\200\377\244?\351\212\33549Y\262\277\354\027\366\370\340\\\245\277\316c\215\255y\353\243?\263W}\200~w\252?\032\030S\222p\177\271?iq\022\277l\177\241?\344\202\342\260\374E\223\277\333\236\360w\307\340\235\277ms=\263\037\207\223?\330\\=@Z\020\210?_\356\271j\243\334\223?\267m\214[\324@\224\2776\224\017~8\001{\277Z\347)\274\025S\261?\032x\312w\344\240\226?\320n{\"RJ\271\277\217\262\350\027\321\350q?so\270n\316\261\251?\305\253jQ\270\201\243?\333\213G-\275\313\177?F\245\212B\310\002\221?\215;f\037\262h\261?\372R\361\337\271\200\260?S\235\001:;5\245?\313\225DmP8\246?\367\245\213\010W$\245\277\326\2345\330\321A\264?\334\224\210viQ\241?\004I\n\362\324\237\236?\330\003i\243\223\325\300?D\352\006\242\330\036\240?\001f8J\320\362{?gz\306\024e\234\264\277\3170\260\354T\211\224?I\343\345#\010\333\255?\027\014\033V\3229\236?\322r\252\371M\010\243?KF^n\341\r\262?\375~\326\241?\331y?\025\343\321\315\313O\230\277\256\243\027\246\320(\251\277\261\302\353\002w\003\273?W\271\253\262JD\261?z\324\353X\235\203\247?\240\301\241\025\352y\255?.\016\246\342x\036\263?\334w\235\361\2438|?\356\265\010\333;\342\221?,\t\263}\206?L?`\250z4\000\024\252?>P\234\023\343Kd?\363\307\2646\215\355\243?\241\264`w\364\236\232?\005\"\354]\201\275\254\277\365\353\017\023[\341\234?\371_\237\032\336\025\265?s\275\344\264\344G\247?D\216zvc;\264?]B@\351\004\347\267\277]\373\300]\017\211\251?\216?\n\004%\370\217?\360\351O\272\253Y\274?\205\307\206\207\223\250u?\340\362\014\245\354\260\300?Q\245k\310m\353\273?{\002\216(\340\343\213?:;\315\215\337\227\251?\266\210\360{\020\014\240\2772\022\244\311\372\n\232?\374\227\030\211\330y\230?\2337IQ9\266~?"
      }
    }
  }
}
node {
  name: "normalize_element/component_104"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "\337\007M6\021B\241?\n\321\221\304\3418\265\2771F\010\265\375\260\276?\260\314I\222a\301\227?zu\303\363\2501\270?M\037\306\023]\361\252?\021\260(\265\257\355\251?\354f\203\2422+\276?\236.-\030\314\307\267\277V\375\223\275z\234\266?I^\204\306\237\352\236?\034\355b\341\276\352e?\264\026\013\350*\002\265\277cR\215\250\232j\213?\237\024\234\260\263\327\201?\323\357AVW\010z?\245u\017a\340_\274?]\362\257My`\240\277n\325\\\013\006\031\257?go0\241p`\273?dW\222\360H\262\260\277\022\345T0\377(\252?\301F\260v\266u\260?bm)s5\252\242?\316m*\241\247@\242?\201wZ\315&\377\232?\270\303\233?\352\322\226?\210\'\213`\273\262\260?%\247\317>\361\304\260?G\271\304)$\255\256?\320\\VJ\227J\256?%\223o\220\362\216\235?\277\375N\315\304\370q\277\213\237\255 Y\002q?o\243\243J\004\022\247?\263\004\2359\271\231\274?Oj-\241\302\336R\277\037\315\242\301\267\372\245?\335\263<|\212\375\257?\256\203\222\350\266[\246?6\240M*\364\243\234?F\323\016\274\260n\260?d\305\277\273\324\211\235?\002\rW\203\0078\224\277\307~\244\365\250Y\264?\271:\351E9\r\262?\224\374Un\014{\242?\020`\301\230U!\233?vs\223F<\301\261?\371\257b\247\016\250\215\277\252o\006p\224k\235\277Y\n\331]\306k\203\277\200\333;\354\203\001\207\277\205D\000\216B4\260\277{H\303\354\017\333\220\277\323\236\244V\036\370\257?\017\321{r3-\251?\237\002\247\021\0175\246?\031[\373GNBc?kw3\226\365\n\247?\314c\266,\253\245\260?\002\2128m+\225\252?\325[\226\276\366\035J?b\251\211\231\330\327e\277\3067\254Z\3465\237?\332\314[T\017\301\243\277\032w\234\005Nt\251?\363i\035n\352\260x\277\271y\"\tt\006\266?\313\3030\312\255\365\243?l-6\'\3332\246?\335\235,\352\320?\226?\343\317\270\274\256i\252\277\322\036Ukf\317\270?\312\017CHixk?\205n\202\261\266\020\241\277P\037\363\224\344\237\224?]\332E\330\275\003\245?\350|/\300i\272\270?\377-)\300u\032\260?\214\2430\367\342\356\242\277\262\016\216,u\235\245?3#m\3673;\241?\303\233\017\261\274\t\242?\271\373\022\255\271\374\270?\337\254\3614\301\271\236\277\235\036\263j\022\347\244?\374\206\306iAU\234\277\002s9\315\036B\202?\367\322\002\036\222\006\231?1\211H\207f\242\275\277:\220\305\233\324N\227\277y\314f,\237\007\262?\224\300\300U\231\207\241?\177X\210q\253^\270?\345UOF\222\251\247\277\272\367.\255\237a\250?\376\030\301f\203\303\245?\236#\3432\035#\235?c\t\202\377a\326\215?\363u\002b^\274\223\277\256&\025\256\303\250\216?2\235\323\265\301L\262?\335~\274\001\255\223\235?\371\026\333F1\260\232\2778\377\n\364\344\365\244?\256cx\306\240\016\245?\260\344\331\316\277)\261\277\213\032\230Q6)\234?\241\313R\355\376\361\261?2\347\261\027\036\274\256\277\202\037\216\333Se\236?}Z\250\251#\317\271?j\253\355\201\261\031\207?\177\3003<\036|\243?\241jE\262\177R\230?\215d\224\t\355\014\233?wR\333]\322\336\237?\211G=\237\\\256\241?\0277O$\201\316\220?\306\255\177`Y,\231?$\007\371\224\364\024\252?\242\005\027\024\316\272\245?\354U\006\003?\222\263\277\205\021\031[\252\000\244\277\312\314jYuX\243?\022dg~\363\352\253?\\F\rM\2510\273?i7 `\262\223\244?\356\\\246\223]J\210\277\372T\307\212\027\224\226\277\351\244\345\252\363T\227?\323jM\225\035R\214?B\3511\350\211\211\223?\2515\254-e.\300?\212`\242\225\t,Q\277L\270v\363k#\261?P\345\356Rn\313\223?aa\213TM\315\265\277C\314q\343 e\177?\375\244\000o\206\275\253?\331D\240\331\371\247\244?\253\323\300\020\353\355\204?J\244\334\231\343\276\224?j\230\365\360\322\276\261?\231Lf\323Ij\247?o64\235Q~\245?H-\253\350\303>\244?z\303\352\200\005\337\244\2774\" x\337%\265?\317\027n\005\274\350\241?k\363\222\016\365\014\242?+}\251\036\267\177\274? /\225\230\026\336\237?\303\272\022\375\261{x?\323\003\320<A\341\255\277\305\212\272\331\2266\227?+Rf%\3330\260?\3570\365\014D\303\234?D!\033\253AV\242?\277\316\355(E`\247?\326\223OH\230\215\225?\214\n\353\262\327<\226\277\027\250\275o\031\303\254\277\271\014\363vh~\272?\372\233\307\226\"O\261?7\362H\325\331=\247?\226I\235\030CM\252?yT>\374\343Z\264?1g\021\345f\023{?I\027\332\272M\030\230?n\302\270y\265l\211?\215\212\024\327\354\331\246?\347\023\327\003v\315E?\253\323\322\363\246\326\243?\0376a`\365\376\235?\377f\023t<\345\247\277F\t<(\017\250\241?\244\036\334|\247r\265?U\265[\315ec\253?*7\332<\321\237\266?Q\nZKxw\266\277\337k\342\306(-\252?\365a\331\246Z\006\226?jS\347\344TQ\264?\204l\235\333+\303\205?\324\301\'\301\016h\301?=\357p\202\tx\301?j\277\272\314\336\211\233?\007p\265y\334\352\250?\326\333\326~\201\014\226\277\213\2318JBH\232?\245\002\221\277`\251\227?qr\013\322\226\267\202?"
      }
    }
  }
}
node {
  name: "normalize_element/component_105"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "\376\355\\_\276\321\240?\271\335\330\247t\224\262\277;\314\253\373FB\276?\303\004WAX\002\235?\276\233\t\256;[\270?\375g\031\036\005\314\257?m\0147i\345!\251?4PXc\202z\277?\330\313G6}\224\263\277\314\362h\357\373S\267?\007W\\\366\315\370\241?\201\270\224\273\033\200\177?{\260>~l\033q?\200\303lK\342\201\220?\344\342\022\301\344\270\226?\254J\210\335j\342\204?\232\374\254\270\214)\273?\r\347J\237~\231\211\277%\343/e\224\362\243?B\224{\366f\030\274?\\\312\321\232!\200\250\277\232\263\367\017\r~\243?<Z\346\276\346f\261?\2549\037\"^l\243?s\310\022Ed2\244?-\254\346\374\276\306\236?\'@\301\203nH\241?\274&\210\340\326b\260?Hha\325t\313\252?\217\326\372\035\350s\246?\221\260\247\321oU\245?\020\007\362\264HO\242?v\316\264\234\002\233n\277F>\240M\275Wu?\375P\277\304\205\'\247?\261}\347hl\347\271?\036&\325\317\1775\211?\262\203\262?<\212\250?l\304Ty\211Q\263?\026\274\270\3621\326\243?5fm\256\365\240\240?\327\235\214\311\231(\256?\272\212\270E\010\253\235?\202P\210\307\0304\205\277\215*\363\3611!\264?\031\217\2653\nQ\263?\033\203\0073\221\305\241?\236\014\332 \235\376\235?:\001{\274\370q\263?\211u\245\303\025\340s\277\226\214\003\262N\312\233\277\322\360!9}c\216\277\343\017\234\271\333\203]\277\350z\306\261:a\260\277t6\267\036\222\025\210\277\312\317d\004\366\306\257?\213\367\203\204\237m\254?\325\373\351\346\2626\250?\207\0308k\263[2?\212\256x\333f\331\251?\343X\n\215\317\000\263?\316\226\244\031(|\246?7?!\342\266\033t?\365\022B\213\225fm?[\323=d*\372\236?\252\000\2553\235!\244\277\303\310\2208k\275\233?\003f\327 @Db?\335\300\323\0329A\266?@]\344k\275I\245?\032\203\242\007\253\242\246?S\250\377\220\244\302\223?\235\346J(p\367\250\277\210#T\030w\335\271?+\231k\352\237Ti?\227\246\207\357d:\231\277\231\272L\311I\223\236?\177\211\345\207+\026\244?\305\251\314P\271b\272?\030\315\023\315\330\327\246?8\2052\340nA\237\277M\251_\252\0305\247?\237\364\251Vk\320\233?\002\351D}\360\254\247?\235\017bv5J\272?\030\306R.\321|\223\277a\334\226\223\023\227\251?\233\267\274\002i\260\211\277\265B\000\214A\t~?O\243r\016\374z\202?9\177\'\356\367\022\266\277\355\344\326\033\352\264\214\277\371=3\206\016A\260?Q\212\036D\247\361\240?l\\\210\240-\221\273?\273\243\362\273X4\246\277\217a\232^l\236\245?_\245\t{\335\231\247?\337\300\000\234\300o\240?KS\365\014\220Q\222?\233{@\207\226\310\203\277\331\006\201\244n\270\234?\340\234]3\003\331\260?n\202\noX\030\237?\202b\032<\002n\222\277X:\207\201\232\231\245?\336\004|\n\302\r\245?708\321N\320\253\277\313&D\351\240\205\233?\271\201\201n\317v\261?\253$p\363\337\346\254\277\263\326\212\025\271\320\240?R\213|\357S{\273?f\025}\330\347>\226?\245\260*yw\217\244?G|\262XF\307\226?\227\307\273\237*\021\244?]\005.\030\'\201\242?\323M7\220\373D\241?\302\203\013\036K\304\220?j\207\352\246\307\310\203?\372\264\246S\000\207\255?y\013p\266\303\243\245?}\006\365\251:\026\265\277\263a\304s\363\343\241\277\256\240\260^!\200\241?}\216\362@\"u\254?\302\367\371M3m\274?\033!M\006\221V\246?Z\361\301\366\211\277r\277\'\210\311:m\244\204\277UA[\272\301\321\235?~\252\327\033\037\247\214?\305\361\365\025\241a\232?\2230,\257\367C\205?Q}1\245?E?\277r\350\227\002~\377\257?\321H\n\200\177\267\231?\256\242\244_\331\007\262\277s=]\037\316\252\210?\347\016\303\220\232K\255?l\226Y\361\376Y\244?\031)\"0\307\014\217?3\326W\207>\200\230?\005\037\3072\244\332\261?o\021\362#y\014\233?\326\3550I\014\322\244?e*\307\333\177\241\240?\230,\223\206\277\313\244\277\377K\267\304H1\266?\214,\321\r\330\313\241?\254\025\r\034G\341\243?\245:;\036\325\336\262?\030\200/M]n\236?\270x\025\245\306|\217\277G\214d\260^\034\250\277\376\006\365F\020[\234?\014\234C\204E\346\260?b\371\007R\250\365\236?\232\206\331\262\0313\243?\232qn\241\230-\260?\220\214\276J\212\004\244?g\0232 \023\332\224\2773\266\204:\264\341\262\277\353\254AX\300\026\270?\236\274\353\023\020\370\260?`hH\361\3763\250?\377x\207\222\313\252\250?\315\223\221\321\006\202\265?\266`-g\204\361z?\342Mr\030\260\n\240?\021\027\222)\245\273\233?p\024\356\317$5\242?\035/Y.\t\216\315>\367\352\307L\300\264\243?3\322F\006\2356\237?$\366\367\274\\p\240\277<v\001C\027S\243?\374.\266Zq\273\264?\271\310\271$9&\260?\264mK\366eo\270?0(\304=Ew\265\277\310\354W\372\003\367\251?\337\334\343u\222\347\231?\000\274\204\221\376a\242?e/K\243\030\014\223?0-\311\205\363~\301?\277q=\375\254!\274?M\342\007B\r:\246?\017\305\226~\277!\250?\241\301\253\207]K\200\277\247\357\341\00497\232?0\376\256\266\377T\232?;\350\276\016/\227\207?"
      }
    }
  }
}
node {
  name: "normalize_element/component_106"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: ";\331m\032Rz\240?\'\250%yU7\260\277\352\335\200\030\346Y\275?\277\320[\360-\242\241?\022\254\024|\177\365\267?\330\366\314K+)\261?r\025\351P\026V\250?\r\304aRDR\277?\335O\310\371[5\256\277\003Y\335W\326\227\267?\335\352\302\332\333\327\244?\026\037\302\237\261\224\214?$\227\227\255\t*\242\277\017\276\273\213\263\306\221?\030\247)\0339\177\243?:\261a/\017\367\207?\037v\014\263\303\244\271?\233\210j\211\026R\202?\2759\023\325\206\203\235?k\0062\347\213P\274?+?\030\224Cm\234\277\027i\325\363\335\311\233?\217\330G\327\347\022\263?Z\030\376\3407\026\244?5\222\256\340Q?\247?K\220~\354\017C\241?r\\\242\207\225b\246?\224t-W\310\'\257?x\234\220@\375\023\244?\377\262\030\310\365\347\233?u:eux\366\227?\276s\312\321SL\246?]\236\2721\276\341>?N\214\210\t:\277x?\013a\315\262;e\247?\233\270}\330\320\"\265?\252:\033Z\263\201\243?\r\306\0216\377Y\253?\206\203\272\321\222\212\266?\365\024\224\375N\356\241?=\204L\215+\211\242?\010\322\215\3746\316\253?\207R\035\240k\307\233?\333U\\\3350X1\277\325\311\n_\016\244\263?\034v\361\024\370\336\261?\313\325\217M\362#\241?A;\240\237\273\272\240?\325L\262fH\273\264?\031K`\214\253>u?\367\202[\346\220\256\235\277\330\226\016\221+\331\177\277\311\341=Nk\257\202?5l\233\257\200\254\261\277\320\311\314\261.\001\177\277\001\260\203H[\234\256?\344\241@\266d\t\257?\237^\177\313\311\257\252?J\315\276\365\330\313c\277\2763\351\325Q\354\253?\273\335\370\376\371\302\265?\336w\251dB\304\241?9\377\305\037\204\001\205?\034\356\232\305\310\350\205?\333\302c\247n\032\236?\243Wp0\265T\244\277\370\021\314\214\017\227\216?|\n\227\215\202k\204?Y\352`\312\256\036\266?*\rtn\214\375\245?\365\214\022.\303\003\247?\374\342,\316\023-\221?\010p\233%\330\352\247\277?\207\001dK\203\270?<^\3240t\323s?\013F\241<^\016\230\277\275PN!H\277\220?T\305OAP\376\242?73<\356B\020\274?\001\343j{\363\317\221?\356\354+\017\322S\230\277\231z\364\276\245\'\251?\352/\366\211\374-\225?r\326^F\334\\\246?/_;qi\027\273?\013+\371\376$Cx\277\255\245\367\302\241\r\257?\250\354Y\257\240kr?\020n\3227\340(v?\257\240\376\355\221Q\202\277\265\314\202\206\207\373\252\277\265\222\341n\314\217X\277quV\304\026\246\254?\201#\024jl\000\237?7g\000Lrp\271?\004\223\336\341\275=\244\277@\204K\326\307\224\243?G\001\310\'i\240\247?$\032L\337EA\237?\354l\213\334\032\253\225?[w\303\033q\177P?/\243(5S\330\231?\232$f[\245r\256?x7\344\331\304M\241?\246\302Y\303\245`\202\277\337\255\003R(,\246?\272o1\026\270\002\245?\264h\004\222\345a\245\2774\315\246\351\324\021\235?f7\005\302\346M\260?nn\017\354?\005\252\277\300\251\034N\361\234\242?\346\207\230\262\326\307\274?\362lk\030\371M\241?mO\363\002\252\207\245?|\0012~^\024\224?~C\241\230\316\344\252?\255A\360\334\241\177\245?\336=\371!Z\036\240?\232Tb\016\352q\223?\014\014G\372.Q\203\277*\205\236\237r\344\260?g\247=*\240~\245?\373\002\214\304\212\356\266\277\r\237+L\n\354\234\277i\345\264`\017\021\240?\272Tr<\t\346\253?\3235V\014\236\\\275?B\356\243\314f\013\250?r\031\251\212\270\037a?\033J4\033@\314q?[\016$\212\361\343\242?\243,\346aM\327\212?\001\217)\321\3629\242?e\244\353};m\243?\212\246-Z\362\013^\277r^\207] \260\254?\35390So\032\241?\350y\264\224\323n\253\277\230i8\273nw\222?\262\362z\031\215\310\256?\367\345\275KX\004\243?\261\037\241\347\310*\226?\236l\276\242?Z\232?C\302v~\361\217\261?U\310\203\227Z\233\247?\2254\337\276\227\215\243?\311\270!G\354s\230?\204\036Z\371\237\333\244\277\241a\030M\272\357\266?\346kn\003y\241\241?\257;\316N\265\377\244?H\340\315\"-\370\237?\217,\264\001E\035\235?.\225T\371\340\255\246\277\222\344\361hn{\202?\206B\307\270)\270\241?\234qTM\224-\261?da\t\035\324{\241?\271\233u\000\243O\244?\345%\203\314c\007\254?\330\304F|\316\255\257?\017\237\256\315J\203\224\277\231\036=\023\324O\267\277\025a\014\252\342\315\264?\370`\177\375\003q\260?k\354T\361-I\251?\362\345Y\327\325\325\247?\326e\034\026\257\241\266?\252|\232V\264\200{?\275\213\0239&\206\243?\204B\033\270\267\346\244?\027\271e\217i\320\232?(\267\205\230_\216=\277\036\210\345\3748\215\243?G\'\314-\r\371\236?_y\370\201\227X\216\277\317\311\377\242\323\014\244?\230PuS\300\371\261?\375\357\334\tc\374\262?\207\236\227\001\234\033\272?m\201\031`\332\310\264\2775\216\201\n\201;\251?F\025\223qkV\234?\210\352_\362<A}?\347\302\253Y%`\233?t\243N\224\022/\301?\'\360\031Lm\360\274?\302\365\334\315I\253\250?\335\235\"x]n\247?/`;\253\024!~?\270r32\201\210\232?%Z\2411[\376\236?#R\240=\001\216\215?"
      }
    }
  }
}
node {
  name: "normalize_element/component_107"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "\t\257\377hoX\240?j/\223\302k\200\254\277\343@\376\210\025$\274?\033\261?\0364\232\244?\336\345\253\257q\247\267?[\027\271\322+\030\262?\001\332\332\353r\204\247?\230\356\3334\251-\276?\274\320$\3752\"\245\277\273\rI\261\314p\267?\177t\177/d\371\247?c8\227\025\234W\225?O\303\006\367B\202\252\277-\374\302&\220\344\220?>{\211\014\0062\254?`\031\002\0359\024\216?@\340#\220\202\017\270?\337\340\345\313\006\367\227?\222\307Rr\356y\235?\t\203\334\214m.\274?\224\037\276:1e\200\277\321m\003#\241\300\224?\236E\316F\327\232\264?\361\034\350\246o\307\244?\250!\005\252\332\311\252?J\002I\342)\007\244?\220\264\370m\270*\253?\372\351|\316\226\331\254?b\263\003~\362O\237?\345\3743\324?\300\222?\364\2125\311\200\315\214?\251\243P\007\223\221\252?@\335\207V\003\241x?\002Kg\215e\355{?\024?\354\243X\020\250?l\256\366W_\302\254?\221\3774{\301#\233?\337P\031{\006?\256?\220\367!\244\253J\271?A\000\307\243\366P\241?\032\204\366@\344Z\243?P\006\247;\330-\254?\223:\340>\233\352\227?i\274L\313J\276\202?y\262z\013\024F\263?\310o\353\035W\353\257?\020\212Hu\203f\240?\337\310\222\362\300\353\241?\306\017\206\033\2372\265?\255\253\024\230\324$\216?\232\206\222\335\215\204\236\277A\304Eoj\000l?\373\356e\301\025g\226?c\325\307\023\246\307\264\277+U\266\320\024\210n\277\347oj\351\317S\255?\'\317n\215\005\216\260?\222K\211\025O\354\255?\003)\002\263z;m\277\372P-\030\030V\255?\255\002\357\303\305z\267?i\335\212\355\203f\236?\004t9\007\312\313\220?;\271X\261\365\225\224?\0310\227@\211P\236?\310\n\305\360\355j\244\277\321%\325\244\377\330\224?\200J-E\006z\223?n\005)\2054\273\265?\351\000\031\036!!\246?\206\237I\254\326\323\246?\244Q\351v\342\261\214?\177\345\030\373X\342\245\277\017\306\333\214\313\037\266?L\014\314\201S\\{?\206\005\272\240\005;\234\277\206D\247\325\372\234g??n\224\374Un\242?k#\246]\257]\275?\n\336\232\270x\037\207\277\003\027p>\221\001\220\277\373\221>\207\333\234\252?\262\211s\244\230[\222?b\0330\311z\312\246?\241\341\237\342\320\214\273?[\025\t\357p\020\204?\347G\267\266\324g\262?kM\220d\230\013\227?\364-\253d\213\232k?>\300\273\336\373\360\225\277\020-3\036\005\205\220\277O\2045\027}\332\204?A\036}p\227-\251?\223\367\365l\353\341\232?7\322\354\226\361*\265?\210\277\344N\002\376\241\277\233\021\243\274\226]\243?Z\2453\261r\310\246?\215Bb \247f\235?\334\004\301\336\"\002\230?\n\311\241\374\337<\211?\313\364\275\031D\212\226?\035\220\027\341\014O\252?\350@\215}\364F\243?\363\233C\313\032\362H?\370\232I\224\360\226\246?\254\364\342\335\364\333\244?\240\367\342e/\326\235\277v\303op\r_\237?\367\232<j\356\026\255?\014\270\332\317\321\306\246\277K,\211\351\313\235\244?O-\317A\237\341\275?f\213A\263-\373\246?\300\375S\206~a\246?\036\262<\240Pu\220?N!i\315\025\371\260?\317]\243\311\353\337\250?\314[\032d7\330\236?\nHc\003\325~\226? \032\006\301\035\207\231\2775\251\207\271\273\006\263?\274\223uV\020\245\245?kG\372\177\230.\272\277X\324<T\016\276\226\277a;\250\\\222\027\240?3\023`\346\250\224\252?\275\357\316\220\340\374\274?\313\234\342\374C\266\252?L\304\024\022T\200|?\342-\227Z\335T\224?#V`w\243W\247?\224\240\217\227\r\351\206?\243I\260\330)\315\246?R\230P\361\032\034\240?H\260i\214s\'j\277\361\305\273|\033\375\250?\306\253#|,\323\243?\367\'\230\001\314T\240\277\233+H\010\226\360\226?\337/{\346\240\334\257?\201J\210\376x\313\240?bzX.o\234\235?*\271\026o\\\255\252?+t`d\302\342\260?\326>a\254\026\250\264?\235\221\2246M\206\242?\020`\233\321\262\225\217?W\216\247\035\262\014\245\277\360\356Y\273\023\n\267?\261D\206\246\003\221\241?c\247_\357\354\225\245?c\')\241\325xR?\323\255F\222\372\224\236?\211\201\336\266\027\032\261\277\352T\'\327|\253y\277FN\202\336\353\t\246?\272\207\366D\3460\261?=\315\205nO\300\243?\230\232Xn\326\321\244?\227\231\2605\017\353\252?\312i\240\02091\266?\\{\t\217\342\216\224\277\"\266\216\206`\020\272\277\244\367\251\004m\355\261?O\304Z0|:\257?Uk\376\353\036\321\251?\371\n\303a\030\231\247?\214 \361\322\035)\267?#KoJ<J|?$\205\022c\"p\246?\257\311\345\002A\307\253?M\233~D\244\212\224?\354\275\005\315?\336A?C\343\204g\024[\243?I*e\257\375\270\235?\334\326\341\253\307\304p?\025\231\375\335\342\261\245?\242\330\225\214\037\007\257?\014^\032\335F%\266?\014\321\36379-\274?L,`j\232c\264\277M\030:g%\\\250?\027#\335\222\306\257\236?\325P+\313^Vk\277p$\354\265\202\241\242?\231.\032\353H\231\300?J\353\375\263\327\234\274?\002\024yK\237A\251?\340\020\034*\325$\247?\024\273\251\215Y\022\230?g0\246\2266\347\231?z\230\206y@\355\241?G\261\232\266\230\002\222?"
      }
    }
  }
}
node {
  name: "normalize_element/component_108"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "\274\2572i?\021\272?\376+\310\"\217\330\333?g\234o\014MN\276?\316\272\007g>\007\310?\301#H\252\221\013\271?e_\027\035G\256\277?$\242Iv-\240\270?\265\330\215A\236R\305?/\254\227\266\352 \330?\276\204h\1770\010\277?k\266P\004\001\312\271?B%\3658\350_\310?\211\367\036Y\271\n\314?\321E\316\270,\003\300?\013\320\036~\352\327\310?\352\2032{C[\321?u\224\203\331\004\230\300?\035}\277\335\001\372\306?L5\365\262\324\027\277?\227\233\216Q\265\325\303?\013\361\231\003<\235\275?\233}\004O8\363\266?8,p&d\257\300?\242\020\023j\014\216\256?\353\233\207U\264\240\272?\036?\024\377\211\247\264?\031\206F\262r(\277?\336\322\203\345|o\267?\305\200\'X\334\262\256?\323\205\232\031\344\013\301?\377\377\312\r0:\255?<\216\320\343\270R\277?\tv\214\303J\231\276?\032Zy\326)\347\313?\241[\364\275\242u\301?q,\275p\3064\303?\245k&\337ls\270?%\017\377A\010\356\274?P/&m\022R\304?\264e\366\002~\320\300?v7u<k\031\311?t\324\272\325\277\340\304?o(\252\356\371\260\306?\235a`\331\251\022\276?\221\307dU\252b\270?\232\\\255\217^?\301?\260V\343(\035\005\271?O(\365yM\216\271?\341\252\246|\354\324\260?%\314c\266,k\304?\2735\360p)\021\325?/\274\017cy\247\317?\036u\365\334\242\351\321?\250\'z\200\361\203\331?\"\022F22(\301?hh\205\347z\342\264?\3427\270\206\257\265\270?\003*Lz@\242\261?\343$]\313\025r\301?j5\245n\307\321\271?b\034\252\311V\316\300?\316\346\350&n+\311?x\333\020\331\303{\303?\313\323\216\"8\034\311?\370\340s/I\310\310?\007\306a37\224\266?\r\2205\021\240\340\302?\303J\n\316\016h\307?\215bL\t\247V\310?C\235\207MCX\302?\226\273\367\271\237\250\301?\324\242\001f\005\031\300?\002\036\033\370\206\177\327?\264\3617\014\254\204\304?W@\307e\341\r\262?u\236l[x$\325?\"\270\035\\25\300?b\224\220\335?5\303?\263\353b\303h\020\274?\356D(:\273\352\325?\371i\346\rS\002\314?\277I\274\004\363L\304?\002\245\217ce\240\314?\2244=0\231\215\303?WS\371\241I\327\302?\005\312\340\007k\214\311?\361\3601g\234W\270?\205{`%\361\002\311?\203\035\307[#\314\301?\255\375?|\320[\340?\307r}\345b\250\321?\225\037Dt\000\253\307?}&p\365\340\221\317?\247H\375v\213\340\303?y\311g\310d\260\267?8X`\021\301\215\303?\322\035\020]ZQ\222?\032^\343\017\023\350\320?\021\365\362\2430\273\322?\351\266# O`\310?\333\177\033d\275\021\317?A\254\277\244\177i\261?\033J4\033@\014\310?\362c\345\372\353\323\261?\2724/\233\301\036\306?\033N\207\270\263[\272?\267\311\326jw\336\274?\r\324\215p\215\241\330?N\203#\372\025\350\265?v0\002-\324O\267?\324\n\250w\276\315\314?\366\026\353(\302^\300?\305@\251\206\225;\270?C\233\370wqs\320?\311\215\200\334\016%\275?\'wh\360\250E\273?Y\223Xf\322\245\304?n\236\326\254\264>\302?\025\201\245K\343}\304?8\224\225\267\007\207\311?4%\262?\353\202\317?\t\343:\325@D\271?\242e\233#D\334\271?\t\014\243j\0057\330?\271\317\006m-$\273?\275\255E\"l,\273?sA\205<\345E\302?T\024f\334\377\000\307?\222\305\356\034y\t\276?BJ\303[\255\264\315?\335\3069\306\"\301\302?\025\263\276~\021\177\273?0\352F\227\270\007\277?\r\340\203\220Y!\300?\252\376i\354\020\024\303?\2731:\251\372\230\317?\223\007\037\323\245B\232?w=\003\260\"\037\301?V\321WD\330F\334?-\342\035\333\220\221\300?8\356\336\233\360\\\303?@\333\261\253\245\315\305?W\3739\332x=\307?\350\266\005\312\364\253\314?f\r\353\201\347B\271?\213\301\276\373\265\005\264?\374\177\220\275\302\250\260?\316\002\3749V\000\304?3\220\270\336n\375\304?\247#\241\251\256\356\311?\255\255\252\'\213\254\267?\303\r\363Cw\231\303?\245\375\334\276\261!\320?(\314\324T\261Y\276?\023\237k\372\024\311\311?\311\014B\343\0037\340?\016rw\323\266l\301?\315\\\'\310\344\241\302?\202*\233]\352,\270?\2066\366\250\234\017\303?\267\204SQ\202\237\262?\303\033bT\003a\275?\330\035l`\224H\322?\212\213i\307\211\346\324?\220U\271lNG\302?\233\346\340C\320k\272?\351\270\\\365g\\\277?\373\002\335\013\212\356\273?M\250$\016\200H\302?\001\351\337Q\n\212\271?\225\332Xw\226:\331?.\357\310]&X\337?G\260d\323\271\276\264?\024\335\006\367\373,\306?\263\202\370#\271:\264?\351\3670\215\2742\315?k\010\177\240\213\317\320?\024\324\377X\331\225\300?\215\036\234\250\325\362\276?x\322\336\272D\360\274?}]#\325\271\232\235?\212Gp\220\001:\330?bM\036|L\227\274?\306\326\330\312\360\004\313?y\020\r\033\375\031\270?tQ\302\206\206\211\314?\0236\321!O\026\304?B\2161\240\254R\260?\"\035\273\227=\201\267?\214\342\217\201\300s\260?G|\221J]\244\273?\237\376\353\220&\324\307?o\261h[I\002\267?\271I\247\326D$\314?"
      }
    }
  }
}
node {
  name: "normalize_element/component_109"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "\327)\373SO\213\240?\345q\203gc\241\250\277\330A\346I \305\272?y<\002\277\023\241\246?9\341\206a\2050\270?\344\207\335\2067\274\263?\345\214\230A\313\246\246?\300\r)\355\252S\301?\001<\341\246\270\n\231\277w\204\240\221r\361\266?\014m\347\230\1776\253?\n\257\"x\2035\234?\217\204\030\020\243\345\254\277\332<\200\330\341\316\212?IV\321a\266K\262?>\301\351P\222\035\227?\207\365\353\363\275\253\266?\304\264\220\374\230A\226?;\033\246A\307\312\240?b\220=@\314\345\273?\227;z\226\374\\\200?n1\303o\330\360\223?\343\267y\307O\001\265?\303w[\034\247~\245?oAw\310\033\000\256?\364\005U\354-\272\250?\244B\276I\250 \260?\305\226\237\315\nB\252?\332\376DN\'%\240?\310\235\3343n\021\232?\273\303o\010*\352\227?\010\220\343\177\331\332\256?\021\206\246\221;\021\201?7\336\367Q\010B\200?H\n*\177\376H\251?\304\251\227^\351\034\244?\032b\020\346\343\313\237?|\312\217\312\335\177\260?`\024y\234\346@\273?\263\205\212\353\304W\242?n\363\323sc^\242?=\346\277\344\237\311\260?\343f\021\272\346\266\226?2\020\352s\314\261\220?\325\252\327\331\002U\263?\267z\3752\340\370\261?\336\236\231\300\252\003\237?\007\022-\334f\350\241?\273\252t\366\034x\264?\265\225s6\330,\227?\243\303*{\236\201\231\277\277\034\2266\267jx?V@%\327\342\215\242?\210\233IW\215\376\271\277\036\341\223\322\\<f\277\"G\022;U\351\254?\262\213#\210Sc\261?\272\"8\373\361\001\261?\016\227\274\004\036MR\277\323\314\341\372z5\256?V\365\260\037{ \270?\032\013\233\345\330\230\241?bn\250,\313V\227?\2662t\373\313?\241?5\204wz$\254\240?e\340*\226\365w\244\2773\215&\027c`\205\277\032\214\256^\207b\237?\3373z\204\206=\265?\246` \027\273\316\245?\202\037Qx;\210\245?\201\261\216H\2630\206?\361`\332#\023q\241\277\306Y*\322qs\264?`2\353K\212\035z?\304\014\270\247\336,\241\277?O\255\005\2206\272?\315\013\345\201\036#\243?\344\002jF\023\343\275?r~\251\360~\024\243\277$\216\031\001E\307v\277\0018\n\321\240\357\252?\223?\013N\354\275\226?\017\376\030O\021\233\251?\302M\365Mb\334\273?\310]Y\251m\261\233?\030W\367\360\256x\265?A\272\376{\365\223\244?\306\314\214\036\302oX?\035\021\nL\322\365\223\277D\271A\250\343\025\226?a\303}+\2540\220?\211\317\230\247E\r\247?nS\222.c.\226?\2645>m6Q\266?\216.v\310\273\215\237\277\010\346v\234\223\370\245?x\352\304\367[\301\247?\270\335\364\374\243N\242?`\3023d\346I\230?\363\357[\366\351M\230?0\')/\200\220\242?\335S\244\210-\271\244?\320\366\265\034R\206\244?\325\250dY`*\206?,\031\375\361)\303\246?\261\352\021B\276\206\244?l\260\250<E\004\221\277T\361\242Vh\205\240?\037\375\345I\210\250\250?\317%\335\025H\360\243\277\247\216\033\237E\306\246?\270\n\200\366\305\323\276?\236\347\323Syu\252?\330#\014\267\007\027\247?\303\025\321(\275l\210?K\300kt\'\210\264?\340\371\301\320U\200\254?ITz6C[\240?\022\020\257\305PI\227?\010s\327\354*\237\235\2774\370\242\r%\262\264?\254\010\227\213\201@\246?\313\307\365\274\t\250\277\277F\347Z\206\310\201\224\277nh?\\\266\371\232?#\260\203\224\351\341\250?\213:\304V\010_\272?_c\362aQl\257?\210h(yk\034\202?h\261I\273\'\310\241?\350\020\003 \230\352\253?U\316\363\264\267\354\200?\266bug\312\247\250?\234\006\257\327\240!\271?\236J\371U(\356b\277\203\207\221\247\252\245\245?u\375\'$>\034\242?\261\316=\223\031Id\277H=\317\225\3046\226?\374:\245\300X\030\260?\027 \033\222\244\265\233?\300\t9z\362l\242?A4\365\345\305\274\255?r@\270\363\336\307\257?9\305\231\025@g\265?\221jh\233\314\214\242?E\233%\371\370!\202?\357B\267\272CZ\245\277\364[]\026_)\266?\313p_\256\025\322\241?lC-\034\364\344\245?\271\243\324e\376\277T?\252#Y\035\277\013\243?\357\023\242\244\tY\261\277tTp\243\301\240\226?\203;\321\'R\227\251?x\177u\202!\036\261?qk\257^u\177\245?\230\257?G\263\313\243?E%;W\020\332\251?:%4\n\310\345\273?\343J@\303\320\'\224\277pE\275;\215\217\272\277\006\275\263M\\\324\260?\362\350\244\311U\304\254?>\262m\334X\014\251?\242\253\000!\212\260\247?\243*\260D\303\211\266?,\260\341\230N\263|?\317w\033\224c\304\250?\260%(\241\233M\261?\225y\377\255\321c\225?@\016\340\263\311on?\352\350<S}!\243?S\023\211\261h\024\234?rD\306\274\361b\227?wK\204\243j\017\252?\204\270\211\222D:\260?\321\007\177J\2136\271?\342\315\274J\256J\277?2\333\241\243M<\264\277\252\020n\266\342\260\247?j\024<\31415\241?\003|\037]Xvb?\231t)\350\325\204\250?G\362\336\026\001\325\277?5\033\010\"\273m\274?\304\340C\204\335\202\256?\240\204\355\265\r\224\247?\245f\356\245\031 \244?t\224N\3474R\227?\360\\\202\315\345x\243?\275\014\217\225I!\225?"
      }
    }
  }
}
node {
  name: "normalize_element/component_110"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "\210<8\216\016\376\240?\r\266_\336\346\004\244\277G\251J|jL\271?\"\376\202Yx\311\247?|\0025p\230L\271?\272\354\211\016~k\265?\3354\372\364\177\336\245?P\345\0006*\264\276?\252g\350o\247L\204\277&\021\223\320\223;\266?(`,\355\203\025\256?\374\347\231\3716F\241?I>#\317\375\356\250\277=\2201\201\237\224\200?O\267\235\312*\353\265?\024\302=\253\331\276\240?\035\314L\207S\210\265?\217(\243\200\243\323\201?W\243z\022\250c\245?W\301&m\325n\273?\3341\313W/\252\224?d\334\327\370\201\350\227?d\250\227\323\366\223\264?\365\t\364\027\347`\246?$\367\263\331\nz\260?\2634nl\241$\256?57<C\214e\262?-\373\321\027\022\225\247?\226<\217k\362}\244?\222*\304\002\343\t\246?\251\0324)B@\247?\351\306\366\205PX\261?\202c\001\331\014\354\200?\242\177\376Rq\251\203?\207)n5\033\306\252?\367\267\333`n\030\237?m0\225\375A\304\255?\014\367\217Zh\264\261?\223\214\270\332l\247\274?\244.+\252\004\337\244?\001o\266\366\224U\240?\237da>\017$\265?}\351\270\335u}\227?*\032\262T\363)\225?\331\244\rM\372w\263?\271s\376y\\L\264?O\177\247\335p\236\234?\330tD\213Z\004\241?\274\014\321\261\033\347\262?\365\274 \304\303\353\234?U\005\354h\361i\221\277\r\020F\230\024\262r?\025\262t\267K\030\251?CJ(\207\223\027\300\277\335\267\205\247\212\273W?\326JS\312\2143\255?\267\210\203\337\341\321\261?Je\013\272\035\027\263?L\251\232\014\006Xm?GTx5\030\241\256?\034\214C\303\203b\267?\234\320m\207[E\247?\020\253\351\301ww\235?\252\200U\327\234\341\250?y!>,\253\033\243?\267\004U\255\311v\244\277n\356\262\326\205\\\254?zc}\r\005\217\245?\264\001k\344\331\266\264?\270\251\000f^\021\245?\016W\2222e\204\243?!$\202\246b\271~?\303\364\023\207\231\241\226\277\365K\250\006\270%\263?\026\263\273\306\202Ps?_\310\314\000u\325\244\277\317y\370\370\245z\273?\215\242q\"\246\266\244?\373\032\303H\241\277\275?\254\356B\207\201-\253\277\032u\313\023\252\311s?^\3349\331u\213\252?fQ\342\267D\325\237?\027\303\375\311\335\274\255?5\264\265I;\361\273?u3\217;&\004\246?@J\376\275\232W\270?\rR\312M\317\031\254?\026R\356]\213\346\355\276\035\366\255\234\336A{\277\236EEUy&\255?yO\350l6\223\221?\274\004\315\0053H\246?\346\203\010\262J[\221?\330Y\200\370\361\376\264?\241\347\031r\241/\233\277\301?\320\312\360\261\252?\024\022\323\377\036.\246?\007X\263\347\225_\246?!g\016\007\021\302\226?\266\306\276i\234{\241?QF\253F\356j\256?\r\2739\2468X\235?\"\303*\336\310<\245?a\2766\307+\243\224?`\372@\355\025\350\246?!\305\306\335\234!\244?\020;N/\003^v\277\021F\322\277;1\241?\200M}\360?\321\243?}n\262Wi\234\241\277\213K\360\256\374\367\250?\177\236\253R\037m\277?\3003\014\345e\311\253?\363\033\366\340\215\203\247?\247\003z]\226\341}?\340b1)\277\276\267?>K\227\3134\004\260?\337\240~\2265Q\242?\017\371dNb\323\226?\233\330\021\301\027\252\231\277\336\272\247\032\331\357\265?\"J\353\327\3544\247?\276\'\270S\230\t\303\277\222\303\tG\356\273\226\277n\330e\341\263\301\222??\210\355\271\017\352\246?\0148\275\036[\265\266?\036\230\270b:\205\262?>\0309\212\372\304\200?\321\021\264ZD:\250?\203\211Sn!\026\260?\203;\272\213\334Es?\212s\215\374\345\206\250?\0171\024f\220q\252?vQ\025\317\260\2030?\262:\346\372F\215\242?\230\310:Y\300\275\232?\201\274$\274\247\354\236?\235*\271lo\025\222?d\323B\260G4\260?\243\234jXL\237\225?\222\234:\371n\237\245?\026\342\240\243\246t\257?\262!\322K\231\217\255?\225\240\\\246h\335\261?%\200\257\251r(\243?88\263\213\331\372p?k\353\1777\337\263\245\277\334\027Q\214\214\213\264?\022Q\017{\350U\242?\334\345\251\256F\355\245?~`\202\253 ,\227?\370\302\350\342\004\340\250?\201k\214u(E\253\277\3013g\236\330\032\246?\363S\233\206HP\254?6B\261\250\227\376\260?y\262\240\322\266\321\246?P\025\261Z)\234\241?9\275\220\260\235_\251?u(\250\2002H\300?\332\327u\000\250\010\224\277\031\340\3742\212\370\267\277[D\036\005\253\021\261?\371\203\276J\367\240\251?[\375\253\243\2673\247?_\363\320\225\r\r\250?3\027\227.\355i\265?X\331\312\215\032\372|?\025\n\3437\035\262\251?l\237\261\326 1\264?Fr\231\235\274\375\232?\030\252\334\360-?\177?\337%\333:\344\330\242?\t\217@\000\314\\\232?;S\314g\227t\244?E\345\032\367\312\342\257?\367\337\304<\235\276\262?\006?Xc\\3\274?\000\306\301\022\000=\301?\355\n\236\276u0\264\277\216#\231\177;#\247?\224\356\254\262\366D\243?\304\357\340\006\000\267\226?)\004\2523\202\203\256?\211u)\374\271k\276?Mo\325.\323\032\274?_\025\245\rR\263\262?\271K\214\254\317\261\250?\320\317\305\300\351F\253?\022\032\216\325P\344\223?\245\214\265H\245\233\244?\003w\347#\005#\230?"
      }
    }
  }
}
node {
  name: "normalize_element/component_111"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "\220\204\243\002,\224\241?\236\301S\206y\250\241\277\205\372\235\363A\271\267?\307\312-\202\006h\250?\341\245\"\265Sj\272?\322a\312/\237\206\266?$;\030\254\226F\245?\266lO\276\020Z\277?\010\344\226\177\302\023Y?.\326\235\022\003i\265?a\252\020\304\266\033\260?\210\316\n\303\202&\244?u\315:\234&W\245\277\330\241\014\350\224fd?#\0237A\260\267\270?\260l\363\272\326\302\245?\301\212N\364\313p\264?\326\376f\023t<\201\277\320\004\372\254\201\231\255?7\036\241\243\253\255\272?Q\002\264\020\221X\236?E\220\374!3\240\235?O\277\331 r\376\263?\327\230\022tt\217\247?[\207\342\017\270\016\262?\000\216\3543/S\261?\257\330\316\023\251\022\264? 6\235\014\252\347\244?\216\354\274 1`\252?1\337\006$}4\260?*o\373\251\347`\262?\231\377\2278\340\335\262?\003\376#\345\204\217\200?F\036\261\253\003\377\207?\255\240\302A\335h\254?\215\322.q\247\036\242\277C\353\210\023\375\371\260?\0335}{y\257\262?\n\276\001\027x\257\275?jV7\220\216\250\250?\236(\253\027\263\215\234?\364\340jt9\353\271?\027\232~\230\243\030\177?M\371\340\032w\001\227?9\310\247\244\247x\263?\327\235ru\225(\261?]y\347U?d\231?\333\266\030\321\260\367\236?\304T#\211\230\361\260?\342l\211H\214\037\240?\021\303\270b\031\367\203\277\237\204v\247k\210z?\370\304\242839\256?\247\325\203\216\305R\303\277\232\305m/\307\375W?\300\3471\021\t\273\255?\035\177#3w\252\261?i[I\002?\360\264?\3002\355\235\374\326\201?\364\313(\342\351\237\256?\243\026\333\210M\002\262?\315\354-\304n\310\255?\006\333F\013\351S\241?\224\363\031\336\031^\257?u3\253\220U\276\245?\237\371\360\272\353]\244\277\351l\371/\255Y\263?,\352EM\361A\252?\326\265[j;(\264?\206n\245\300\312\355\243?\210\ryx\215e\241?\333#\2178H\256q?R\342\003\323\032\227\202\277\371e|\324i\241\261?\365:\211\330\305\014k?Lk\020<w\350\250\277\025>\031\3534u\300?\006\022[\024R\213\246?\361\231\342-40\275?%b\306\353,@\252\277\340Y\355\'\204\212\215?\177\204\2771\224\253\251?\207\307<\372xK\245?\246\244\264\"]\370\260?2\371,\360\221\244\273?i\0062\347\213P\256?g\367\002\270\373\312\271?{7*\370\354\207\260?\330\242\370=YMQ\277\302\245\373\352\276$\204?\266\347\307\231\005^\266?X\014cz\336g\222?\034\010\345WU*\246?1\\\205\343\345(\211?\177\305\233\256\207\254\264?Co\3547\345\232\226\277\024\317\t<XH\260?\247\027p\'\365\213\245?\222\006$R\264!\244?\3719\255\367\365%\224?\271\003\252\274s\341\245?\362\314p\250\204L\265?hm9\350)\252\222?\364\210C\311\363\377\245?\215\032\014\250I\206\234?\313\252\346q\314=\247?\311I\366B\340\314\243?QEp\252U\276n?\344!V\366\222\003\242?\013\t\200@S\356\235?\242C\272\201\3755\237\277\217!:\343\177\033\253?\363\207\231\217\001\337\277?\010\207X\251\022\370\253?\307\300j\3075\207\247?\253 \362\325\017cb?\031_\375\235\302Q\272?N\010\030\273O\236\261?\315\373y\377\221|\244?\365$K\016!\254\225?\375\370K\213\372$\223\2770\347\226yR\366\266?\225\351\341\025\322+\251?\304\215\230/\350*\306\277\2366\214}\'8\231\277\243\034\275\373\222v\250?\333\354\347\313\r\261\244?|ge\017u\036\263?(\035m\2330\001\265?T\205\227\304\177\330w?\216\216\004J\245\000\255?\004T$\236m\347\261?\342\231\n\320:\323I?w\263P|\306\317\247?\2468\300,\352\034\262?\n\025\264z\233\277h?2|\014\242*\260\236?\336\024.b\332b\217?f\321\314w\026\333\256?\232w\377\314\336!\212?\n\216\213\235\002v\260?nc\232\2064l\220?\032Py\270@)\250?\217mQ\032\365\006\261?!\256\343\222\277\210\253?4\362I\214=\262\270?\334a\350\030]\314\243?vT\344\371\324\375H?\233\312\247iE\013\246\277\352\032\356\2426\221\262?\226\353m3\025\342\242?Hv\247f\317\230\245?o\253\206\350\003\016\252?\305\036\325\016Q\025\256?\266\2269\305\371\207\241\277:d\325\260w0\257?{\032\002\020\017\222\261?Y\',\306\000\326\260? \245\356\327X\032\250?\036q\254\261\242\013\236?\302\260\3303?\217\250?#\377\013\205\201\007\302?\375\026\254W\342\030\225\277\245o\244\374<\367\260\277\347\365\241\267\352\315\261?\030T5\360\214~\246?z\245\340\264\326\323\244?\247~\326\343[\253\250?\002\322\323\207\3736\264?\314I\210\357M\236}?\210n\026_O\234\250?\000\230r\213\347V\266?`3\024\005g\341\240?\3722DZ\322m\207?\022J\343@\335z\242?\253\017\245o2\247\230?^\306$\216\002e\254?\247F\013w\376\322\262?\224\222\t\353\013\020\265?\317\240{\270\337\177\277?pp\320\373RA\302?-\036A\236\033\"\264\277\330b\274\210\344\233\246?\202\251a\035\231\327\244?#\200f\323\273\277\253?tIV\367(Y\262?S\207\2236\200\367\274?^q\035U\340\363\273?\264\200\\$\345\325\264?&RD\315*H\252?\342\270m\216\\\177\260?Y\220\320\020:Z\220?\262\217\215\301<\304\245?\371\241D\336\201 \233?"
      }
    }
  }
}
node {
  name: "normalize_element/component_112"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "ng/@zA\242?R\313P\301S[\237\277\311\260\260\376\324\032\266?\026M\360\030\341\227\250?\204\0252M\224a\273?\226\000\260\305d\255\266?\254\016\014b\230\372\244?\265>\233\013\022\021\277?&4\363+p\216\177?,\017o))\250\264?8\354\306\324\300\203\260?\301M(?\007h\246?\357\002\016i\240n\240\277\256\353TO\237Ja\277\350\024LK\230(\272?ef\326\272#O\247?n\275_2yv\263?\271\ta\257\\\341\226\277!W\025\332l\276\262?\234\266\220\221\375\275\271?\345\217l%\251\211\242?\330\221\307,\253K\242?\032\2139\027e\207\263?t\244\310\224\3562\250?\231\261O\235\232\215\263?B\236\t\277g\263\262?2XZ\016@\337\264?$\224cW\377\214\242?T\000\376\274\270\363\260?f\235\r\323\240c\264?\030uW\275\226\354\267?r\325[T\242\244\263?\212\335%\016,\211\200?G\210\227L\272\322\217?\034=\373\355\222\010\255?8\307\375j\265W\204\277\214\254]\\\250Q\262?\\\030\211\323\300D\263?c\204\227\260\233\361\276?\232\370\354~\352_\254?\265\366{\270\235\343\231?\033i\331\3653\276\275?\320k\216\241\323[\220?\"\021\321\352\017\215\225?\035\237\027\216\352k\262?\217[W\302\226\373\247?\234\252\200\035->\227?}\205\237\024\272\006\236?UN\355\237\266,\256?\343\347J\3727\014\240?\3642\231\020\304\220|\277\366J&\225\223\312\204?\364\"\311bQ\307\257?#\377W\023\307\036\305\277\272J\271\363\253\3265\277\355\025\302\334\201I\256?\202\'\241\262i\276\260?\361@*\346\234\257\265?\225\367i\303\376>\211?c\212~\334\232N\256?\2528\236g\235\005\255?\262<\003{0O\261?\241L\032\330g$\243?\323\236\324\2174U\262?\006\356}\000\013\306\247?\215\340\235\2013&\244\277\023\032\356G}\236\270?\262\307A\222$\313\252?\351\002\221W}\264\263?\032LQ\233)\216\242?u\333\210\236\311;\237?vG\255\315R\364X?\374\363\026\n6\200g?\320\352B~\306\035\260?Y2\004V\307Wf?\343\n\302\361\2110\254\2777\216\021\266\303\322\275?\222\206\355\003\235\004\250?\030\3037ugk\274?\226\3762\323N\261\246\277\000\354\210\265\213x\223?\312\211\350j:!\252?[\231b\241\345_\251?\302\365:?K+\261?\311\316\357\274\323\353\272?(<)\022\232\304\257?~e\316\310Z\242\272?\265\351!}\007\375\260?\007\003y\275\316bV\277\272\244I\255 \233\234?u\323\034\017l\313\273?d\301\362W0@\224?\030\332\272M\030\312\247?\322A\217\377\237\026\201?#\274=\010\001y\263?\304\014\234R\257r\222\277\275\242\034K\246*\263?I\177g/fA\243?\347Bz\304\307\253\236?h\261\247,)\310\220?\214\324\336Tb\246\250?\302UE\210\220\022\271?\333j*\031mF\207?d\327j\315^\317\246?wJ\0022F\264\240?\314\0001\270\317\362\247?\371\236\323$_\246\243?\201\332\0244\322\367\177?@{\n\215\033\017\243?\364\032\2326\014\264\225?\355p\275k\245\027\234\277g\240\263~\223\243\254?\267a?\204\353c\277?\355\377D\256\231Q\252?\027i\313\201j\370\246?l\274\222\351rxh\277\234.L%\212\260\273?P\237z*\373\274\262?\330T_[\024}\245?\234\316q\025[\246\224?Ob\003.74\217\277\250\247Z\316O\270\267?\005)Z\264^\336\253?\3604\340\306B\301\307\277\247\200D\253D\355\217\277\352N\r\272\330B\231?\352(\331z\036\215\242?[\211\"\237\265-\261?M\342o%\202\213\266?\314\035B\0048\227d?\212ph\321\010$\257?\360Tb\314\315\037\263?l]\206\331\255`i\277~\220\266\010\304\237\247?\361]6yKk\263?T\341\336\033\224Gw?,j\031qM\366\227?E>\221\"\220\035\200?\313\213?\226\255\221\265?\376e\'\036x\376\202?\013\206k\234\352\034\261?\007\225\210U[h\211?\374vL\274\207t\251?\233\277\305g\0138\262?\221G\267\370\3609\252?\356\264\024\024/d\264?I\270\322cBi\243?\264\322\227\352q\373_\277fJo\250\255K\246\277q\277\343\336s\225\260?\314\211\250O\223\225\243?\321\277\212ws\375\244?\213\213MrZ\314\262?\251}\000s\251\241\260?\216\265\267B\365b\222\277\224\261\334\375\352\244\261?\207\356Md\312-\261?\302\353[/K\220\260?\013[\3121\rN\251?I\017\"\235\252\020\231?Ka\217\235xM\247?\343Z\272p\212\310\302?\n&\340\322\217X\227\277y\366\023\320oX\243\277\372\241\002\302\257Z\262?\261\231\317\373\367\307\243?\300OE\277\360)\242?\251?2\205\035\262\251?\231\264D\217a\223\263?\330s*\375\252z~?\220\313\013\362\253 \245?J\022\005\254\265\255\266?ovC\321>\201\243?r)eTDF\206?\2768L\217\0014\242?\263Q\233\r9\203\227?X_\016\317\323\377\260?\262\277\320I\rr\264?\225 \235f\363K\266?\2758\034V\353\326\300?\255\266\370\2329r\302?W\277 \211a\376\263\277l\372\247\254\212\226\245?\244\371^\241\341]\245?\263h\237f\377>\265?\367\337R\347\264\233\263?t\260\202\010\006\312\273? \266Jic\220\273?\363Q<\352\214\310\265?\341\356\363\262\002P\254?\\h\201R\301\034\262?&\207\364\200\036\017\220?^\207\360\203\201T\247?\226\300\021\235\230\007\236?"
      }
    }
  }
}
node {
  name: "normalize_element/component_113"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "\363F4!\260\351\242?\036\025\312\205t\277m?\177\333\253@A\352\264?>\031\35345}\250?\334\337\307;\001\371\273?\226\226k\263\254Y\265?y\274\306\267B\033\245?cU\243\250J\223\276?\n\307uQ\311@{?\200\177@#\265)\264?=\300\031P\375\360\257?\363OH\351\324\300\247??5\301\344\004u\217\277\303/q\273\002\227p\277\300A\321\365\252\271\271?%\312\377`\267:\242?VN\013\366\020\241\262?+\222\370\332\010\313\231\277+Xi\246\tH\264?\\\n\364\373\221\261\270?%\330\333\rr|\244?\033\216r&)\215\245?\010\303\227\301\314\202\263?\362\\\320\\VJ\250?\005\264r\004\260\316\264?\206\345\256\251\034\250\262?/\027\306\035<\201\264?aeg\343\036\321\240?\334\243\270\\]K\265?\206h+1\372J\265?0\240^\303\350\306\271?^\324\034\220\354`\263?W9p\253y\276\201?2\023\235I\301q\226?\316\0365\024\341\240\253?\n\335_\034\340r\232\277\234hW!\345\'\263?)\366\363MjM\263?\226{?=\317\202\300?\271\324\304\337O\275\256?\0067\032\014\352e\232?\306V\276\321\010b\277?7\340\213\340\223\017\204?F\316/;\2452\220?\372\t\201\013\233\311\256?\2617@OTM\245?\277\035\035a\225.\226?n\006\001\367\021\377\240?\3577\027\325\333\314\253?\346@\024n\'\201\233?\021\026\020\270\200`\212\277\234\217\233|\333\225\213?\035\320\007\010<\351\251?\275\323~\032\340\n\304\277y\006\240`\345!j\277\264\017h\237}\233\256?\211\313\262\246\000\270\255?\000\373\004*\305\211\264?p\373\203 \276N\211?h\241\341\360)\320\255?ZO\027\243Z\266\266?W\3432\217x\211\261?\345[\236U\006\330\243?[\017H\212\024\277\263?\234B5\305\346Z\250?\275\231\357\345\340\307\243\277\241\275K\300\347;\271?\325`Ox_N\244?b7\321\206z|\263?s3\365\035p\033\241?\364\306N\032\230L\235?\362~~\r\370dD\277n\016\351M\313c\207??\2237\237\276\216\255?\203^\\\003\213^n?t\375\244\242\375\204\255\277^m\270\324\260\373\275?#\013p\370\337u\250?\270\253M\037^\260\273?\206\034\271@\022\216\251\277\'T\361\370V!\216?\3236\010\267\330\224\255?R\3438\377\225\346\251?\317C\226\232w{\253?8\013]\204\207\273\271?\021\211T\256vh\253?\n$\351\031I\"\275?\362\364\364X\315O\255?\276#\036\341\230\213F\277%\313\273}e\304\246?\022\327\265\346\\\304\275?i\351\225\250\232\375\230?\307\243G\230\021\372\253?scu\tY\246w?\271\\~Y:\234\262?\373%\257\274Nd\216\277\242\325\025\250\317R\265?\341\030KV\0328\235?^\221\317\223\201\357\233?+\357\371M\240\t\212?\220Q\362x\307\032\251?K\304\320\364V\000\270?\006\214wE\305?\205?\200\2642\363z\266\247?\205+!\321d\374\240?\356\266\316i]=\251?\020l\030\342\261\317\243?\">Rr\276@o?\267\031<\206\246p\244?\253K\242k\032l\220?\026\264c\377I7\232\277\345B\377\263\317+\255?\030D\331\230-\222\274?\360r<_\346M\246?\365|\034\271\255\256\245?\207\274\3401\016\276\200\277\357Sq\275OP\273?\360\331\024q5\020\263?D/\374\020\266\000\244?\300\002B2\267W\227?7\247FsZs\226\277\203\310\\\370E2\270?/Y)\305\rF\253?\'\232\235\313(d\306\277\213\206\0259\007y\224\277\310\244z\303a\217\240?\276x\336D/\316\240?6\223\300\375\2701\263?E~\266;\217}\266?]\223\323v\312\245L\277\264\021>J\333\256\255?\342\353\226\335\306x\263?\277\303,5\364\257z\277\030\2751<\252%\251?.;\\\\\367\027\260?\247\345D\021\013\342\177?\337\031!\307\314\301\220?\240l\346j\r\240\201?\004\373\003sa\025\271?\004\275|Za\324\203?,\333\214u\237\323\262?\236\237!\2353\002\207?\304\346\360\004S\261\251?\325%\367\374\257A\262?\006\230\231\234Q(\252?\214\203\365\306\343\376\264?\247\341c\311\177\365\240?\364\\S\336\226\341r\277\017d\271|V_\246\277\307Cz\262\344\357\255? D2\344\330z\244?~{\365\366\2111\244?\306\201\030gZ\202\263?\255J\205%\3343\263?$\336\336\216\240\223\212\277a\016\355)Z\265\260?\024\345L\277\266\021\262?V\306\233\tA\037\260?\350\207\360\263\272j\252?Ywp\323FE\225?\360\366X\256B\300\245?pu\366Q\352+\302?\266\300NL?*\233\277\"E ;\310\033\237\277.A\362@\367\364\261?\036\223\336\232\350\261\237?\2359\3735\037\370\236?w\211;\365\200-\253?\r\3634L\254\r\265?\367\303N\377\371\200\177?L:\331\354\231<\235?\277\313\303D\256\024\264?G\244)\337\214\312\243?8\t\250\347\022K`?\220\203\274e!\026\242?\252\007*\265\247|\227?\034\333L41%\261?\020T\334\244\341\225\263?\257l\005\236\222+\265?B\t\034\321\211y\300?(x^\270\340}\301?\361\332\245\r\207\245\263\2777\003\010\221\237\234\243?\n\372\221v1:\244?\312\333\225\206\257i\267?\016\250Z\262\372\210\261?\275\355\334\220S/\273?\210\315\203\230\244b\272?S\331\214\340:\327\265?|=\375?\005\302\256?\312\365:\322\256\374\261?\262\305p\240\200 \226?$\272\331\262\213\210\252?\002U%\217|e\240?"
      }
    }
  }
}
node {
  name: "normalize_element/component_114"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "\025\204\312v\300\240\243?\r\321\220\r~\304j?\275OA\275\2325\264?\357\004\337ZD\031\250?\273\222\361\343\300\017\274?\271\026\322\206h\031\263?\312\346\201\372\\\216\245?\\N\021\371\221\317\275?\204\200G\027EVA\277\201\210j\320\353\335\263?\010x\014n\357C\255?\305\216\274/\013F\250?\357\33187\255\341p?\330\254\261\206\266\\p\277\310\213\330i\234\264\267?\245&\340(\220\021\222?\212]@\007\024\354\261?*n\356E:W\224\277^oh\270k\003\264?\243\'\341\031\237\217\267?\220[\316\3208\007\245?G?\276\335\302U\250?\372<\220\006\001\303\263?7\371\007s\266\336\247?\352\267\223\256\267\322\265?\311\235\377B\202n\261?\367\006\326\246\356 \263?\217\205]\036\257c\237?\215\204\312\2002\224\271?4X}\035T\274\263?\006L\250,\177\310\270?\252\2158\004\221<\262?\325\374\223 \245\327\203?UvC\030\024\r\237?\000\221FQ\334\373\250?\000J\377oE\222\231\277CQ\226\335px\263?\243\365>\365\022\332\262?\001\205\003\354f\260\301?\022z\005\273\304\005\260?\032\357\255\231\223O\235?\244\271\260\226\204\t\277?\304\205{\346^\300x?g\273\017.\207W~?W\225x\236J\226\246?\376\026#f\204$\246?|S!\266\245\"\226?\3350I\346\nO\244?\014\255I\025\227s\252?\345._\352)j\223?\006x\366\210\335\346\231\277\247i\352Q\305H\221?\223\304\215\271=\321\237?\'n.a\341\"\301\277\216\263:P\337\346\200\277?O\316\023y\331\256?\3764oN\205u\250?p\340\311\377\310\032\262?\3618GH\235\263\203?$\364=g.\027\255?\353\314\356\335\247i\300?\t\231\342\254\263\032\260?%\004U\352,\217\243?lO^\236\255\007\264?\037\256\341\221\224\316\247?~!D/,J\243\277\025b\264\342\251\264\266?\235\243\000\344\2234\222?\207\320\253{\020t\263?R\003\313\346\2613\237?\307d\331\342\006\273\234?z\266\327\032\373\246a\277f\235$o\026\265\221?\251\274\035\341\264\340\253?\t@\331\035\035\032x?\262\315\216\240m?\255\277\374_C\252\007\320\275?2\212\200kp \250?_G\351\300\334\350\272?\206\303`k\247G\260\277\337\016\273\214\356br?\232\004`\035vH\261?\306Y\033\247D\271\247?\376\032\222X\'n\240?f\374\017q\362)\270?CQ\267\353Y\233\241?\016g\360\212\357\252\276?\340\237\0353\372\030\244?\327\002\"\224\\\235J?\366\020\300\337\305\201\255?\024\201z\313\206\311\274?\334\322Vd\365\300\237?\213\236\000/\330\262\260?\336\347\261\223\345\027r?\255\037\351s\270\315\261?\322\'u\246)2\211\277\364\274\273\230\335\310\266?F(-\221H1\221?C\224\246v\303\014\234?\307\0370\002o\360\201?NLr\033h\231\247?\016}\313*\331\242\263?M\030\341\256\335\304\214?\002M\257\215\253\243\250?.k\036d\262\350\236?\216~\224\016_\361\252?\371i~*\3360\244?\272\272O\315f\207x\277\320?J\267\350\016\246?\330\325\351\342dR\213?\343\37707O\335\231\277c?\276\226\355\311\254?\330)0F\037\321\270?XY\277\277_\321\240?\232\314\"[0\315\243?,\307O\326\264\372\212\277M]\265\017\322\203\271?\360\351\313\201\007\316\262?\267\356(\306\340\376\240?\016\212t\254CO\227?\270\002\332\273\336\264\241\277\353c\267/\235_\270?\021gnSv\331\257?b\351F\317b&\303\277\367\230\\M\0352\250?i\225\\o\342~\241?a\014\022\306B\271\236?\344\341\2422|\306\267?\301\226\245=(\037\265?sV\377x\223\005r\277\002\020w\365*2\251?\221\262@\031\265\013\263?\253\232\275\277\203\227\203\277\037+\024\303\267\253\253?Z\002\024\026!\344\246?8\336n`\252M\203?C|\251\2356\352\202?>\337\322\016\330\005\216?\236\303\347\024\005\366\271?\032\216\320\227*\215\212?\301\364\220\005Y\n\265?|J\003|\rz\210?\257\2028?`F\251?\374*\366 \317q\261?~\241\301R\317\025\253?\300\0049\353\375\215\262?\243up\212p\216\232?+\226\300\205\363\253|\277K\301C\346\004L\246\277\033\215<CJI\253?h\035g0\314]\245?<\222\213d\2413\243?\260\177\372v\342W\260?\224\034\364\310\306\323\260?\376\352XB\312\221\220\277MG\306\213\001\351\253?\350\365\333bt\374\261?^\025\207\267\367>\257?\205\337 6eb\253?y\336-\223X\207\222?h.\337\026\006\016\244?R\023\202\367\203q\300?h^\016\273\357\030\240\277\236\246\272sm\027\243\277o\r\244?\277\345\260?\227P$\014\301y\226?\004r\027\316&\241\231?V\277\305\317\356\254\254?\245\255\005N\232,\267?\236K>d4l\200?\317\373\362\016_B\207?T\262\035\005\350\364\256?\242\0326\227\t)\242?.\226\364\300_}\210\277\366\334:\346\3318\242?jv\264\334_^\230?\026\217~@\017\321\255?UJ\312;Y\372\260?%p\322\321\375\336\261?.^\335\305\274\r\276?\233\036\247\367s[\277?\364\340\327\020h%\263\277\214\211\363\216X-\241?s*\356\177M\304\241?\322|T\027~\335\265?\272a\350\314\316\206\247?\027\010Vcv\007\273?\346\371C\2332\243\270?!\216\376by\001\265?\360\030oBY\254\260?\020\r~\'\325Z\260?\n?f\327%\371\237?\031H\345`\025\363\255?c\030\357Hn\255\241?"
      }
    }
  }
}
node {
  name: "normalize_element/component_115"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "A\274\336\230\306x\244?Z\223q\003s1\234?\301i\376\356\326_\262?]\03348mm\247?\212\217\010\363B\255\273?\013\026\2114\352\324\260?*\354\014\315!\033\246?*\245\225\262tT\275?\351\241\026\200\317\332\210\277\006\0241\277\257\236\263?\215\223 .\311\231\251?b\000v\250\205\026\250?\274\301E^>\250\227?-\0309d3\"i\277O\013\000\203\024\244\264?5\234\251E\201\224a\277\346\221w\302\326b\261?mQ\250\237\036x\210\277\336G\r$*\377\262?&\273ZmLo\266?\301m\320\0135\022\244?\031K:\305\010\263\253?\277i\234{\177\353\263?\037\237e\035[\275\244?\314m(\240|\206\266?yAXN\301h\257?\215Ad\347&\027\261?|k\026\036\352-\236?\227N\363\247\360\224\275?\366\002D\2457z\262?\272\262ZL\253\242\266?v\352\241\350Gd\260?\263i\247\021\363\337\205?\013\202d\215\274\244\244?]\200\374\363\324\355\245?<\334v\360\377\"\221\277\347*\212\025=\t\263?\201\206\016\354\276\004\262?\363\352&u%\251\302?9\212\312\213\356N\260?l\0241\243Zo\240?\346\035V\241I\256\274?`y\312I\254\265e?\007\r\014?\211\346i\277\037o\013\371\024\276\234?\214`7\372\005\254\241?46 \264\261!\234?W\334,\034\020:\250?\t&\265R3d\251?5\306+i\365p\202?\323\247\333-W\254\244\277\241H\355\001\227 \225?\367\361[j@a\225?\231k\304\330\261-\273\277\257\n%\252\357\260\222\277.Xa5\3010\257?L\347\036mwj\242?\031M\364\0327\014\256?\277\357\230\347\254Bw?\320H\252\rS\375\253?\261\255\336b\367}\300?f\343+\373Z\t\254?\216w0*\365\241\242?\253\305&\200\002\362\264?X\310\371\356\230\262\246?\215\360^\004y\265\242\277\226\340o\334\253T\262?\367\355\017\207\261\364}\277\334f\324\303j\210\263?\265\251\3579\006\035\234?@m\245\356\002\331\234?\024YxR\267\227j\277>\317\021\214\222v\226?\013\337\201U\203\235\251?A\204\350\253\014,\201?\246\257\020\353\307\005\254\277\031%d\367O}\271?\t\3279\214\235~\247?\n\341\025\344\016\353\271?\316\201Cz\032\310\263\277\207w\220\t\276\212\200\277\345||\005\023\306\263?;6\341\342\321[\244?\374n\246\201\240U\202?\247@zK\270^\266?-J\217\372y\300\205?\323\360\327\253b\006\273?\376\275\225\236I\230\220?\210R\231g\307;g?\013\336\227\000\352p\261?\002\343\203\030\224\333\271?D_e`):\243?3\325\306\352\354j\263?<\347\222\235\303$p?\374l\337\001p\374\260?\305g>)\213\251\205\277v\n@C\002\275\267?s\274#\337|Ut?\354\035\032\210\370\226\230?3\333\020A\247\260r?\210\001\020Lu\316\244?\374\2203$YM\254?3:\343\245\342\231\224?u\333\251\254\262^\251?\315\362^}\210\202\231?\341\332\322hG\261\254?\345\266\304d\206\232\244?\223\275\221\270HS\223\277\314gg; \265\247?`\322\277\364[\023\211?\377\260\r+\310\016\233\277e\262\267He\200\253?n_\344\276\005t\266?c\302\206\254\020\204\225?\014\340\206H\350\217\241?g\237\030p\316<\222\277{\2258\3171\320\266?%\217+\036\2549\262?Q\243j\235\263c\233?\235\355UT\222\257\231?Q\205\3634V\036\247\277\312\3738\232#+\270?\250\252\366\007\317\246\260?\223\253\256\374_\231\276\277\211e=\371\027\350\242?\235\320\024\317\023\256\241?\034\375XV\324?\234?M0\350\371\335\270\272?\010\372d\365\251\013\263?\276\241\317\313Q\025\201\277\251K\354\3704\311\242?~u\035\366\267\016\262?\206\010\325Yo\314\211\277i\2761\241\325\013\256?a\251\376\246O)\246?S`\364!\027\270\206?H\032o:\350ce?\357\374\264\347\270n\226?}\307t\021t\356\270?\302\306\241\360l\236\221?\016\356\224/\344\350\265?\300\227\367u6\235\212?\242Y~\205q\334\245?0-s\205:V\260?\312\244\317\014\267\203\254?\307iq\216\206\310\262?,\001\313&\315\332\222?\335\350\274\366gg\202\277\207H%\363\312 \246\277\331\326\245\377\022\334\250?Lr\353.\203C\246?\351\261\322I[\001\242?\03049$\321\245\247?\350SC\362\000\334\257?M\313\301\314t8\225\277C\325\345\035r\366\244?7SV\020Y]\261?\376\226\025\227\236A\256?\205\366O\017\210\022\254?\310\215q\261\341j\220?\020u\330\252Hx\242?<\020\214\225.\003\274?\266\023\004\023\250\223\242\277\277P\270\005\350J\247\277\001\025\037\203;n\257?l\270\375/-\243\234?\036\326D4\364.\224?\343\365Ln\225\331\255?\257K\350\211B&\266?\003\356\317\376m:\201?=\022\253\026C\377}\277\336\213q\366\265\313\244?8\211K\322X\242\237?\241y$Qt\314\233\277U\242\342\273q\253\242?\354\031\374\334T\315\231?\006\2757\206\000\340\254?-\321\354\311\342O\253?ES\333%(\200\256?S`\357h]O\272?oV\306\204m\313\272?A\316\233\215\014\247\262\277\036r\361\277\256\211\235?@\322m\252jY\235?\350\343\375_E+\263?\343-\030\333\3621\243?=\275\221\372d%\273?\005G\200\325\274\243\266?\"\315\246\303\ro\263?\013\010f\262\243\344\261?\003\006\201I\265E\253?\366<\335K\252N\245?\032\014\227\035.\256\255?\274T\014Z\277\316\242?"
      }
    }
  }
}
node {
  name: "normalize_element/component_116"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "\320\356oT\227!\245?\251\265u\337M\221\250?\245\237\371g\311\215\257?6\353z\014\320b\246?A\371\210\206/\215\272?\354\375\246\255\232\262\254?&Z\032A(\304\246?z/8/\300Q\274?\246\3247\306\324\261\232\277k\032\317\370\242c\263?\224\316\030\312\257=\245?\353\321Q\227Wq\247?\242o\354\210,\232\241?\215_R^&\350a\277\016\204\016\001Z\317\260?9\\\t\257\355\205\217\277\022\375w\320.\327\260?\'\255bkb\363t\277/3\377\367\306\341\261?\";<r\016\030\265?g\320\245\277d\321\241?\227&L\350\223\264\254?,\225}x\022\350\263?\240/\360\356^t\242?A,\306\271\200)\267?\252N\021$\022,\252?\007\'\nC\320\020\255?\237\330\262\230\262\265\235?\314\373\261\251\360p\277?\254\224\032\261\201\272\260?U\222QrBy\264?R\"a\226xk\254?\215E\032\257U\217\207?Yk\363\302G\013\251?\350e\271\021\273[\244?\263\'\247\224\334\003b\277(&\363\270=\373\261?\027P\010\032\274\372\260?\250\330\226\326\346\014\303?\235K\302\234\330\367\260?\230\2632r\372\240\242?\332|\204\343\367\213\271?pV&\367\231\205f?\303\003\254P\002m\217\277\2020\340\372\352\211\220?\351\321E$\271\345\231?\362y\002\267\247\021\240?I\305\367\254\010\212\251?\364U\"\353\321\235\250?Z^\233\210\334\336^\277\020\036\306\324\370\255\254\277\210\346\360\377\231\367\230?\000g,\021\335\360\215?\251Z\347\354X\375\266\277?\356X\365\204\350\234\277\272\335\337aY\267\257?\222\211\325\313a\212\227?zR\276Q?0\251?\221\377\212{z\014Y?TC4\035\256\223\252?P\301D0\314\221\271?\202V\261\017\352\326\247?\323\252\264\312\356\367\240??5J\326b\351\263?t\303;5\241\215\245?\210\227\271V\001\022\242\277\256?E\262\240`\254?\337D\326\025\2213\235\277\263\216\3113F\243\263?\000oL\022\365\311\230?\317\231\274\032\003_\235??gm{\004\374o\277\026A\020\336&\365\232?\034ZZ\311k~\244?\r\030JD\375\320\206?Ii\255\235el\252\277\3512\341\tP\342\263?\203<\272\305\207\317\246?\340k\rG\205\241\270?\204j\275\276Z\336\266\277f*_\370\n\320\221\277\366\243\336\334*\313\264?\257=-\353p\007\241?K\334\346j\204\256o\277\313\027\242\255\304h\264?jU\367:<\223\210\277\250\216\246\221\316t\265?3\232\030o\204u\206\277\035\016\"\204\rpu?\013}\272\376\200.\262?\177\243\224E\236z\265?j\273\237\331\311n\246?\317x\033\316\016\316\264?\3116\316x\353\224p?\250=K\256g*\260?\254\'g\346\321\246\201\277~U\240\251\346X\270?iCL)\262Mo\277\357>\340\344+?\224?\255\363\017%\321\000\033?\274\023e\317\233\023\241?\220\tmC\tV\244?\035\322\361\226\200\237\234?8\'\371\210\315\004\252?\353_\326\347\021s\222?6\226\0046T}\256?\026\257\252E\341\006\245?s\333\351\307Y\352\236\277\300\312\004pq\\\251?\207O\206\037\246\301\210?\261C\360P\370\222\236\277\032\374tqXp\252?Mg\333\364]M\264?q\227II\031\265\206?\341\0359\002S.\236?e\312\233\204Q\227\226\277\261w\024!T\255\263?\014\311\236DQ\216\261?v\344\311\347u\301\227?\025e\263F\344\213\233?%z\370\266\211(\254\277w\230\342\351\026\263\267?\345\321\215\260\250\210\261?\345\372\237E\264\362\270\277\031R\207\r\375\260\215?\347\346*\374j%\241?\217s\361ph\265\231?\224\316\035\203i\246\274?BD\375=\227z\260?\211)$\250\000i\212\277\302~\364\362\340\223\225?\237KM\217a\246\260?+\026\020q\253\324\217\277\330n\3724\240>\257?\215p-o\033\001\250?iG\017\033\343\305\211?f\227c\n\272\343k\277\267uN\353\352\031\232?3T\256\270\2048\265?GW\3445\201\262\225?\220\253\216\245\332j\266?\273\0019=\374\360\220?\250\364\210\333\345~\240?\036X\206\0379%\255?,\336\002\350{6\256?o\271\021N\277O\264?\032U\266\252M\345\212?Gl\2049\322\375\202\277\246Kl/\203\340\245\277I+B\332\224e\246?.\025\266\307T\277\246?\357\206\244~-\233\240?\024C\356\371\314\037\234?u\"\354\324\217_\255?\25021\002\317b\232\277\037\33085\254\266\241?/\377V\357\306;\260?^\361\014\316k\342\255?\020HH\370l\212\254?\310\355%\372mi\214?3\2457\324\326%\241?t\036\035p\300[\266?b \203\240\231\343\245\277J?\375A\006\355\254\277\031\227||\332\222\255?i5\207\030m]\213?\022{\335,\242I\215?<@\312dE\310\255?\323t,\245\035m\264?\253%\001\2201|\202?\377i\357\310b\337\235\277\177\006\277\000\007\\\227?qB\254\364\226O\231?\031\346q\t\2412\243\277|\206\332\260R\263\242?\360\247\306K7\211\233?\r\302\024\231D\263\241?\351\220\304`8\266\245?`7\300Z\"\010\254?\327FI\003\320\014\266?\327\207\203\361\304\r\264?\"#&\374\340\351\261\277\331[\273\3165\265\232?\216f\222|\030f\226?\355d\003\370\215\000\261?F\237\323O\337\002\242?H\374\217\356\025M\273?G&\371t\351\235\264?=8wr\210c\261?\030[\323\177\200\374\262?\235\235\341\r6c\244?\350\261+\002\243\230\250?\322\340\320\n\365\274\253?\207W>=I\311\243?"
      }
    }
  }
}
node {
  name: "normalize_element/component_117"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "\020\037\376\270\002\254\245?\2108fq\260K\260?\021\221 \260\000\023\263?Uk@\010\361\026\245?\252 v\016\264n\270?\032\237,)5\203\247?\353\272\023\223\007\207\247?.\027\323G>\001\272?B\267\212\nDk\244\277\t\360nI4\037\263?\3020\303\363\020\225\240?\334\215\364X\351\244\246? \305C\\\\\212\237?\200\252\203\034\221xd\277\277\236\235vr2\251?\000\261m\235\364\310\213\277q$\271\304\335\025\260?\370\316\254\310\217\310l\277\354i6x\'k\261?\2670\330\373\367Z\263?\302\313\275\324\2207\235?\351q\342\",g\250?\265\310i\224\235\232\263?\366\305\236p\210N\250?\002g8\204{\374\267?P\373R\344\265\267\242?\276\303\205\355;G\247?ja\261\256S\252\235?\246\311C\341\336u\275?i\262\n\221\217\272\247?\204\311\025]e\215\263?\355\233\223\310R\254\250?E\362\370j\005U\210?\"j\271k\275j\253?\220\004={\376\031\246?\244o\213_\234\353\210?T\346\360\215D\217\260?|\002\271\250<\330\257?\367\247\020l\265w\302?\211\227\315:\350\264\262?\221\372\023\336\343!\245?\332~U\325\2336\270?\341P\033|1\371~?q\307u5t\021\235\277\226D\373\372On\213?\020\221\266\313`\207\241?<B\264\363\211~\221?\222;\256>\005]\244?\240\'\211\030\273\354\247?5\245\212\034\001`\211\277u4\336\273\245\323\261\277\333\320q\216js\234?\027\220I\210\352\224\200\277IX\344o,<\272\277\257\024\215\253M@\240\277\327^/@\347]\260?\373Pl|[\355\203?}3\343\315\027\004\247?>k\271^\223h[\277\267\027\214\242\353\350\250?\225\340\276\"\200\032\251?Wd\331k\370\030\245?p\340\357\306k&\235?d\3275\333\216\t\251?\035O\\r\002\361\244?\342\231\247\245\177j\241\277M\024\361;%\236\251?\320\345G\250\213\247\243\277\222\345}L\006\250\263?\213D\357\364M\021\225?\341\0172\325;\370\235?\243k\010\211\022\377p\277\"\260\201\223\276\'\240?\0252\0160\036\236\245?\201\222\002\013`\312\214?\200p\003\023\277/\251\277j3\007n\3102\260?g\007Hs\345e\246?\300\363]\332\010\365\266?\n\310\217\337x\312\270\277\302s\376\014\300\035\222\277\275\214\210\200H\341\262?\310\235tP\371?\236?\267\267j\2750\260v?\362\336\014\217\341W\262?\356\216\231\377\350\177\233\277\326\355\005\311\257\335\262?\036\252\233\036#\277\244\277\273\'Q\'\207\354\177?XmW\030\275{\257?\202\205$\227%X\260?\355\264\252/\217X\251?\233\313\354wQ\211\263?\005\300\013j\336\302q?\326<\024\363\026\211\256?6\254t::\365s\277\2451\030+\203\315\270?\032M\262\376d\306z\277\371OK4\307@\222?\361\036\235C\344\267r\277\000\267\306\036\334\310\231?\2165&;k\364\244?&\233\311<\224\226\242?\223\242\201\227\232\266\252?\203\333\257B\227^\205?~\310\031\222\254&\260?\332\245}\333bj\245?\250C\251\350\010\023\242\277B\313\326\324[\376\252?\277|\342\233\316\227\210?\255E{$t\203\242\277`\2107\223\270\214\252?`\\\2236\241\205\260?\035\232\373\251\306Ry?\354K\231H\'\032\231?\374\312\336\255\207\212\232\277\263\223.\356 \245\260?\001zmxr4\261?Kl X\263\240\232?w\275\350\266:\274\234?\270\024ZM\014\006\261\277[Q\231N*\033\267?9\014\203\205\325P\262?`)V\003Pi\271\277V\214~**\277\201?\262w\232Z#s\241?\274t\022\230\356x\226?v\251\346y=F\301?,\035q\235\206u\253?4\213\"4\032\252\222\277\344\262A\216\374\255l?\t\261\024x\020\003\256?\321\217:\305\240\317\222\277\026i\342\035\340I\256?\023/\361u\211R\251?\276Saii9\213?\323JzH\223\263\201\277xo\276qO\340\224?\344w!\275\253\225\254?P\212\235\303\221\024\230?Iz\263.\267y\271?dvg\004S\201\230?\245I)\350\366\222\245?\303n=\342\016\326\247?\005\377\320\326\005\337\257?\232\376\352F_\016\227?\230\237\007\266\3130\212??g\230\373`\360{\277M\206\227k\307\220\245\277\272\227\316c\241\221\243?\204\202\243\373q\257\245?\307[o\032)\373\235?\034\365E\177\276\346\212?\347\375\245c\323\354\253?w)\207\254\364.\236\277\251\344\"\022\023A\247?=v\323\n,\260\255?\260\003\034\177\370\262\256?\002\0143\203\344\334\254?\277\261\346NP\215\206?\271\354\233\3619T\240?\2325\004\t\202\256\260?\256\t\227\305,\312\252\277\273\273\221#\344V\262\277\322G\234\362A\377\254?\'\345\341Iz4\207?\020\000\226A\'\027\202?\337P\247%\036\234\253?\2273\246#*\033\266?)\201(\363\352w\204?\277VN\352\347\'\254\277-\223?\352?\003\203?W\373\333hw}\221?\003\003\207\2364\327\242\277\240\234)\363\335M\242?Z\363\307\332\375/\235?+\357@#,\270\232?\360==e\036\301\243?\036\362xU\305&\232?n\352\307\034\207\236\261?\204\326\325zE\013\253?\300\202\340cC\306\260\277\013p\327\321\214\323\233?G^\020p\214\215\216?\206q\002\226\006E\261?\356\346y\325\242\274\240?_\302\364\377\2422\273?\244\210\261\361\005\322\262?R\205yn%d\256?\014\003\301\334!\327\263?\2330\362\226\321\346\231?\256=\325\351\214d\247?=\274\366\353\237\276\254?\331\234\372u\344\236\244?"
      }
    }
  }
}
node {
  name: "normalize_element/component_118"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: " \005\202\022\374\365\245?+4E\2756T\263?\353\201\310\265\260\215\253?r\303\330\n\346$\244?o2m\251\312\221\265?!~B\231\355\332\242?A\253\037\335\000\032\250?w\221#L:\022\267?\372\325\354\346\201F\253\2772\340>\010\207\262\262?\3152\276A\021\021\230?\334A\032\205\214\226\245?\016\014\237\373\022\364\220?\274\034\033&\277\352m\277\345?\363%\223\324\240?\263/\367\316\n:A\277F\2305\300\353\204\256?\365#s\234Chx\277-\014\233EKE\261?\321/\005\374\376s\261?\014\321\344\014\014\363\224?\332#\336~\034t\237?-}\355;\264\377\262?\234G\036\270e\350\256?e`\376\271Q\254\270?0\235d\030hX\225?8b\363\222{\221\241?U\037\316\027\t\332\235?\250k\336R}\320\270?\037\022\005\315\303\026\236?]\213\237\221\313\251\263?W\007\243\006\221\024\245?q\013\337\300\271\306\210?\355\013U\"jQ\254?\352\312\346\370\010\377\251?#\312\235\355_\306\231?V\356\216W\343\026\256?\225\313\237\237D\254\255?\225\\VE\336\020\301?\316\245%G\033\366\264?\346\'\337\260\220`\247?Hj\234\253\270\201\266?\034c}\274\275\217\216?r\361\272\365\317\020\245\277\242n|\372\303\'\221?\261\214Yk2\'\247?\322\036\350\3167\225Q?C\202G\363~\336\227?]]\350&>2\247?\235\222\360\340\316U\226\277\303\313\260\252\216\267\264\277\021\'\353\310uy\237?\"\355\024\345\261\352\222\277h7\225m)%\301\277\032\347\324m\007%\240\277b\262\254\214*\351\260?\324)\362\230?\256f\2773b\001t\341\005\247?\317\371=r\352Qp\277\302\3220\344\'\301\246?\034\234\331\305l}\200?\240\375,\274\351\233\243?\271\314\266\301\363\314\227?,\022\224T\006\013\214?\254w\200s\273\241\244?\021\206vX%\264\240\277B\332\326\2019\233\252?\036{\370]\321\340\243\277\013\370\346K0\233\263?\365Yc\245\211D\221?\330\346\231s\375v\236?\312p\377;\351\027q\277xM\037\354\332\377\242?6]\363\003\207\262\254?\254\373%\264u\010\221?\"\0136MVG\250\2772lq\346\207\254\253?-\250\351_\004 \246?\226\204g\351\332\374\264?\373\005\273a\333\242\271\277\221ecS\036E\210\277$\245\272/P\032\256?\216\300\006\341]p\234?\255\'\234\330\241l\236?u=d\331\262M\260?N\374N\034\013\315\241\277D\037\316\361A\267\261?\326~\211}\244\266\261\277\316\375B\200\355\017\205?\215\264\226\372`\266\246?v\034\266b\274<\246?\371\323\023\204\225\204\253?\325\006\'\242_[\260?\362H\313g\312es?\343\344\203@\\\251\254?\213\002a\315\037\330S\277@\023,\321\003\346\270?I\374WD\267\330q\277\327\245*\22380\221?\341\326Y\0041\226\202\277q\003\"\352\\V\221?\350\023\225\347\243\207\253?WJ\030\313\311\313\246?\260\372QD\3568\253?\004\245\301\235\246\367f?\215\242A\351\217\331\260?[\3452\003\317\234\245?$bp\353sW\242\277\356\t\216\2429x\254?\201v\3110\325i\210?\274`\r\243b\224\246\277/\316\221\365\3212\253?\211\225PH\3228\250?\221\324\361\201\345Tw?UD\200\345\2364\224?\341\246l|\031\321\235\277\346\323\247x\003\234\253?\t\034P\td\003\261?\370#\366\035\204\377\240?\363\344j\311\202@\235?,\327\217\330\344\254\263\277-\010nozA\266?|X\235\014\366\365\262?\032]\001,\302\262\275\277\014/\206G\"\001\205?-)?\365\204/\242?\271\253\032.\271$\223?\311\337\312\315\310D\303?SJ\332\035\352(\246?\326\224\345\235\243\213\230\277\347\331\366\207w\312\214\277\357x`\356\375\207\252?\373E\265\372}\016\226\277\217n\226(\001\205\253?\224\261\305auS\254?\\\364\023\243\356\320\212?\333\213\216\002Iz\212\277\3048\311\240$n\203?T\2116\3608\177\226?M[\301\016\032\374\230?\243\003\336>\265\276\273?\036\257\010JF\330\240?\257|u\331\330\272\226?RQU\236\311\311\241?p\333\371\251\352\230\260?\004R\273\217>\016\254?\274/\260\214\342\\\220?,\266\356\213\360\233g\277X\333\332\343\001<\245\277v\347\024\332\365\257\240?NK7\177\317\354\244?\313\222E\t\026a\232?}\"\010\275\"\353e?\374\261\360\305|\030\253?<.\010\267E1\240\277\346\244b)\263=\261?r\025\303\211s\312\252?[l\021SM\t\260?\244B&-\035\362\254??\331*G\034@\200?\252\222\245/\264\325\237?`R\223\030\270\307\246?\366$Z9N\346\257\277\257\264\003\343\035\266\266\277$>8\036\272@\255?C\205d\255\023*\177?\2478l-\\\356m?\247\037\244\014\364\007\250?\240\333A\250/\244\263?\252\034\2378\234\323\206?\025\215\030\352n\246\264\277\002\017\312\003\252\342j?;n\322\026\322?\203?\256\334\226\276\223\363\234\277\275\376p\314\274\231\241?\026\305\345W\367\270\236?{\372=\356\261\255\222?5\027\272=\001G\244?+\"\026s\010\003t?s\207Md\346\002\253?\304\274\224\250\201`Z?\016\260\240z\265\355\256\277\314\260Gd\374T\237?\301\316\311b\315\216\201?S\3511\016Q,\263?r\237O\366,\216\240?\0304\035\317\241\353\272?\217\211\224f\3638\261?\\7J\003\344\360\251?\2174\377\202\271j\264?h\031e\332WN\205?FU\244\246\203\023\243?\231\240\375}\003\351\256?w\307\035\307\363?\245?"
      }
    }
  }
}
node {
  name: "normalize_element/component_119"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "\314\255\260\3436O\271?\321&\226zgk\321?\247L\004\206\271\030\271?n\3313\341\035\264\301?\213s\336C\345\206\275?s\234\212=|\345\277?\027\340\377\352\030\'\261?Pu\327\370\235\275\304?y\257\200`\223\367\325?]\347\247\204\234\001\276?\363=\007\274\352\206\271?\376\201\201\006\354\201\310?\271:5\324~\344\311?\211\0373\265De\275?\\\274\260\031\006\312\310?\252k,\342\355\201\320?\321\367\016\017E\247\277?\246Q>\3007&\306?1\342\242]\374\242\277?\237\302j\\\232\003\304?\355+\351\n\261X\271?\306\205\233=\344\356\266?\263]K\017\335\210\301?\035\234\205\306\336N\262?\315\013\243eL]\271?\375\375\362a\247\354\262?\36689g7\277\273?\357\357\035I\n\253\267?_OP\227\200p\260?\355\2276\271k\013\301?\\\200#r\333m\257?\222K\220\3173\017\277?}s\376t\243\022\271?\321m\323\351\212#\310?G:z1\321\266\301?T>\t\016]\200\301?\000%\\\315\334q\266?\367\243\362\300\021n\267?\367\212\200\240b0\301?`\024\007G\376\035\277?\215\241Hi\311\362\310?g0\205\210M\204\304?\223kL\200H\234\307?\204n\272[\025\205\261?;q\016\336$t\271?\344u\377\203\010\353\300?\003\237\2528\221=\270?\275\216\366G1#\263?V|\362\231\264u\261?\315\221-|\221\221\277?UB\274\035\375\211\325?W\016\222\335\203\022\317?`\364\240\226\242\371\320?\244@\275\036\356\270\327?b\3020\254W\233\276?\037\205\026\322\024\223\264?\257\321\036\241\371+\266?\341-]\257S&\240?%\306\220n\024\361\276?\350 \025\352\334y\262?i\222\033\357\325a\301?l\374E\255\211u\311?2U\211\342\360j\303?6O\250\271r\374\273?\\4\350t\356\260\307?\320QI\310\000\203\260?\366q\203\215*\004\303?\252\350\036\370i\263\305?u\333\244\363\3705\305?&\224\002.o^\302?\215\231\322g\370\360\300?S^|\350\272\244\300?6V\305\310P}\325?\007\024kj9\315\303?\347\204\032\317\261\315\254?|ZH7\367\024\324?$;Z\310h\214\277?\363dU\211T\006\300?\275\222\036eH>\273?V\215\0319\357\205\325?F\202\200\347\244\030\311?[\267q&\316\023\304?5\375\225r\027\221\312?~a\205\235Z\344\300?S\336\323D\273d\301?\234\246\377G\316\213\310?i\251\037H\234\035\267?\023\247\213\373,\242\310?\314&-M+4\277?\254\335]\004\031\343\335?\354\302\315\261\325\250\323?\347\372\023\234\307\217\307?\177T\0368\302}\316?\235\306`?p\007\302?\361\304\312m\235-\270?e\017\274s\213m\276?\356\240\351W\000t\226?\327\340\032+s\213\320?N\026kv\254k\320?\265\224z\266\021F\310?)\346g\275\364\203\314?\305\325\010\312[\230\261?h\267\361\202\343M\310?\267?p\305`\246\260?\3065M\276*\356\307?\205x\267\301o\024\273?h\344\276\230\327X\274?\214\304\265\356\247\205\330?\343\252\221\341\241\275\264?=\373{= \317\271?-h\025\216\004@\314?\220\346(=\\}\300?\340c\362\376&\261\270?b:\034y\372*\316?\200l\030Y\300\361\274?\242.J\267\302\307\265?\031\203\216#\304\277\304?\313l\021\312[k\301?\207\224\377\306\'\257\303?\2005\377\226\235\021\311?\307\334\231/M\026\314?\255\257\205\213\242(\272??\247~\260\034\271\256?\0236\260\023f3\326?\r\217\300\311}\305\273?\215a\334z>d\274?\205{:^Nw\301?\367\037\345\234\342\265\304?\355\221!U\201\313\275?K\256\021\252\234\002\314?\023q\003\326[\027\275?\271\320\336\336\nh\274?\222\371\330AK\365\267?oW1Z\034\225\300?+\354\210\224}\217\302?\242R\006\275 \352\315?{\376\024\304\311\310\200?O\025\000\241\375\341\276?\355!\310\336\336\327\332?\372,\324<u\034\276?\361\364JY\206\370\303?\357!\232\246\363\324\305?\214\031\215\356\263\031\307?H\215\035\025~w\315?}\246k\341\n\214\272?\257\212\344\351d\302\263?fk\255\312\346\363\256?%\265d\026 \330\306?.\r\3647>f\302?\004\301\256\351\353\000\312?\177\252\021\307\250U\266?\327p\rC\026o\303?\272EBV\025l\317?N\324D2\363\003\276? \373\235IB\262\310?y\367\353AM\334\331?f\361\266`\026\213\303?\352\031\210\206A\260\302?VI\265fc\331\270?7\001\315\272[f\304?\246\376\254\277F\016\255?\366\2463A\036\013\276?\237I:\201\353\365\316?\343\226\003\373\267\204\322?\221\016\031\323o\306\301?\272\035c\354Y\027\273?\253\203\223\237\032\320\275?5\252\217d\257\247\273?\345\244\220a\236\240\302?\370w\026\272\233\362\271?j\247 \036\r0\327?\360\202\007T\237\356\334?\322`\016\023\361|\270?OAA\323Y@\305?\345{\256\005\251\323\263?\223:,\315\340\001\314?1K\274\265\254\270\317?\266\007\335\002bB\306?\024*! \253P\276?[\026N\375|\216\273?\240\362k\310\230\353\237?\327\034\t\374-6\327?\227\334\017\0256\305\273?&\300\350\246X+\314?l\312H\317\212.\271?\214\252\277[\251r\314?~\354\034m\226\367\302??\312\275\375\017\351\260?\354\337\033aVJ\267?\360\326Po\350[\256?~O\0247ZM\270?\276{\003p\0141\310?t{\002\216(`\267?4Fo\341\016\216\313?"
      }
    }
  }
}
node {
  name: "normalize_element/component_120"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "\301\335\207\363\330\345\244?\2167\255\237\364\301\266?R\226\366\r\031}\253?\276\265\317\007$\221\242?\227<;ldO\262?\021\r\t\032^\t\235?B\201\341\326\211=\250?\332\337\312\363\217\'\264?1\312\376<\267\027\261\277I~\023\366,\t\262?\311\210\362\242\002i\217?\363\302\211\'<\032\244?!\264\232\205\250\210d\277n\037R\t\330\331s\277Y=<X\272\023\222?\307(\273\3305\323\221?q\3648\331\364\n\255?\201_\305\327\016\256\203\277\001\234\237a\270\332\260?\360\030\036\373Y,\257?\251\217\324\003e\241\205?\206\244\370\363\3132\232?\274\315\004\213\017(\262?\313sYY\226@\252?g\006\335\2356\334\270?\355$v\373\031\317y?7=A\305\3456\231?O\313\017\\\345\t\236?\236G\336\234\276\334\262?sVq\316{\250\242?,\001\332Q\372\024\264?\255\026\342\325\225v\240?d\002\021\361\365\006\212?m\375\006\203\361\'\254?\205N\235\201p\211\256?e\307\377J\322(\243?:\335r(U8\253?\260\331\277\"\'b\253?\023\221\"\261+M\276?\277/\337\016\225\305\266?\353\r\214\366W\023\251?\001]\202\363\254\033\261?\207M\321\2021\321\227?\237\271m0\353\375\252\277\211$\342\3749D\225?\213$wa6\304\240?\0070\256\2667\377\204?\313\017\236\001\334\311\203?\005\016z\314\306\236\246?\232\257\026\310\201\221\236\277\236\215\241\013\0061\267\277 \253\373\312\372\002\241?w\244\263\371\243\233\223?\377\241\233(\002\217\305\277\241\002b=\256@\240\277\222\225\321[K\347\260?\371^q\250Gi\216\277j\001\206W%\240\247?\202\026\250K\0321x\277\311\311,\221\367\351\243?t\322hc\006\331\223?Zw\313\214\271\226\242?\3434j\334\240\230\222?\\Ap\350o:P?\322(\234^\333;\244?j\026\216>\353\274\237\277\240\026N\225\231\031\254?MG\240\304^]\241\277\200q\326\313\342\212\263?*\344\214Y\335\207\213?_\034\023d/\324\236?\206\352\203\270\264\022q\277\364\037\305E]\207\245?_\231\376\277\306\002\212\277r\177\0368\241\357\222?\303<\335\331Tf\247\277\355\222R\177\246&\250?T\021\372\333\226\257\245?\n\237\316\221l\340\262?\336\214\206\313\253l\272\277y}bt\253\255q\2779K.\236\370l\245?\315J\266a\344\312\232?\215k(\'m\271\255?\247\357:\275\200\316\254?E\0307\0343\334\243\277N\360\243\323 \360\256?bL C\314G\270\277\206q-\026c\271\211?&V*\316o\235\231?\010\311?\211\210\310\230?\303p\246\360=\257\254?\177\355c|\315\257\250?\236\222\205E\313\325u?a\375-n\224\326\252?\023\203\360\003\270\2422\277a\"\205\202\267_\270?\252Nq\226>\346F?\374\224\247\317\265\377\216?\342\264\020\177u\236\212\277\006Ew9\272\204\202?\344\313\355Y5\332\261?1\217*\372\253\026\253?m\210.\376oR\253?>\332w\306p\325r\277\371\306J\253\245)\261?\037:#\233\302\202\245?\242\347\247\034\271\214\241\277\265>\347\231W\250\255?\356\\\253L\027\263\210?\031f$\037\024\304\252\277%`\256$\375\346\253?v8\272Jw\327\240?\303z\253\307\340\325\200?\253K+]x`\217?\267\234Z\234\202\023\240\277(F\371\366l%\246?;-m\250\200J\260?\202\374\014r\216o\245?\235\037\315\370\301p\235?\222q\'9\251-\265\277\205?G\324\331\003\265?\314`@\272\316B\263?\035\355{~_v\300\277\016\271\235\246dsT\277\245\353\323;&\234\242?(\337\205\020\004\206\220?_\230\373\315\214J\273?\376jx\364k]\241?\241\331J\357\350m\236\277P\327JP\022\376\236\277\211\204\017U\223\010\247??V\210\370\233\021\232\277B=\304\331\211\237\247?\337\255\250\230\265\332\210?\213\353E\330\343\312\214?UAL\217\224\227\220\277j\034\2331\215\245f\277\324\321\324_m\224\212\277\333D\n\276\2313\231?xK\024O\255\246\267?\322\356/9\360\225\245?\371\267fS\367\306\225?\345\373\332\341L\237\227?\244{\364\213\264\002\261?\211\3550\036\214u\241?\2269\375\243\346\340\224?\027\271\315r\336\241V?m\000\\\347\344\347\244\277x\000^{ss\234?\027\017;\310\3653\243?\343\215\374\\\225\215\226?\244\370\354\021N1}\277\234\032\000[r\235\253?=\332h\233C\233\241\2778tC\353\222\205\267?l\211>\032\254\n\250?\317\253\026\345\215\244\260?\232z\274\024G\263\254?\000\004\014\310\347\340t?\'n\010\232>W\237?D\346\241!\251\246\232?A\211\016\002\244\026\262\277\317\306\325\276<A\273\277\2602\331\223N\221\255?+/\207J\024;q?Ipq\364\373uL\277\246\245W\242j\366\243?\332\014&\264\233\317\253?x\200\367\363E\371\210?\252\233\310\"\006g\272\277F\314\371\035\033es?\226\241\243\265\237\025c?aA\336\316e:\221\277\216?\347\364\020\033\235?\273\004h\332L%\240?\322o\260N\315\231\226?\330<\300\363\210Z\245?U\023\356\334N7\253?XH\257\274\232\362\243?\300\266FPq&\224\277\325\3305\214H5\254\277\010\315\377\302*\222\241?m\216dpCuk?\333\000\350\007\340,\265?\265\326\323\353o9\243?]\245\232\335\203\245\272?\243L\375\313\324u\257?\343\274\026,\211w\245?Q\\X\256\354\277\264?\n\270\037\2442\273r\277\271\221\177T-c\233?\215\361\037\332\340\247\232?\2269\031\371\025\233\245?"
      }
    }
  }
}
node {
  name: "normalize_element/component_121"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "\026\025A\001\263\371\243?)\364\314[\r:\271?\n\005\261\333\203\352\251?\247\364N0\\P\240?\334\016\267\212\230\356\255?\020\254\010\t\341i\235?\001\313\230\"\303\241\247?\010\227\036\345\021\360\262?\204l\337\367\375\210\264\277\r(\212F-\003\261?\313\026]\237\270j\202?\371Y\343n;-\242?F3\276K\203\204\223\277\267IzU\275\265y\277#\n\315x\322\367w?\"\034\336l\246T\241?\306S\035\337\317\n\254?R\024\333\351v\022\213\277#\206d\2330n\257?C4\030\365\331\231\254?\203\032\3700\377\021+\277F\177\366\220\341\222\232?\324\0064\314a\333\260?\020;S\350\274\306\241?6/\223P\026\030\270?;QT.;aE\277e<\022{\335,\222?\314\'0?el\236?\356\275\317#\014$\254?\010\017\320\006+\021\252?\227\337\"]W?\264?\360G^\221\360\241\230?\013n\374muW\213?\377\301\314\346\215m\255?\016\t\022\355\300\277\260?\301\362i\023\374v\247?(,\301G\234\314\251?B\2421\334~\316\250?NA\334\247s\335\271?q\266j\353h\233\266?5<|\355\'\320\250?\177\003\220c\266\'\244?\364\243Ix.\313\232?\354\232\230Ga\213\257\277[\237(\277\373\231\232?\202\262\000\330F]\213?j{+z\366H\234?9\023\233\333\371\210\\?\026\"\376f\004I\245?y\327\374\237\223C\242\277 \255\212\240\314\347\270\277\375\352D^\343\356\241?\350\"7#\200$\266?\262:I%\002\366\310\277\\z\272\016c?\241\277\317\275\221\275\001\215\260?\024L\324\211\006T\230\277\347\315\270\333\273\'\250?wc\312R\256\232~\277\263\220l\355\376*\240?\201<\254Q\276\211\253?F\200\274\037\003\356\241?\230\2273C\371n\216?yGw$\037:k?\260\347.3\263i\243?w\221eh\014\330\235\277\332\230\263K\017\233\254?}\372\370\031Q\271\233\277\375\031\253\273\034p\263?\372\233\270k\365\024\206?h\017\310\346)\371\236?\313-x\224\364wq\277PGt\215\236t\247?j\243\310\307\337\327\253?\311\020\341\016\275\215\223?p\216\373\325j\257\246\277\210\034\317%$\353\244?\244\202\210\2514/\245?\210\250\272.\231\266\260?\345\357q\2654\010\273\277\315cNI6TE?\030\023!\311:\211\235?0\334\0171\213t\230?\256\365EB[N\264?\256n\314\035\303\204\251?\205Dm*qn\244\277\275%}}T\223\251?\206D\370\034\372\234\274\277\225\276\037\235\013:\215?My\024\261\377o\201?\320\000\213\272\336O\204?63\334{\026V\254?\307\262\373\266\251\177\241?\2614 \3350Sx?h/\262\317)\351\250?\026\322\351\222\324\266_\277\276x]\304\031\361\266? \211Ha\237\177y?2\000\214\033B\213\210?\320\221n\341\377\342\217\277\025\226J\010\356\361f?Y\031%\231\351\037\265?~X]\361N\352\255?}\242\374\356g\302\252?\374\324\377\331Yk\205\277\325\234\216\220\031\331\260?*U\242\354-\345\244?m\211R\376\222\255\241\277\214\367\307\241\234m\256?U`8?\024\270\210?\351*3^ ,\256\277\016jM`+\202\252?\215\2076\201\233%\226?{\343\302\206I\346\210?\232(0\007\273\r\210?\374\035}\330z\242\240\277C\036\027\216M\026\241?\305\205\013\222\241\327\256?l\230\200\343[\355\250?\342\263\r\215;f\235?37r\354\277\037\265\277\206\341Dp3G\263?\"w*C\311\"\263?\274[\034?\233o\301\277\257v\252\002\t\030\206\277\016\n\345\245\344\232\242?\r\252T#\320m\215?&[\227\371\222\266\262?y\246\026\230\265\027\234?\334\177{\326\351\313\241\277G\233\304\317hs\245\277U_L\351O\321\243?T\270/\261CF\237\277\376\3519\373`\237\243?\010 \367\245eA\261?YNB\351\013!\221?^\\\311\337\324?\222\277<\325Y\341!\202\211\277\236\034\003\207W_\244\277\027\374\361\357\027\331\230?\362\303,\247I\230\261?\235F\304\016\017\323\246?`s\200\363\361\357\224?\\\231K\005p\016\220?\220=\304\004\n\374\260?\355\312}^09\231?n\010\266\223\206\357\230?^\325.\255S\323h?wS\004\027\257\242\244\277\217A\226!h\256\230?T\262\272\332,\214\241?\236\352j\324>{\222?\215\360\252\222\276\314\214\277X\270\226\335T#\253?\tB\216\272\221\n\241\277\037\276\271\260O/\274?d\2666\035\231\370\245?7\r\347\240\237\267\260?\035\377\271\363\272\001\254?\310\017\305\177\342Ip?\265\t\317\002\357\017\240?\301\350\374X\344~\207?\246\3405W\351\310\262\277*\201gW.\017\277\277\331v\177a\236:\255?\003\316\277N\313\276T?%\211\002\326\332\226q\277\216/\225\017%\200\240?\356~\330|\243\360\253\277\036m\027\370\\6\212?\237[d\022`\036\275\277=\320\337\213\374\350n?[\324R9 \033^\277\255s\263\017\027X~\277J\373&\032\222\375\227?u\244\220\352\217\276\240?\366|[\035\361E\224?\337\321\345\036)Z\245?\241yk&\000{t\277#\233{\255#\305\234?\204(vl\270S\232\277\315\375Tc\251\370\252\277\177\315\244\023*\264\242?\n\307J\372\265\032\224>\256\033r\020\315l\266?vd\373|\323u\246?%\'\217~fV\272?\264,]\226\266\205\254?\206b\220\223@\205\241?\2234\240ZTv\264?h\311\336\260?\031\223\277\364\334\245\201\335\270\222?\311\261\270\251\310\273\213\277#4\267\177\273\245\245?"
      }
    }
  }
}
node {
  name: "normalize_element/component_122"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "#\212\255\3060,\246?4\316F\261S\341\270?ZS\247\243\346\"\250?\032\034\030\205\314\261\243?G=(N\014\316\247?m\216H\033\024\273\246?\226\350\200\262\226\363\245?8\241\311+\373\241\264?](\313\326\033\261\267\277\217+\027\362T\374\256?\010,?\304\224\265v?\366LC\025}\214\237?\t^\241\315y\337\231\277l?[\377\2252\200\277\320\224\264\032\306h3\277\250\210\357\236\345t\245?\371\342bwG\347\253?)w\007\307\030\227\217\277\n\305omU\320\252?\340\000+ny8\254?\227\240m\322\300\321\206\277\324\317\330\355l\365\232?\331\223\334;L\366\255?\235\273\346 \253\005\241?\227`\314\361e\375\265?\277y\237\032\227\300y?;\351\226\200\014\333\216?\344\370\307\231+%\237?\274W\231h\021\003\252?\214@s\330\250G\250?<\373P\275\303\332\263?\321`7\222\"7\225?H:hN\025\216\213?\027\177\212\314$6\261?^\212\277\256\245N\260?q_ k\272\\\250?p\271\302\007\353\t\253?R\021\213>=\273\245?\n\022\272\317\032Q\265?WU\251\205\004\237\264?\343\304\013\255D\\\245?7\006#J\t.\240?\321\377\027t\347.\222?\230\r\017\272\264\374\260\277s\275w\030\266\r\240?QA\205\360V\000\211?\020h\365}T\235\233?\256VDR\255\263Q?q!,\266\213a\242?%\365\347\240 \270\243\277\026^m\270\324\260\271\277\216\232w\3500i\242?\305/6Y\025t\266?\313Hg\247\271\361\311\277\230\350EP\251\320\243\277\275\343\247\200\232\253\260?\232E\346\231\260`\231\2775\311/\206\351\260\247?\240B\2319i\211\201\277\336\003\225m\267\217\226?C\244\377\025\224\312\262?N\254\005V\013u\241?\222B&\007VO\216?8.*|\222H6\277\300\334\245\017\210\320\241?\224\351eNv\267\233\277r-\222*\025J\252?c\r8\307\220\316\226\277\201p\240\350\003G\263?\351\333)\355r\351\202?*\325\364\217t\274\236?\202K\014q\310\340r\277s\221\255\364\373z\250?K\177\035\242K\344\241?\366\036\250\377\036O\222?\327\354A;\271<\246\277\202\307\221\260jn\237?8\3374\357\313\250\244?\020G$\370I/\255?D4\304\365Kk\271\277\n\001=0\'8Z\277e\214\310\335\013\277\232?\264\277\266\365\010r\224?\222\330bu\263\330\264?\031J\346\213\317\372\246?Hp\300:\320;\244\277\320G\002\325\213\026\245?\261dz\001wR\275\277\240\307]\301\214\342\216?\330\377E?6\243h?GN)&\244rq?\346\030w >\362\251?\324\253fu)\260\233?\243Tl\023\301\024z?\235 \361\370\344\313\246?rO\340h\212\252v\277\363\214\013t\336`\264?\323`\253\3505\224\203?\273\373\201J\023\361y?\361zz\266X\233\220\277X}\016)\2179B\277\273\361\322s)\263\265?\377GH\322\245\347\255?\254_to\001E\251?\204\213^\013O\357\213\277\357kM\210\363O\257?\001p\271\350\316\215\243?\310c\207\252\370\274\244\277\263\321\246\333\363\253\256?-\\D~w\327\207?m\210n\031\027\336\257\277\3753\377\277\034\003\245?\206m\223\243c{\213?;\2600\005\352\033\220?\025H\036\302\327[\203?@\263L\010\033s\240\277[\346:\256\302=\231? =\013c\207\010\257?\033\251\250\016z\265\251?]C>\"\2056\235?\nR8\241a\310\263\277\240K\323\3100\354\260?\315\024\252\003o\264\262?\211\207]\377\241\245\302\277\360b9\300\316x;?\250\300\333\031,\360\241?,xK\036\301 \214?\231\n)\363\032\261\260?\271\373\325I\241\037\232?I\352\232Oq\252\243\277\013\260\234x_y\247\277\333*\002H\3377\241?H\200\303\331\347\020\243\277\230\302l\312al\240?=/\00387R\222?\267\007rg^\302\210?c:\235\371\017\310\221\2773\373\237p4O\217\2774<\002\'\367\025\251\277\033\272\336\330\341\037\230?P[\365I\206\315\260?>W\373>\2232\241?\014\301\220&\365\235\221?\305\270\362\3049\013\221?\007u,\027sU\260?\n*\354\232w9\226?\331\r\013P{\223\232?\032l;\204)~G\277Q\235\3778\020{\244\277PG\026\034\235t\226?\2350f\355\344C\240?Sv\312\010GG\214?H},Y\"\013\221\277\313}3\260\334r\245?\225\274\031\271\227\311\230\277\324\226G\362\355\301\274?\376[\006\362\245\035\245?\340\t2\014\234\217\257?\202P\014\000\275\277\252?\205\364\346\000Y9x?\226\273\355G,W\241?1\216s\226\267\365c?.S\366\n\311\321\260\277\312\275\315\326R\244\300\277\024:O?\037\232\253?rA\tu\211\321 ?\220\365\305\277~qy\277\030\264Nd\377\237\235?\351\032\034\333!\264\253\277t\'\376F@\'\212?\004,\267\211\232\265\272\277\346\361\273\266\245xv?\\S;\343\275Z\365>\320\276\236!\257\026v\277H\032y\254[5\241?ol\260O\204\375\240?\033\r\205t\035O\222\277m\243\302W\302z\242?9;3p)\257y? \274\260\024M\220\226?\247\226\003\366\376*\223\277\253\242\354\353\310\252\254\277gO\0338\024\374\241?\033\016*\365U\207F\277\316*\217\025\314\375\265?\024\270\240\267\253i\247??\025\2614b\371\271?(\352\263\240\203p\251?\350\225\246\231\322 \235?i\356\036)\355P\263?\321&\376]\334\234\237\277C\327\244,Z\270\220?\222;70cQ\223\277\010\244\205J\252V\245?"
      }
    }
  }
}
node {
  name: "normalize_element/component_123"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "\374L\324\n\207i\250?\342V\353\013\273\204\266?\253\244\246A\367\003\246?\220H7i\352\332\252?.\233@\336\231s\242?G\225)2\257\255\261?\226I\276&,p\243?\023\202\023\331 \366\267?\0367\345\322D\224\272\277\243\335\n)\2137\253?\316\327\336\007\035\375r?N\357\003\014\242 \232?\225x\224\330\"Z\230\277\036U\243\020.\010\204\277\363\204]\310\256\252Z\277LS\343)\324h\246?t\212\014\255yN\254?4\032\313\204\367\006\221\277\3309\r\036\224\232\244?\347\030\322\331\260C\255?n\252e\240oa\226\277d\003\000\377H\234\233?<#u\373\337#\251?\331SO?\330\304\243?\237\245\204\220\216\323\262?w\200\314s\351\004\227?\226$l\313\302\317\220?\302&\356U\204\313\237?m\214\320\341\267\247\254?~\233\337\337\211!\242?*\231s[\350\353\262?\200\346\336\211z=\225?\261\366\223\013w)\213?\376\234\364QU\207\264?\346,\351\261\370\020\255?\301\374x\\\022o\246?\202\314p1v*\256?m&\201\373qc\242?G\202\272\222.\307\260?+\001\323\227\025r\261?\362\304\263\321\'\\\237?;\2163\016t;\241?]`\262\230\250Cf?(I-MwB\261\277\374\'\231K\223\032\242?*5U\331r\214\224?\243Z\261\260\301q\222?D\013\250\356\314/{?\r<n-\320D\235?\211\203Q7\272\304\243\2775\334;\373\256\256\271\277\206XNY\205\201\242?\242\340sqe\232\256?\224&\037g\014\006\311\277\301\024\3145Xz\247\277) F8\310L\260?\224+W\240_Y\226\277\307\225x\025Y8\246?\00340C\372%\202\277\250F6\367ZG\206?R\323\245\264;\372\261?}q\346\255s9\241?c\353G\372\034n\221?~\272.\272\304\252d\277\263n\356usm\237?\221\374h\010,X\231\277/\333\261\205\336\352\245?\270\033w\\\352\246\222\277\343-U>\013\017\263?\327\2019\233\n\310\201?\255\251E\247[4\236?6+O\336\317Bu\277Y\356\210\347\305\271\250?\227bSV\357J\232?\232uCv\205\016\217?3ZIV>\376\245\277\341\272\336\r\324\357\225?Z\337\336:\241\005\244?9{\244\027n&\251?8\334\276|\357E\266\277E\215:!\021\246\202\277\326\201\331(\336\r\240?YW\036\007\322\203\216?\357\231M\3117\260\261??j%\n\263$\245?Vz\313\247Wb\243\277-\226C\0074C\241?-\2617\323\262%\273\277\366Q\340y\266\002\217?R.q\nIkv?\333\337\222I13x?7-\302^r\355\245?\304B\221\024\257\267\231?sf\300\373\330\224{?B6+\003P\212\244?\204\302\206\370\236\311\206\277\037\345\324\214\024\343\260?\306d7T\010\273\207?\374\367\023\247\360&S\277g\252\324\252e\204\216\277\225vQ\221\226\014X\277\247\245T\352\333G\264?f\256\227\234\226\374\253?0\247\355\'\257\n\247?\246\223\244\037\230\231\215\277t\nd\tz\216\253?{=S@\276\252\241?3\223)\230\221w\251\277\325#\306\230\337\\\256?#\211\005\216iE\206?$\024y\227-\007\260\277\361\333$\307\034R\232?\273<\306\252{C\201?]\022\026\376\324\304\223?A`\333^\257\t\201? \237\014e\023&\237\277z\177: 4{\221?\017B;\005\313\241\256?\354\261_=\017j\250?}?\344\026\273\311\234?\025\302\310\235b\355\260\277\330\376!?\023H\254?\017\334\305W\342\321\261?w\326\030\273\027t\302\277\326\000\252Z\000\212\227?pz\313`\202\326\240?\360\346\234\344\266\231\214?\265l\250vXq\264?\"\376\311.\004x\234?\262\311c\313\307\365\244\277\301\244[#@U\246\277Pb\022Ydn\236?\340\374\261\tc\035\247\277\227\201w\260\315\337\233?W(I\014?\216\231\277\212\236$\365O\204\211?\226\305\244\217^\254\216\277L\215L\2270`\212\277\277\354\272\221[\216\246\277\017\354V\241\021\004\227?\225\333\230\314\350\257\262?\004=g\0323\332\215?\344\331\340\242em\203?fz\316\205\255\263\227?\362\021\330lJQ\256?\030v{\275\271\307\231?\304 \t+\260(\232?J\277\177\036c!\200\277a\265{\267Nc\244\277*jh\267!\274\225?\022b\330\250!\206\236?\277m\2075~\251\203?#.\325\014v\261\217\277zl\022V?C\235?X\025V4\032\034\210\277\233N\333T\027O\272?\366L\326xNR\245?ct\340\237\3113\254?q\347_\036t\001\251?\370\'\370s\370\016\204?\201$8j\217[\243?\0332o\354\021\036X\277\327|\205\232[\000\253\277\321\250\363\272\333\373\300\277L\032@K\231\314\250?\026@8lI\261=?\334\033N)G\262{\277\266\211[Q\277\025\235?\336\002\377\027\254\221\231\277/Y\252E##\210?dg\007\345H\252\264\277\232y\000\370\230)\204?(&\261\234k5w?qE>\274\242\354\201\277\342w\323-;\304\247?\000In\323\363\374\240?f\367\2017\346m\256\277\323\275\220\006\236\030\233?I\346!\353Z\217\203?\365i\364\356\270v\224?\253T(\211\'\346I\277\313\355\037\212P\014\260\277<\'\235\030\367\276\237?u\370s#\217TM?k\367\265rR?\264?l\213\344\213\363\300\246?+\0261\177\224w\271?-\250\242\212xq\246?\323\020\312\005\253\r\231?Z`\023\3028r\261?\252\026\222E\372\352\244\277F\267\230~\r\261\223?\2267\272\\Z\223r\277\255\010>\3239\251\244?"
      }
    }
  }
}
node {
  name: "normalize_element/component_124"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "2\353 \n\301\005\246?\356\006\200\023\322f\263?N\331t\372\375?\244?u\257w\245\203\372\226?K\2351\340\355\300\233?\031\270Z,\347\000\271?\327\342\270+r\212\240?\336c\360\375\373\366\274?\236\007\n\313\276|\275\277B\230R\314~3\247?5\343\353m^\225v?\364.\353\271\335\257\224?\233\217\262\030Q\347\223\277\214\344\375H\2515\211\277\3175\'\212\353s0?\242\272\242\\fM\246?2\306\231\274\207\237\254?\010gn\300\022\010\222\277b\014\242q\205\320\233?y\350\302\025>\305\256?$\372kh\271\"\240\277_r\355Uu\240\234?\027\033 \274i?\243?+\300\3447f\210\243?p\226\210s\261\302\255?\262\\dr\322J\245?\200Q\366TV\354\224?cv\225<>$\240?d{]!\324\016\260?\250\211Zt\224~\236?\277\223\024-\200\366\260?|\364\370P\261P\226?\304X%\337\014\001\213?\274Q\252\313\311\216\267?\302\005\212l\250\227\250?\311\312UJ\324\255\242?OF\2107\332\r\261?\214e\263PV\377\236?\323p\372\025\223\200\250?<tV\030\0264\237?\024%GXY}\221?\020\227m\276I\207\241?GW\271\265$\276\215\277\376\007\213\234\033\331\260\277w\350&\367\\\"\244?\216>\341JH4\227?\341\205\204Z\231\021\220?\351a\177\021\350\327\220?\336\310\353\252\010\203\225?\3304\226\200\375\257\242\277\351\036\266M!r\270\277\260\226\274\263\326M\242?A.\3439jk\245?\353\254F\021z?\307\277\314\343\354z\302B\253\277\3153O\336b\246\253?S\273\255\224h@\226\277s\267-\302\373G\244?\265\037h\206\006\302\203\277\225a\201T/dJ\277lo\020\335N\203\237?\337\304\266c\357g\241?:\212\355\232\002,\225?i|\364\300\246R\224?\304\362\354\224<\016\233?o\216zUU\322\226\277-D\376\3163L\241?\206\234a\344\021N\212\277\240\360\232\326\364\300\262?\313\0225\202\241\317\202?\241X7v:\244\235?\271,\204\247 \327w\277\304\365\263N\030q\250?8+\344B\314\302\226?\330\217\027I\360\303\207?\340-\254\365\'\354\245\277\325\203\306o\261r\225?\245q^RkP\243?v\237\2031\231_\245?6\230\2447~V\271\277\2407k\251\351\236\222\277\212k\325\336B\177\244?\210h\021\335\365\312\203?d#1\275\324:\252?Zr\027\214\n\317\243?Z{\031qs\275\241\277S\301\023@R\300\233?\320\374\004,\3064\267\277d\027wI\275#\216?\03204\026\316\347l?)\332,\311\307\017\211?\363\2505#<\007\241?c\3436$2\317\231?\214\265{\226@z}?\375\374\001S)\035\242?\360d\036\226Y\306\222\277Cbq\356e\221\251?\345j\243\273\235\335\213?MmK\022\273\036\203\277\222\206\321\256mJ\210\277\233C\323\213:pG\277.\371\3154\311^\262?h\327\013\245\371\332\250?\2619\353yUl\244?\273\257\315=Yn\213\277R\024\260i\032\036\247?\243\272\002\317\222\007\237?C\270\336C}#\256\277\303Z\252Bk\224\255?\307\266D\342\251=\204?\027X\365)/H\257\277\352\020[!|\215\204?\274b\350\006z\020y?y\351\337[|\375\227?\272(aC\303\244\200?kh\233\314\214?\234\277\363\357=\240\217\331\205?\224\236\211\263\231x\251?\251\306C\306@*\246?9\236P\001\220\020\234?@\201\313\361w\340\247\277\320t\237\261i\204\246?\355vo\245\324.\260?9\237\266\035\205\261\274\277\035\364\303\r\232\213\245?\\\274Z\031Ma\237?\271@\301F\0130\215?s\231\370upH\266?P\377ceW\001\241?\215\001\334\243l\316\245\277\261q\251\274\260D\243\277\332Xc\262\263F\233?X\357Lu\274Z\253\277v\316\027\307\275\003\230?n\304\230\226\206Qh\277\301\201\271\253\221<\227?\0007\363\372\177\024\206\277\245\267V\263\202j\201\277\364\225\223\222\026\025\240\277\220\n\330\030\270_\225?z\206\013\241\314\204\261?\2004\001^\035\002z\277M\344Y\264\306\301\227?\312\n{c\323\r\240?\341\327\255=jN\253?\t\375\337 @\327\235?\346j3g\340\364\230?\316K?\215\355H\220\277\327Yq\315\304D\244\277\340<[[\006\t\226?}\001%T\\\224\234?#\231\226\327\230ww?pp8\337\307R\205\277t\324C\307\035U\232?ej\371\036\201\201(\277v\367\177\\\202\326\266?*K\242\316D\'\246??\t\374y\004K\250?:~\233\n`\346\246?<,\300\266\377z\215?\3228b\232\3323\246?\270d\236ZR\365X\277\237\304\202#\312\334\244\277\242\351\301\344\023\240\300\277\364\304M\357\335D\245?\223\273\346\215G4W?\351\254\351V\334sy\277$\234\377\037s\332\235?\375\216PO\371\271\\?\021\331[X\244z\204?\355\227\006\200U\356\251\277g\372\030\270\253s\251\277sx6\033\223\024\204?OPq\271M\372\213\277\313T\216\267\377B\240?\354\335\221D>\316\240?\356\035\223\227\305\\\257\277fI\270D\271*\220?\230N\244a\034O\210?\206\023Ox4\316\221?\301B\234=\206}\235?y\253\305\337\252\366\261\277x\244C\245\346\262\232?[@\257\022\010Ho?VjQ\372\235\001\262?\346\321\372L\327\302\245?}C]{\321\344\270?C\330\206\020\253\315\243?o\222:\217\367\233\226?#\312\266\212\000\322\255?9\216\321\232\034\307\250\277\237\332\372\230\370k\230?U4d\251\346Sv?1h\031\220Z\264\243?"
      }
    }
  }
}
node {
  name: "normalize_element/component_125"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "!\235\226,\342\314\241?u\027\351\304li\257?]\200\374\363\324\355\242?fo\264\331\024l\255?I\033\370e\361\341\224?XC\211f\003\010\275?\232f\267\037\273\316\232?~\343\371yD\346\276?\210\370\037J\310H\277\277!\3131B@\n\243?\2165m\020\367\242\177?\333\323\367\342\327\204\216?H\354\255]\347\232\220\277\317\245U\2001S\215\277\215\035x\250\262\227q?\274\262\013\006\327\334\246?\276\320Q~\272\320\254?!\347\375\177\2340\223\277Vj\230\317)0\217?\225\004\217\014\305_\257?Y\250\213\315\3646\245\277\371\373\370]n\266\235?\231\211\316\244\3408\233?\271\245\252\020\\\323\241?\302\347\325\2402u\245?!k/jC:\255?\231\2041@\247\302\233?d\025_\202\215\312\237?\024*\310gc9\260?\357\215\361\306!\231\234?\033`c\272\267\362\256?=|\0166\271;\230?\3312\275\035\021\356\212?+a\274\322q6\270?\246\357QY\366\037\245?,>\010x\007\265\233?\237c\354\366\354\310\262?\236\336\302C\343L\233?\246T\202\370\322q\237?\251\264\247\337\343\036\237?\314\303\273\2746\244t?\247\362\326\366\377<\241?\270\006\273\003j\241\232\277\204\203Z_f\320\257\277\3059\202\005DI\241?w\3277\002\201f\227?\350oG\332\273v\221?\275\206\307\033\354\217\232?J\233\366\t\252\212\220?\343\267I\2169\244\240\277e\311\313\203\274j\266\277z\347\200\277\300\365\241?g\347\263\212\236^\240?{\016d\361&u\305\277\014\036\341\337`\242\256\277\254?\367\"0\217\245?\330\352\366\202\344\327\224\277\356yE\212\335K\241?0\251\220\341g\022\207\277\316$\2451>\362\211\277\016\207\000;\222&\221\277t\t1\336)\371\241?g]\260\017C\217\230?\017\n\221\246Vl\245?\232\233\353\013S!\227?\263r\237\204\350\374\223\277\324\356\304\235\354\025\231?\236\231\031cK\202t\277\0004\214\263\320k\262?\361\260Njo\275\204?g\275Ru\023\245\234?\275\2168d\003\351z\277\340\256\361\250\027\315\247?h\341\352\264\371u\231?\263(3xt0~?\222\337\325\204J\342\245\277\352\302\010\024\303k\231?\'\016p\246\341\022\242?\0211\251\312\214\361\241?k\221T\251P\222\262\277\320I$\016/A\233\277\364\351\372\003\2726\251?>-\014\177\360\033s?\242\342\370\324\303-\241?`\343\244w\304\375\242?\241\252\266Y\304\311\236\277\227\367@D\315\004\227?\246\005A\335\306\272\262\277\354\273\270\023@\277\214?\305\243\311\317\212\313p?\2424\340\233\302$\226?\2751<\252%\023\227?\2056\\\213\346f\231?\312Q\362}\200\324\177?\377\265YH\002\005\240?\037\256\007Y7Z\233\277a8\007jY@\241?_\220\374\332]\024\221?\253\341\270\022\325\351\221\277\221\324\337\236)l\201\277\035\360\373b\257\252P?\243\014\340#\036-\260?\242\252\225K\333\246\246?\360h\336\317\373\217\241?\267\324\270l\2611\210\277N\302\214\366f>\242?\330\245\374ZM\215\232?Y0\252r\3058\260\277i\017\346<\204m\254?\375\'\037\205b`\202?f\nu\017\013\340\255\277\376\337Z\353`\004J?\206\317\231^\251\001w?P.\220\027\007\324\235?\224#y\273\031\306\201?\361\310i\231VT\230\277\212\246I\257!\306x?\357\332\020\251\212%\243?\323\352\312\270\300\035\244?\301NB\315\266\361\232?\004\n\241\365\203\311\235\277\274\202\356D\251\272\240?+\210\361\002;\352\254?\332\302\303\031\233T\261\277\341\241\324\320\231\303\252?\373\333\257L\t\322\234?\tj|Oz\031\220?\2375[S\002]\266?\305\374V\227\305W\244?y\247:\230\330r\246\277\214\034\316n\300\366\236\277\254\347b\333\273i\231?x(\344,\347\260\257\277]\'+\017\235a\222?\370\264I\231b{\246?\221X\362{\022\r\223?\243j\257\226\037\336y\277h\201\340k\264\216m\277\365\2247\350\224E\220\277\034!\357\224\217V\223?\310q^\236\371\225\257?\003\032\036[\314X\223\277\316\"-\370\341\336\251?\301\251\356\025\006\372\242?)\266\323\355$\326\247?\225j\256\271\364F\241?\336s\223*\347\021\227?\316f\342\021m\253\225\277OT\246\000g\025\244\277\216r\271\214^\267\227?\256d>U\302i\232?\261\014\341\000I\304c?+%$\002p\024z\277q\207/\016\214\216\234?M\206\350\262\306\020h?\346\317\177[\354\200\263?D\245\312]o\216\247?\355\025\227\\%U\244?\000\224a\nF\215\244?\273\213]\306@\343\221?\014\'\\\324\226V\250?\004\\b\365\3374a?\274\204\262\014K\345\236\277\335\321\004,\347\002\300\277>\200\022\215X\005\242?GH\351A]~i?dHP\'\231\317s\277\"\274$k`\355\236?7\311\2771,\310\200?e\334\353\334h\213\201?+L\325\371\224\274\230\277\342\361\345\354:\247\207\2773/R\353\247F\212?\225$\036<R\376\221\277N0\035\354\255~\231?\026\226\366\010`\303\240?\237`\246\275&C\244\277\321\316\265\244\255\216w?]t.\234\3263\211?\215)\021\016\341\213\223?9\316h\t\004\312\253?\315\234\017~\313\344\262\277(1&\002w\316\224?3\270\241\272\235\243\200?}\025\275\254\271>\257?~\203\221\277\375~\244?lk\270\206!\213\270?F\333\267\256&\274\241?\206\322w\264\372\265\224?\002w\020\2436]\251?\026\t\342F\0164\253\277<\027\275\210\363\306\234?&\253\316\334\326%\211?k\327\r\246$\225\242?"
      }
    }
  }
}
node {
  name: "normalize_element/component_126"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "{$j\021m\241\237?\177A\361\264\023]\247?\240\345\336\233]\371\241?\224\257\352\375]\327\253?}\035\306\021\\\306\220?\254QB\302\215\032\271?\256!\\\364Zx\224?%\031q\265\331\316\273?g\204\177]\302\253\276\277\233Z\353\310\347\316\235?x\207N\256\255\310\205?\327A\220Ig\334\203?L\321>\024\324\t\223\277\2060?\266\263O\216\277\021\255\214{0\177\202?\373;\026\006%\377\251?~No\266!\025\255?8\234\217\361|\224\226\277\230Y:\325\020\013{?\352<e`\335\253\255?M\245<F\273\002\253\277\223\214\241>\367U\237??\306\2615(\210\222?Wej\010J\256\240?\333\n{\211\232\260\235?wi\022\250=\246\257?\013\323\"\233\336\327\242?\031\302\321XrJ\235?d\2765\020\310\256\251?\372\343\327\276i\302\232?tb\322\211K\250\260?\306\001\354\212\266\266\232?&w\240\232\007\272\212?\343\311\311\037gu\264?\312b\327\000\351\276\244?\204\341\320\031 \352\221?3\264\343\201&\224\263?\376L\200\013\371:\227?\340&i\037\247\277\215?Eap\375V\023\227?\254\217\371\023\24488\277\355~\025\340\273\315\240?j\357\363\342;f\223\277h\023\256\347nN\255\277\235X\177\002*G\205?\2566\212\242\303 \231?\241;\201\343DQ\222?\000p\301Y\027\245\236?i\253\331\235\312v\221?\374W:Ee\310\233\277\342(\343Y.\215\266\277u6\177t3\241\241?\371G\022\226\016\\\231?\030jYf-\237\304\277V\000h\241X\177\260\277\223\336X\314\337\357\242?\362&\\\033l\342\207\277\\\224{\257\221\214\231?\320{\313\353t_\177\277\026\206\005M\004\327\230\2773\232\200R\371F\234\277\0165`I\037\336\242?\023L\220l\tT\230?\203\031\273\223;\253\220?\214E\013\204(U\224?\000\0167f-\223\220\277+[0`\345\252\217?u\':\363\364\017\177?\2327\271\245\366\036\262?\206\247\"\330b\376\204?\266\363\322T\034\365\232?(x\2118=\362~\277\226\216\372j\225\000\247?7\3166\317\302\262\232?<\222+\362tyf?\333\240\204\006S\256\245\277\033\213\006&\300{\232?\275\204\325\033_\302\237?\214\3442;y\373\235?)\004BP\r2\261\277!\372{JJQ\240\277\345J\337\231@y\254?\304\327A\237t\2246?~\207\332\352\375<\227?5\240\"\252\227\257\242?\320\225f\305\000!\231\277\271\020\263\260\nH\225?\367\nO\013\005<\256\277E\344\252hbp\213?\202\325\027]l\307\231?\020X\241\227=H\240?\026U\335(Te\207?sr\003aN\240\225?\323\034+\301z\215\201?\242\234\344\036}Y\235?\362\224\r\037\234E\242\277W\326.T\233\213\223?\343C\017\320\013\344\226?\357\316[\356,w\231\277\021\3253;\215\337t\277E\260\225\3033\020g?-\n\225a\327T\254?\256V\334n8\342\247?X\031y\230wN\235?\207\270\360\276U\227\206\277\234\363\036*7\230\232?\353QN:\345_\226?\250\007\325kR\210\256\277V\004/\225\337\353\252?\270,;\321in\201?[\263\247z\2708\254\277\351\316\256\243\363\337h?sF\246\331\302Gz?\"\243\037\347\337)\243?\253\354o\224\262\310\203?\217\264\271\tu\223\223\277N_X\311\212\213j?\235\251\240:\007\343\240?\003_\367tz\200\243?}\340\375\315\230=\231?t#i\215\372Q\232\277\240\2702\224RQ\226?\224&\262\312\335\313\252?\250i\330n\t`\250\277\241\275\353M\273\201\253?U\255\202\241\3318\232?\016_\r\355\357\256\223?\342\231\242\354\305\001\265?\355P\032X1\326\247?\032l,Y\374C\247\277\362\001\216\370\246\315\230\277%:Y\327Y\016\231?\353(\246\211y\001\262\277\343\216\353j\350\"\202?e_\005:\213\305\250?\000\232\367\356Ejx?R6zo\353\362f\277\301\227[|\367w\020\277\327\037\027\213\225\207k\277@1\250\362\032\024\221?l\364<H\347-\263?\343L\275\265\346\243\211\277hU\2379X\360\222\277\3717\242Z\310L\242?\352(\251A\0100\244?\034\037exwZ\244?\234s\336i\254\251\224?dK\342\356\244l\224\277\313\034\242<\271\307\243\277b^uT\235$\233?\311\211A#\202\270\227?#\311\316\310\320\013\370\276\216g?n\231\265\177\277t\314\254\267cp\232?\235\252\340\217Y\370\205\277\370g\227S(\251\261?\325\'&`Ul\251?\216\231\007Z\310\366\240?1\004=*\267\032\242?c%oK\247\037\221?\306Y{\031qs\250?\222\320\274:\3149\202?\263i0\003Q\324\232\277\365) \035\271\026\277\277\330Q\310\332Nw\236?\360\255@\333\007\254v?r\200\271FfVh\277\243\245\263\022A<\237?68\036\'\335z\225?3Z\334\271\017\304z?Y/L\307\030/\210\277R\236\237\000\217J\233\277\226\335$\352+f\223?\305\'\327\363\271\003\222\277V\272N2X\302\227?DP\276k\2234\241?\232I\307\341;M\222\277%\024\033&,\207\\\2778\376\305\345\330w\220?\221\0160o\345W\241?\274\321dR\2057\255?0\254\374\341\320\243\261\277\305\356Y\334!\363\214?\241\373\322\330\347\374\213?\261\316\267YJ\003\253?\023\365\032l\376 \243?%K_h\253\233\267?:\334\300}\032\200\240?}XI\rhG\222?\370\330\363\273\0045\247?\333\337F\273\353\033\254\277\210}|\356vP\236?\314\005f9\224\227\222?$\272\222\335\377\331\240?"
      }
    }
  }
}
node {
  name: "normalize_element/component_127"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "\232L\301\214\274\273\236?\t\0170yW\313\236?\202$\230\334\273\025\241?iZ\336,\220f\255?Q\341&\250\203\352\216?m\022\242\315\210\212\260?\031\354\244\303\345\246\215?\355^\000w_i\270?\013+p\r\307N\274\277\270\036\302Nj\225\226?\245P\336\023`b\214?@\212\327HT\240u?{b\313b\312\326\230\277B\224%\366\255/\216\277\3777\226z\215\222\214?,\334T\005\354h\256?\211\266\373\006:\033\255?h\227-a\206)\234\277=\253\305\332\361\274J?\010\265\266[XX\252?8t\333\007\0364\260\277\204\364:\000\347g\240?N\205\330\226\212X\207?\037\356\205*~Q\237?\2428\364\324\362\034\222?C\307\350b\316\221\255?\320\220\037a\200\223\247?\277\243\264\241\334b\232?\245jS&I\230\234?\304\251\021%\032\327\231?\017\216\304\221(0\262?\303\220y=\310M\235?\215\261\016\245\310\352\212?\277.\031\200sj\253?Q\262\021\222Ii\246?\016\343\311\311\037g\201?B\230\006>9\234\263?;\266T\224\001V\223?6\373\020\017\271\375(?\234\375\322\271\332>\233?\3478\301{j\234]\277n\245-g\034\016\240?\177\241\022\232\316\225K?\270\263\235Y\214f\252\277\261\325\241w\203\230\226\277x\351\325\351\010,\233?\200-Gy\372\311\223?J\302\021\346n\276\236?7\202\202\302\0100\226?\320x\253yQe\225\277&\370\331\332X\017\270\277\030\377b\251:S\241?\345U\240\215\221)\227?\216`\326\320u}\304\277.7\t\277\203\010\261\277\r\263`z\254-\242?\340\242\242\320\0036O?s\177\346\215B{\215?\025\310.IL\355H\277.bcT\325\250\241\277z\377J\247\250\014\223\277\343\312_ur\363\243?;\331\271\250\227\221\226?P\201\306^\205\032\221\277\354\0020.\355\205\222?\220\324\010\036[\246\211\277X\332\370\377\260&\200?t\272\020\321\006e\226?N\3734\216[\303\261?D\2618CA\216\205?\372\033E\272\305\032\231?\"\273B\207\017\330\200\2777z\251\226|\005\246?\262\031\376\330\306\315\232?aO\340B\303\007[\277Es\360\216\204d\245\277\220[\364\227\333\222\232?\300\\\024\010\376a\232?\377(\364>\261\365\230?O\370\220\343\223\275\255\277\003\361\250\233\005\206\241\277\225i\226,pw\256?\0175\341\3114\273j\277\214j\365\373\034$\222?W\274&\336\340\217\242?@7n\0201N\223\277\35387\323\250\263\225?\003o\234\242\220U\250\277\343\332\210\333,T\212?\"c\021jV\033\247?\240u{\263GT\245?{\022@\200\3708T?f9\260\354\347\354\217?\227\212\203\007\252\237\203?\356\353\002V\365\217\233?)\314\355\361Qe\246\277\364r\226a\365\252z?8A\275\341\212\000\235?\237)\256\t\355\305\237\277|z =;\234]\277\240\327e\031^ s?\374\3517\3725\345\250?m\270\372w\236\364\251?\312,Ei\244\342\227?K\347\315%x\352\205\277Iw\337J\331\226\221?WvE\031?\307\222?e\360\026\231\227\373\251\277N\357E(tf\251?\002\001G\01778\201?\206B\026\377\375}\252\277\251\274\253\213\314=\213?\263<\027_\027\362~?\\\317\032\000\315\307\247?\273\227B\272\264\356\206?38\313\336\262@\214\277h\376=\0354`e?C\232F\3156\273\240?k\035}\025\336\272\243?or\237\354\313q\227?\225\344t\352\256\022\241\277\357\312\3064\347\241\211?\260\355n\027\372]\251?\334)\350\271/\256\246\2776_\205\221\347\305\244?\356\210.\233E\227\227?Yc\010\264\377\367\227?kC\213\215\365d\262?\311\235K\321\307\005\253?lB\2418\\\270\247\277\337\366\256\2104\006\224\277\270ZM\365i\267\231? \362)\017\361\340\263\277\037,\211\n\332\206_\277\250\206+\327CJ\240?\3277\002\201f\301\214?\305\366\365\244\225@\037?\372\343yMh\302a?\306QV_\2371z?\373\0172\216fl\215?f\306}\331\255M\266?\340\360\323\317\3234{?|\200D\314R\326\251?\200\005\rV\314\243\235?1\333*\225\253\260\240?\332W\031\353\355_\247?\n\233\307\202>h\222?\177\220\014\t}\210\214\277#h\016A\274K\243\277\216\351{\240$C\237?\007U\303\256\210\302\224?\035\236\344b\232V[\277\306\273\247\233Y\205\210\277\225\224?\010\226]\227?Gq\313\235R\213\241\277\367t3\253\220U\261?o\025\267\026\325>\253?\217\330=et\301\234?\315\323IN\327\'\237?${)\341\256\003\214?\010\274p@{\220\247?e\256\331\270hB\221?[\374\376\2616\344\232\277\340\330\270\240\354\035\276\2778p\275\\z\352\231?\372\227\375\352\014\264\200?\357#\177|~\"C\277\366k\246\323\236\270\236?\357\223\255r\304\001\236?\243\242\211.\252pt?&\363\210\004e\260\204\277B\340v\330\254I\235\277k\373k:\2017\226?\t\305\242^\372\333\215\277\266#(\300\250\213\235?\026Q\212\213\340\325\241?Z\341\373\272\212\307`\277\225\006\247\323\364\270{\277\022\275\3237ET\226?O\240\212F7\365\251?\0335\236\211bR\247?\264\327\016\210\010\346\255\277\332\212\310s\'\037\201?~:\220\2108\274\223?U^~\351\345^\247?\253\347yw1\273\241?\261+\024\206T\023\266?G\306j\363\377\252\237?,\335qK*\241\217?\220\307 8\255b\246?\270\354\221\177\306\202\253\277\202g\037\204\260\265\235?81\r\213\235e\226?\323\331\304\'o\020\235?"
      }
    }
  }
}
node {
  name: "normalize_element/component_128"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "\223\311b\310\325\273\236?j\214s\'\032\234\217?(\201\266\235\002\325\237?\234\3271\336\361N\257?\023\345\347\223\320\356\220?q<\232H;\376\235?\207\370\364\311k\324\204?%\361\340\221\362?\262?B\363\020\370\211$\271\277\260\3262\024\325-\221?e\340\302\262\200\246\221?\376\241\\\304\2767b?\t\340a8\251\370\235\277\342d\"r\350\227\216\277\031\226D\230\320\224\223?\375\236S\356\020\017\261?\005\246k\327\230\230\253?\204oq\277\t\246\234\277\237|\306\372\020\230j\277\362Z<\316\312|\246?P\214\352|\2213\262\277\022\010\016D#\223\240?\323\367Ms\210>{?<dG\006`\323\234?S\360\327\016\215\301o?\310yK\256lc\251?d\361\2454\276\326\252?\275\023oA\017\345\230?6\365\r\216\212\346^?\235\334\037\212*E\232?\232\324\005\371/I\261?\002\343\203\030\224\333\237?\253\235\214\352\247\021\214?\262\n6\326G\245\227?\323\240\252:\222h\250?\022\274Av\316v\024?.T\025R2D\263?+/\214\003\316\243\235?\324W\314\022\341\202\207\277.\257\323}=\265\241?\0226\336KQ\226p\277\031 ,\276\374\251\236?\277?\376\002\334T~?\340 \267\345w(\247\277\225a\266F\377)\254\277\245n*\374`\263\234?e\262>9\230\272\226? \r:0\237\375\235?\267\301\315\005\325\326\233?\337\226\256\261b\360\214\277#\336\315bH\037\262\277cs\262-3\007\241?u>\256\240x\264\232?!\214\273\033\355s\304\277\361\266L2\344\353\260\277\305\274\330\305~`\240?\347\004e\001\260\215\212?\262\010\315\307\030\314m?F>8jH\206\221\277\273\352Z\253\330\300\245\277\372\351L\225\200|\223\277\210E\375\017_\017\245?\0201\225\346\245N\227?\213\242\206\275\360M\212?\320W\223\036\273H\221?\0038\353\303\342\206\203\277\304\267R\375\272;a?9\276V?\277\272\237?\037\3436\214\025D\261?\330\316\270\357\237\016\212?=e5]Ot\227?F=\n\370\261Y\200\2774\261\271\235\217\310\244?\304,\230\036kK\233?\370-!\274\311\261u\277\3654\225\202\304/\245\277\234et\022\332\n\235?\205\377|tM\365\224?\314*\222\315Z\254\224?I\204\222>\267\024\251\277\370\020\221\360v\352\241\277\236P\374\326V\005\260?\250\345]\256\253\355y\277N\201\'\210\025\311\216?6YR\327\242Q\242?\\\023G(\372\237\213\277\3635TW\001h\227?Ks!\022b\207\242\277\207\322-\'\340X\211?c\333yM\325^\236?\r]Dl\224\033\252?\307\237\3163\373\336|\277\326\356\022-]\347\205?\255\342qw\364\304\205?\215\276)|\033:\232?\235{\325\353\222H\251\277q\265\021\371uzj\277P\346ED62\240?\263\307\253v\304V\242\277o\272\334\225\232\223`\277n;5\343\251Q|?\371\037z\001\3375\245?l\317\013\373f0\252?\356\314\251\tG5\223?4\021\255J_^\205\277\323\357\203r)N\204?\034_\205\330\274Q\217?\277\314\177a\\\036\243\277\333\331\333VH3\250?\030U!FQe\201?\342\330\035\314\322\300\250\277\321\304\265\206\304\320\240?\017\016\375\340j\007}?)\376\3171\205\246\253?{\317\004gI\260\213?0\247\333D\363!\200\277\312\030@t\030\376q?\371p\226\200\002i\237?P\256OW|\345\243?K\215\233\335\004&\226?uA\274/\340\305\247\277\035&\354k\365\206w?*6\327J\227\347\247?\343\376I\232D_\225\277\303\033\377)Hxj?\314\233\254\031er\224?o75\216`\374\233?\366\0209\357\222G\256?E{\236:\264\232\253?\372vOt\026#\247\277\343\216 ]\270\350\216\277j\364\322cG\"\233?E\374\273%\3265\265\277\023i\227F\376&\215\277\323\261M\241(\r\235?\214\264a\010\221\360{?\027\266\236\325\215me?\247I\235>\n\360p?\206\026\312\243\312\031\220?\373\231\027\263g\307\210?\265\037\r\315\223p\260?lchL\363T\236?\266\232\357\214(\200\242?\027\251\0077\337\251\224?l\006\263g\241-\233?\006/\2635F\336\251?\003\342\207\340>\306\220?\352\007\306\330A\331w\277\363R\351\333\r\230\242\277\313\353o\246\225\204\241?\330H\313\256\237\361\221?F\377\243\355\232\273f\277Y+\226\377\3516\221\277\007\347\031\034\241v\230?(\3722\007\367\271\255\277\3549\002\033\204\367\261?\305\250}\3209\223\254?\202nPwu\371\230?\376\235\355\321\033\356\231?jj\275\0050j\205?\0355\245CGu\246?\025\177\312\347\313\301\230?\360zJ}B>\220\277\021\247\264z^\334\274\277\362wW\214\246\362\233?\323\211/\323)\241\205?\"\360\200\345\032\374c?\201\243\032\177m\300\235?\311\371\002}\231]\241?\020?P\205wm\206?\307\353\316\316\372x\212\277\376jC\002\234\227\232\277)\215\354\330u`\206?\302UE\210\220\222\205\277+MC\207\322t\236?l\314b\227\345A\242?\332\302\000}\263\261X\277\"\274$k`\355\204\277\032PI\177*\314\233?\0307^O\256\010\254?\377\332\260\\%\016\241?(lI\213V\225\247\277\275\021n\026U\335h?rR+[\n\231\230?b\350\253\300\235\377\243?,\014\\\341\007.\240?v\n\0375\031\032\270?\212@\350\345\037\231\236?\\=\224Y\236\266\213?\322\";l\253$\246?\247\023\357Q\226Y\251\277\335\213\225\274-\235\234?\000q\340\240\200\227\230?3\223\027\265\325\216\233?"
      }
    }
  }
}
node {
  name: "normalize_element/component_129"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "-\035Z\001\021$\237?\376\026N\346\340\030p?}\271\034\235]8\234?;\032\357\335\322\251\260?\000.=\244\\=\224?8\032\317\206M{r?NDno\177z\200?\301W2\317c\367\250?6H\344b\334\362\265\277C\316w\307\224\325\215?\031\205,$\303\236\224?1o\226\021e\017W?L^X\217\337\001\240\277m\357l\362\010,\222\277\251\304\306\323*\256\227?\340\3237\221\342\341\261?\321\314!\026\"\301\252?\310\245\345\230\020\231\230\277Z<\367I\256\225z\277\243\004\206w|%\243?\234\325r\317\t\215\262\277E\347\270\367\311\201\240?/\022\347\2340EO\277\033v\\\260\373^\232?\001\327,\3177-~\277\214v\027S\251\014\244?Rp%\371\0310\255?\272~\255\212\361\023\231?-/\366\347m/\221\277\2746\007GJ,\233?\305\241\247\226\347\240\254?\216N\303\333v\346\240?\026\034\337\220\246w\216?4C;\213\004qc\277\n\334\025U\032\214\251?!\376\001\331b\354y\277v\307%8<\327\262?\252a\035\231\327\251\225?\317\211\325\320\032D\224\277\270\335\277\n\324\210\245?\036.\270m\1771z\277\014$\273\341]\177\235?\314\377\222\361{\335\241?u\210\311e\355\000\244\277-u\310\201\342=\262\277=x\215`Z\t\236?\246\370\251>\030\367\231?\304\236H\300\200\017\236?-5;\205n\214\237?\265U7\201c{\177\277\225R[\340\256;\240\277\302d\037n\313\243\240?!\010\273!\300\373\236?\345}\347\332\301O\304\277\\;\356\347V\000\260\277\007\032\316]\224\236\234?\277k\363\246\362\333\227?#?\231\201\365xt\277\370\036c+\276Z+\277r\205\230\307q\022\250\277o\016\024\316\'X\227\277\277M\264\350\363\n\246?Y\005\263\007/\001\227?#\373\205\366h\254\260?~:ozO\231\220?[qt\014\375P\177\277\33552\331\211\334=?\243\320\r\250\222\\\242?Y\242<\276\200\210\260?\313h\356e\376x\217?M$\323\314SP\227?\267\352w\267ko{\277y\032\211\000BL\243?K\302<f\313\262\232?\003\003kI\005\035~\277\376Z\255\377\262\374\244\277\007\227\313\234\347\265\237?\336\374\366\335\303\021\221?\260\223Ul\'\245\221?\346\3123>\262\n\245\277\237\2507f\203\223\241\277\311\265H\252T\250\260?\254\352\037#$\373\201\277<#[\247\333#\215?d\207\354\024\217\261\241?R\241}V\340\376\204\277\255#\341W\271\013\231?b\004W\360\020\003\231\277\367\340H\257\354\323\210?\232\336\344\0100di?C\t\276_\210y\255?A\320Kq\307.\210\277\3038\'\022&n\200?*+\377\272\320\345\210?\003\267\036 \300k\227?\332\305\222D\277N\252\277n\334X\014\373\226\211\277\334c\332\030\352\231\240?\027\255\314);\334\243\277\211\016\225\007h\251L\277Q\276u\005\250\227\202?\035\376\225\363\227\246\243?_\237i$j\353\247?R\207\177R\231\324\217?\232\320z\261]\305\201\277%@\035\364D\216w?\334/ -.\213\212?\345\276\315\311(\"\231\277\221W\304\t|\340\246?j\251!I\307\327\201?\235\312\374\262\232\377\246\2770\347\313k\"\274\244?\262\214LA0\247y?\002\355\213\247\305\260\255?\270G\3608\245\271\220?\362r\212\356V\037Z\277\256!}\002D\233u?2U\303\215z\331\233?F`\225\323\352 \243?M\000\337\034\2279\225?\241+-\375-\374\256\277\310\247\244\247\370Zh?\201_\014\255\232\\\245?\341\033\306\201\260\203}\277\036\232\230\177\013\352\242\277\336 \260+\223\005\223?\257po\327{\214\234?\202\206\006{vm\251?\350D\"7:\034\254?\344m\211\2027\251\245\277\347\374\276\306\310n\207\2777B\3777\010\320\233?YdW4\177\307\265\277\'\366\211i\312A\225\277x.\010\274\376\352\236?\304:]/\260;[?\301\213\371\344!\206\177?\330#I\032 \364s?\365E\221\241\242k\230?}\230_\3739m\204?l)Km\334t\241?\231J\334\2661n\250?C\332\345\254f\325\241?\370\312\366\000a\320\207??uN\341x\246\226?\000\013a\201$\366\252?v\345\302g<(\220?\337\275\'\377($X?\316*,\353\020\225\241\277\362\317\007)J\322\242?d\365\3415\274\024\217?\320hM!\307>g\277D\'t,)V\215\277\367\r5\322\236\007\233?\247y/\r\257\343\263\277\332\341\361\345\354\272\263?b\006\014\215\205\363\254?{_\265b\032\256\227?\036\034\313?#\246\224?,a\022\323*\237\202?\035r\177j\306\346\247?\377m\356fH@\235?\t\005\235\367\234G\217\277\320\362F*\257\274\271\277#>$:\323\235\236?\347\326\001\226\260\304\210?\210\242k\037%\210x?\306\262^\341d\350\234?\211\312\nn9\321\242?oR\032/\262\244\221?\336\207\356\037,\337\216\277\031\363\226RgS\223\277\302\351Ch\033\267l\277\202\035\256\276\202\200y\277V\026}\354\313%\235?\272\206:(8\'\242?7J\221\216\010L\203\277\344\003\223\377\357\246\210\277\324\353\360\271\0163\240?1J\n\013r@\252?\2406\332\014\230\t\232?k\271\301\275#D\242\277\005\246\025\327\337\257E?F\302\010+_\341\232?\365#\272q\317\026\241?\336-m\221\344T\235?\300\232\264\275\236\256\263?f\354\014\322\332\324\235?\206\324W\321\313\232\213?\277\314)a\2435\243?\226\025\021er\341\245\277\031\351\2264~\225\233?~6&OO\333\231?\317\231Y\360G\366\233?"
      }
    }
  }
}
node {
  name: "normalize_element/component_130"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "S3\224\250Q\'\270?= \321P\030\236\314?\217\214\034\274\213\204\265?)\216\250\365#j\270?\2504\203t\210\352\274?4\321$\007\245\025\276?c[\241p\277A\255?\243\177Y\014\344z\303?\273\331\177\232\343G\323?\275\250E\223w\315\274?\005\212\300\247%\025\270?\274\023\261]\341\252\305?\023P\340Q\356t\306?y\375\247\355\357\004\274?\017F\325w\312_\303?G\032\036\363\350\243\316?\225\020#\2719k\276?\264\305\344\366\223\275\304?\267\t\260\3650\247\276?\264?\200\247\361\024\303?\'\006\343\010\233\177\266?\273\016\344\277\221W\266?\326\036G\212\000[\301?\302b2\'\370\276\264?M\204T$;C\267?\300\375A\243\302x\261?\222\023#\324\3276\272?\003\317/\3353\261\266?\363\311\333(\352\000\260?\234\367\372\270\010\\\300?\310\340\276\224\325\202\260?_\375\303\211\364J\276?T.\357\322\317\031\266?\256~\324u\224B\305?F\354i@\352Z\301?\261\227\2674\310.\301?*9\277\022\\\355\265?\016f\302\030Y\376\265?3F\254D\'+\300?\321P\023\345!?\272?\002G\036be\357\310?n\325\323\031\250\344\303?Z\214\323s\177\363\304?\215\026\235\265\246<\256?\254\260b\2669\325\265?\222S\030\264\300\271\300?0\242\374\303\347\345\266?\204\373f:\362B\260?JLs\322\313\215\261?\2530v\365<\225\276?\257\006\327\3055\312\324?\334h|6\3358\315?\205\035\\\300\037\214\321?&\035\231\322\360I\325?#\005\344\205Sj\272?\226`\3078\254\224\263?\215:\325\202`\323\264?\246\366R\023\245\006\232?\262\223\357\211\335\215\273?\370\304?\016x\320\253?:\002\305\203\276\230\301?9k/#n.\310?\201\337\245%m\342\302?Z\217\220\273\347\304\264?D\377_\320\235\273\303?\032\016\360I\314X\250?kM(\201#:\302?k7H(\200\231\304?\020\020\304`\233\340\302?\317\034>[\232\352\301?\203%\373@\"\010\300?\226\326?\205\2549\271?W\352\240\345U\n\324?)Um\372]\237\302?x\306\010\362\375\036\251?\020F\3320\204\210\323?:\313\326A\370,\276?\317/\233\027_\350\272?\323\275#jo\336\271?2\235E\013\252\317\323?|\0257s\352\270\306?M8\245\320:\251\304?\304\360\033\243\230\343\310?\n\231\022\346\3117\307?\243\256\321L\331\344\276?WI\250<a\031\305?\370(L\2551\307\264?\337\372\307z\036\247\307?\253\244>^\2022\272?z\232\376\262\234\240\333?\253W\032\303_\375\313?\'2\231Hn\257\304?\3478p4k\334\314?\036\321#\227\026\255\300?\257\205\230\314*L\267?\033\210\244\227\312\273\267?\'g`\230\327\007\233?\020\222\257K\'\256\317?\303vgU\232\000\314?\270\r3\314\272\023\306?C\2775\376\3442\312?\357H\326\220\241+\261?\277\2058\200\305t\307?\352On\035\024{\260?\375\333jx\250\335\306?\325\215\034\216S\031\273?\245\030*Cx[\272?\222\251\212\302\221t\327?\330v\301}p\000\264?\366\352\215\2416\206\266?\330(\341\305\237\201\313?\306\305\310\307+f\277?\251Az\205ch\267?.4\n[Iq\314?(\005\\\336\274;\274?\3147\301\210\224\036\263?rRV\333f\r\304?h\3437n\371\224\300?\017~\r\201V2\302?#w\260|\230\350\307?\317\337\223m1\026\311?\302\301\016\376\246y\272?uz\362q\354\'\252?M>\277\355\336Q\324?\232\006\202V\031\363\273?\276\252\350L0U\275?\353\272\314\275{\230\300?\372\375\322\n\">\277?Lhy\273\261b\275?\376\213\247\353w\313\310?\205\244\276HB\204\271?\242ie\317Yw\274?O\376!\017\332\261\262?\211\275\340k\271G\300?\274\200\035S\005\220\273?\0300\256\334\376\341\313?\'\233\354K\250sd?\373\353\364\007\363\354\272?J\322\322h\264-\331?\3435m\316\332P\272?Bn\022\305\334\234\304?^Q\2573<x\305?\314(\233\024\0246\306?5]p\202F[\314?\237\355\224\270\325\306\267?\257\016CU\223\372\263?\270s{\370\033\265\255?\327\360s\312C)\303?\n\301[4%X\300?\005\001K\021\215l\311?\014\330\2318u\302\264?\200\003y\307@\326\302?\035\343\241\'\031\304\315?\220G\214x\224E\276?\317p=\351\310:\310?\320\312\3051\365g\326?\273\0326P4]\302?\302V\340\226U9\302?\260\302j\202a\246\270?!~\027\031\221\346\275?T<\347\324\271\225\250?\255.\017\3508v\277?\361jw\027A\306\307?N\206\253O\256\223\320?n\000)\366?\234\300?\266\300X\276\262{\274?\264\233b\323\037\241\272?!@\036\253\250\202\274?4\271\205\237\0313\302?\272O\332\220\211\330\271?gMkTY\364\320?Qz\203\210\004n\331?7X\337\220\253\260\270?\244\241\244\222\312l\303?N\271\035u\317\025\263?\357\327\215\014\254\302\312?5\244\214\343\200\220\304?\204\024*\242\240\300\277?\004\255S\364\246s\274?L\252~\361\201\247\272?z\214\314\005)\326\240?\336r\026r|\337\324?\037\300\231\315 \024\272? ;&\215\374:\313?,\340\301\366c\370\271?\004\264c\331\202\324\313?\377i\177t\245v\301?\322\362M\344\223\337\260?:\221\247\177%\344\272?\272\t.\276\267\325\253?q|\340o#\001\266?\031/\006\2447\373\307?}>\021^\227n\266?\022\216\235\023\"\260\312?"
      }
    }
  }
}
node {
  name: "normalize_element/component_131"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "\375\355\345P\034\306\236?\234u5\225\037\232d\277\004\243\2209\326\222\226?a\036b\036Z\255\260?\212\237\020K\024k\230?\267\034\207x&_y?\014\266\343\026\213\220\202?\036,\323\227\364\343\240?&\357\007/\006~\263\277\364\317/\361\027\030\221?\013\230\300\255\273y\226?:\340\205pv\262n?[\277\003}\316O\234\277\221\334\275\203o\377\231\277\000\256s\362sZ\231?\234\354\350}\270\353\260?\024\244Y\246M?\247?\351r\035\277\304\023\246\277\260DL\373yb\204\277\352\343\324\340\023q\241?-\030/\362\277P\260\277\320\273\327g\323\263\240?6\301\327\332rc\221\277<\277\334\2629\212\230?V\2001SA\342\202\277\205\227\243q\357\264\235?\037\246\311\001\305\014\254?\257\274\232\362\327\032\234?\2048\346\247\376b\236\277\314\264\266V\237\236\233?\233\266r;\243\311\242?\376\330O\277>L\241?]I\227\243l6\221?v\226V\314\323|\213\277\376\276\337e\017\177\250?~5\225\262\375E\203\277\034\221\367\3032\252\262?\024\2154?\236`\230?\030\337\\k\013\251\230\277*\006;\n\177\242\245?\215>c\202\301\005~\277\032{\032#\036\370\234?\214\360u\240\356\006\243?\246a:\245jX\241\2773\324\n\316>a\253\277\315\257\026:\327y\237?]v\023ra\201\234?,\235\344N\266o\240?\240\025\004\316\3232\236?]\027\312\376\203\214c\277(f\t\247\017\241\271\277D\'e\001\374\033\240?\371\006.\250\322\303\236?\354\3460\377\353\323\303\277\242\301\032%\267?\254\277\334\371\215\225\351\256\232?M\026\001\222\014\340\237?w\213lYQ\222\204\277\336\226\031Mfpo\277\363\334E\017\261\376\247\277Vj\310\010@\215\225\277\361\226\244e\266\301\246?&\272\236P\236e\221?\270\321\351A\215\267\257?jU\212\236\rY\220?|\241\374\264\2748r\277\303X\026\264\337\306u?}\033o\346\350\325\245?\244\036\220\356a\333\256?Xr\207\340\307\267\220?}0w\315\256\362\231?rPU\260\254\205p\277jt N\324\220\241?\351T\016:\334\237\227?yL\276\210\237\307|\277\007\232\004\254\253\273\244\277B\277=o-\n\240?\371R\003\303ui\220?j\303k\333S\031\220?7`\343<\224O\243\277\036\311\0322t\245\240\277\210\376\001\275\r=\261?\004\374nH\020\237\205\277C\244\251\025\333\341\215?\357\264\220\333\212X\240?\277\025+\230h\370\205\277\205\261\314\365\222\323\230?\217iER\r&\206\2777Qq:\316\017\211?\316\306)\276\312ok?+O\336\317Be\256?R\247\260\020%s\207\277\307\016\324pd\372\202?\307\327\224\347\236\316\215?\367/\362\255m\\\221?\026\002\273\305\274\301\250\277\340\224\301j\217\213\230\277\353\265\265\222\021\250\236?M\341\023{\000<\244\277\2761%\016\260\301\210?:K\027\002\203\033\206?\227G\234\355\210E\246?\202\020\325\003\002w\236?\252y8\310\276@\215?\317\357z\267\031qp\277>On\241L\037y?ia\276\330U*\213?\364\256\034O;d\240\277fV\3018P\221\245?V\256R\242ne\202?\016\337\362\363\007L\245\277#\361\275\202\336b\246?\374\203{w\301f\200?\325\332;p\274\245\254?\314\247@\306\331\375\223?\314\216\277z\375\305s?\332H\220L\262\316s?\203V\266\310\243?\227?\227\201\351\005\266\202\240?\030\331\233\006\257\327\224?/i\032\201i\262\261\27761\241\245\322\037w?K\217K\301\277\255\240?I9\305\316\007\220\265\2774\322i\025\261\023\252\277\276\252/\"\274\003\225?\266*\027\227\233\211\226?\022\343\375\004\2148\251?\247(9U.<\261?&$\365E\022\"\243\277=\231\347\327\302k\200\277\265\354\317\231BT\232?\010\347\232\234\266S\265\277\325\241\325\364\231\346\207\277\206\032\343\225\264z\234?\317\232W)\310\305T\277\202\240\253\306u\000\222?x\223zw\255\202m?\343\211:\"\310\t\237?\363:\226\002\310\214\200?\250S\266\371\223\271\242?\362tN\266\370I\252?\312j\326\363\027u\242?\310w\262f\'-s?0h\000\363\271\250\224?~H\324\030h\317\251?\316\364a\251mD\221?\017\315#\034\0065t?~`\202\253 ,\240\277\023-7 [\371\242?\213\242\024h\010\253\213?\242,\261o}\021Z\277\017F\252\367m\353k?\353\314\351$\356\300\233?\261\312n.J\305\265\277m\333\360\356\332\273\266?*\262aC\363\335\253?\240:\327\251R\260\231?H\2109\333\270\322\216?\217\227.\367\3334\210?\231\350\264\355\002\305\256?b\221\207\007\222L\234?\356\3756Y\335\311\250\277\267\203\343\302\031\255\263\277\237m&\300_\265\216?\350c\275\237\272\274\210?\2135\304\307\023\200\204?\005\3668\326<|\234?&\372\325LY\256\244?\232>W5\352\034y?\363\231\274f\221\244~\277cu \365\033I\205\277\246\260\'\301\350\340{\277A\333\244\201\243\re\277\376\006\210\252\341 \234?\177?F\212\022>\241?\024Nc_\330\270\203\277\316Niq\204\024\211\2774m\302g2\266\241?M\377\234\306\031j\250?2\020W\020\373\353\232?\246B\251\256]\211\241\277\303\326\227e\202\363o?N\205)\336\211\330\230?\312 \225g\000\235\235?\223\235V\210I\343\232?\344\251\351\250\332V\261?a\2240k\023;\235?\024`\365\323\301\362\220?\257\033\344e\265\017\225?\372\261\017\323:\201\241\2773\244d\033\263J\233?\030$W\223\242\363\232?\241!\014\321[\033\212?"
      }
    }
  }
}
node {
  name: "normalize_element/component_132"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "\3714\013\332\002G\236?P]B\003\206\354q\277c\262\377\324T#\217?;\254\r\241\214\351\257?\330\256\376?\266{\235?\233<5\374F\362\225?N\220\231\212\333\010\212?5\334\231l\260.\230?T\372\343\237\024\213\261\277\342\253\362D\335\365\226?\r\300H`Zq\227??\351\300I\005\333\201?8,\3474\006\373\223\277]T\220A\034[\242\277\\\264\351\3205\010\231?\242\351i\343/\375\254?\t\310{\373\221\'\243?\017\230x!\314\326\230\277\325\213\256\306j\327\212\277\3671L\221o\373\240?\022\305\327\343-s\250\277TmS\026g\007\241?\314\021\227\273M\272\242\277M\337\361A]\021\227?U\334\3027p\256q\277\324\237-\202\'v\224?\266\177\310\317\004\222\251?\365\241\\1[f\240?\3720\231/\321N\241\277\254\0138~\272\027\234?\204\227\217\215\010\022\222?\335\007\360{s6\241?\203\024S!\322\372\223?ph\362\026\r\356\212\277z\275\274\177z\323\245?\261\004\010\325\274\231\203\277\356\315\031\230\257\247\262?\232\241\201\360R\376\230?\372\313\027I\365|\231\277\\\227uZ\022\373\242?_\252\343B/\355}\277C0\242HR-\235?\341F\336\372/^\241?j\273*\314R\035\236\277\204\232\252Fr\243\213\277\302/\203\236\276\177\240?\376\307\002Ya\220\236?G\367\331\354;\313\242?\033\'l\334\356\'\231?\275Xs\333\031\001`?#\3726v\351\\\232\277\263I\222\250\226\373\236?\365\n\307\320\n<\234?\275\033}_k\025\303\277X\212\204\271T\332\246\277\260\014\223q\330\362\230?\321\370g\0018\310\242?\206Emd\034\370\210\277\203`\360\221\026,r\277\227\360\344\320\253\314\245\277zD\250\371\372\277\220\277\000\032u\022\3515\247?\027\275\215\254\200k\200?-\000+_N\013\237?\347I/\3600{\220?i\256\330\001\005N>\277\350\n!\255R\366\215?\016Ku\224\222\004\246?\261\tO9=\'\254?~\331\357\351\347\326\220?\325\211\323bS[\236?\025p\324\254a\366*\277\333\320\317\377ks\237?b29\333\372\356\222?\331\240\236ZW\256r\277(\002\334\371l\207\244\277\240\235\272\217/\343\236?\317\031V\223\325\344\221?4v\236\205\370\030\220?\270\340\213}iT\243\277^\272\225\232GB\236\277Y>\242t\257\264\261?A%o\377\030\332\207\277\252%\253\217x\223\220?\n5W\216\017\001\235?\252\3678\371K\220\213\277S_\306\257\200\213\227?\237\332\2755\340\216p?\354>\225\rJ\034\212?\017\0251\214\276\371\220?\331\027\255\374bQ\255?9\243g,\372@{\277E\325\216fU\031\214?/8%N^\314\221?3\271 t3P\203?/p\300\201\245\307\244\277\320\261I\237\322\230\241\277\007\256\270Y8 \232?(\016\354m=\207\243\277\273\017\221\261\022\247\232?A@\320g\306\366\210?\353U9\364\343\035\253?v\313\231\343\230\tw?\241%\215\246\272M\216?\240\332\"a\306\261a?\221\301\214T\330?\205?W\325\235\267I\366\220?\314\014\251\017\025\304\231\277\310\343K\243\'7\244?\305\2030.\212[\203?\016\034\315\032\207\275\243\277W\321\233a\325\346\243?&\315\320\214\006o\202?\234\335\205\246\037\346\250?L\212M3\366\210\227?\321\215\350R\347G\207?U[\204>e\360h?(k\212\266\031]\222?;HsW\273\225\231?>\376\332\023\207\340\224?\361V\247\024\205\247\262\277\274\207\273\342\370\215\212?N\207 \227\320\016\226?\266\234\244)\235\260\300\277\322\032\365\243\360\277\250\277\230l\215\037b7\231?O\344[\265\361{\211?\n\223&\001\021\262\253?\231;\310%m.\264?\026L\374Q\324\231\237\277vM\0302\366\334t\277Y&\347\267\364\327\227?;\243\013\274#\373\263\277!Vu\022\356\356q?4.\r\335\233\310\230?B\350\274\240g\256a\277\357+\251\357\t\315\236?\031\201\343\370\302\340Q?\255@\326N\362\365\241?\254\000GQS\n{?\323\340t\232\036w\254?`\"K\327-\261\246?l\234a+\347\331\244?\227\355\243P\237\257,?f:\t\337\332\r\225?\355\243At\202\342\246?P\3447\357y\252\223?\013_\200\371;Fw?;W\345Y\201\325\234\277\341K\377\227\r`\242?\254\201\355-\323\231\211?\270\257\233\003\030WK?\036\262\210.\226\214\237?\304\251\275%\214\250\233?\2035\330\030\227\321\264\277\202g\364\003T\301\272?t\344K\037\357\222\251?\353\020t\276\034\231\236?@n\3045l\313\204?z~\312\221\313\010\222?\260x\020Y\251B\264?5H\361\214\336\362\226?\254\205\311\274\244\235\274\277\"d\254x\033\202\250\277\351WB\220\346<a\277\001\2719\237~s\206?hD\025pbW\215?k\206\000R.\234\234?\001\224\3065,\260\246?\354\247\023\221\340\224q\277*?\004\260\\\312\200?\331\026\257\303\342\201B\277\356U\022v\335\235m\277\313\310j\004,\003H?\211r\343\302\363\345\232?\016\024\345\303\315X\237?\237f\256\367\016\303~\277\306HJ\010\303q\206\277 o\003\210\314\246\242?\361HTY(Z\247?\324u_\320m\202\241?\206/\203\231\005\306\244\277\373\016\200\343+\264\205?F\r\362\357=\240\223?\251\034\254b\236S\232?\270\306\251\316Q\344\230?\023\\\n\032\3034\253?\355\026N\300\031v\234?\222\225\307\351\327\025\226?\032{;1\007\033`\277\033\251\037\035\034\301\227\277\277^6A\241\214\233?-\311Zs\342\323\233?V0\374p(-\224?"
      }
    }
  }
}
node {
  name: "normalize_element/component_133"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "u\037\362)\017\361\236?v;\242\022<]d\277\361\220H,@\023\201?\217\201\366\234T1\256?\231\377\004\325\016\230\241?\023nq\016Pz\234?\020\220K\366\261}\222?\030\304\373\002^\214\221?V\025T3\357a\257\277\270\005Ku\001/\237?\361\3109`@\367\227?x\351B\2067f\217?\307\260 S\222\003\203\277\030(\301\314\213\324\247\277\310\315\316t??\227?\200\303\305\003*\031\247?,\nD\032\330\324\236?\240\225\3228v~\233\277\352ZKf\224\345\216\277\221\004+\230B1\241?\205\365Q\326\007C\235\277\334c\303|tH\241?\366D\370\223\010\277\251\277\036\301\300\205\322\235\225?\t\024\363\2443\315g?U\264\244iqB\210?l~\020\212, \260?\331\365\240\332\2776\242?\257\306\002\3645\252\240\277\031\241Q\032g\\\235?\347\\\265+\'\263\207?\027\375n\250\202\313\240?\002\037?\370\251Z\227?\327\307\277\2469?~\277:/*\266=\322\242?{\262<\361\227t~\277\306E $,\246\262?u\267\275m>_\231?\321\204t\030\226\266\227\277^P\024%w\221\237?\330Nx/\025 |\277Xs_R\245\373\235?j>\031\251\030c\235?nW\217\313\035\325\231\277\241\301ik\213\005\241?\373g\r\253f@\241?%\322k\360\024+\240?^\254\373\t_F\245?:k\326j&\027\223?\226h^Hfyw?\003\243\213\200\034*\243\277P\273\210\204)\251\235?.-\270Y\233J\233?:\370\\\202`I\302\277\3069$\224BI\240\277\246\310\364`_\246\224?\306kz*\211\347\244?\0015\340\354\t$\202\277u\224\372\347\246#q\277B\031\262\323r\024\242\277m\345\302\324\330V\206\277\3345`\021u\177\247?\337\261\034D\022\215S\277TkM2\363\226\262?\321_\253\256\212\n\221?\310\221\205\352\021c|\277)\335\206\346t8\232?\230\026<\037z_\230?\367E\356[@w\251?,\316K\327\251x\221?\302\214\332\021\017\247\241?tY\274\300\373\226p?\235\267\206Y5\366\233?\251\027\370a\357\213\214?\324\233\310\001\370\375D\277\003T\376\326\312[\244\277Dp\250T\223$\235?\003\003\250\254\035\372\223?\207\313\'\264w\t\222? \207m\375\207\003\244\277\261\247\212\232\311\346\231\277\307zG\346\301\370\261?\270\231\213q^\231\210\277\031\226\014\356q \224?Q\300\275\005\356M\231?\216\244D\025u\033\221\277l\036>\353E\255\227?V\343\242\3435r\221?\352\203\360^q\025\214?C\312\226\177\t\351\224?\363;\217\202\216\363\252?\243\325Y\305\314RS?\342\277\035\001\014f\224?B\030\332a\225\320\224?^}j,\311Pa?\340\372\236\373\354,\236\277n)\323\247\326t\244\277U6N8+\n\226?\\gF\266(\360\241\277\264s-i\253\343\227?\216\335J\036k \213?\342F9\264\242/\260?\010\232\343\235\302\230T\277\022\004\324CP\017\221?\237\307t]\0024\201?\350\255\037:\273\267\221?\341\3073\220\260m\220?\364R(@Q/\240\277\252\310S\034(l\241?C,\322,\0375\205?\024z\266t\360?\242\277\361\240\227Y\235\377\237?\240\220I\270#\253q?\307oD\326\236\202\244?2M4\357\010\014\233?1\267\321\271\010w\222?\370\027\324\306\367\026}\277*y\2579\213\007\215?>1\260cc+\222?\266\001\000I\326\266\224?\023\343\222i\2108\263\277\023\256\003\304}\024\230?mM{\311Mt\210?W\014\255\007\371\304\302\277\234s\033\315\304\206\247\277\264\2105Pq\000\237?\274\227\n\020Vze?}\343,k\351q\256?$dv\317\347\307\261?T\323\351\3218\372\230\277k\252\010\346\321Uf\277Q\007|\365&\303\225?\362m\345\030\325\021\262\277\234\2034Q\356\270\215?)\232tL\367\351\225?\313\247\374\250\334\375g\277\004\000\350\254&\272\246?\267\276$\242S\350`\277\365I\024x,X\243?\364uA\306\241Sw?\316\326\250$>\271\260?Z|\313\033\256u\241?\307\262r\305K\213\245?\205\365\017\2725\375Z?\344\034\177\346\317^\227?\355\260\010LG\003\243?\352\306\024\334\252L\226?\312\250\251\232]Mw?P\227_\342\234\314\230\277\025a\341)\206\331\241?g\013k\327B\230\210?\232\346\241\337\214\324r?\267\344~\250\260)\255?\364\010\025\354$\372\233?\203\244\2339.\'\264\277\256\203\331\275B\212\277?I\272a9\024\316\246?\223F\3052\017\366\242?K\234&}kqw?i\327\243\301\204\t\231?\177\242k\214\301\266\270?T\332\345\322-x\217?\007\306\202A \267\265\277\362\2355\313\247\277\215\277\266\032\271>\021c\226?d\265O\200\216z\203?\277\300\021|\212\036\223?S\345\210p$\264\235?\303\017\255\231\2452\250?\332\225\027\022\220,\221?\262\216s3\215:\217?\221z\345\000\025\034k?\303[W4\354\343`\277\356\030\373\353EOr?U\305\2043 \304\231?\323\365\375\001\372p\233?\331\217\034\002\252,\214\277P\272\265\313\005\316\200\277\252\023\303\032\326p\243?o\034\324%\263\337\250?N]6\220\347`\247?\324\237\305\236\262\244\244\277\252n\303b\263\247\221?\250\335^\273|7\212?=\367\232\365\224b\230?\350\317\017\007/\030\227?/\375\336\265j(\243?(G\265\023\033\257\233?\346\321\023\352w\316\233?\317vp\243\r/\230\277\341\007u\376\336\207\202\277\313oRJh\310\233?\375\332\270\315m%\234?\300\302\332\374\345\261\213?"
      }
    }
  }
}
node {
  name: "normalize_element/component_134"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "\360\027\377\263\3609\240?%w\330Df.P?\244\021\371O\263\027\\?\023\265q\032[5\254?\206\031\013$\3276\245?\240\007I/\002\024\235?\355\203\357\247\r!\231?\027\350\037\3540\000\216?\345\253\226\324\006\260\252\277i\350\331\213\354s\244?1\344\352]BY\230?\317T\t\310\367\302\227?\216\305d\341SOb?\255vz\311\362\272\253\277\245\331\372\361\260\263\225?uz9Gx\326\240?\322R\300\020N\030\232?\334A\304\204\323\255\233\277\334>\312\331R?\217\277\021\372\246\244\337\242\241?\376c\034\201J%\204\277\227\316\342 |\203\241?\\\r\356\246\022\240\252\277d\350;l\340\026\225?\267\3525\233\231)\211?\336\033\241qq\354z?G\263\240\232\014s\262?[\222\202\365\037\234\245?\372\214\215>\273\203\227\277]HM\334\246O\237?p>\037\254\231\221\206?V\354\203\272\265=\240?6p\206i\177j\233?z\243m44)[\277\341\370\2064\275\323\237?\366\204H-d\023p\277\226*j\2237~\262?U\367+\021f\342\231?n\024\301N\235\206\223\2775\020\276<\014\311\231?m\323m\303\007\372t\277\230\320n>\2779\240?\320\265K\365F\250\231?n|\014\247\343i\225\277\031\270\023W[R\262?\253S\314\336\245\026\242?{\312K\255\340\177\241?\000\000\3328]t\247?\"\202`D\221\244\212?u\213\327\364T\022\203?\346\365\251(3\345\240\277\350\'\256\300\026\017\235?\311d1\344\352]\240?y\037B\272\252|\301\277\036;\354\341r\214\221\277W\026\255%\342\202\217?\236\026QM(\310\246?\357\366I\203\025\206\204\277\337\351O\224\344\266f\277\022\236\347\207\3053\232\277\013\007=\371\306\240k\277va\321\230<\252\247?\307\3403\242LT{\277\006\246\274\036\230\030\242?\325a\'\352<\222\221?\340\242\276%3\360Y?/\342\371\024\031\200\242?\305%\253H\243\007`\2773\016\002\346\262\265\246?v_\204\337<\213\222?%\255\303\224\362\241\243?\326\346{\035\243\002\204?lMg\345f\321\230?\217\256\300\372\271M\202?\307&\304\037\357\234p?9E\000\235ma\244\277\035e\263\331G]\233?\276\305`QS\303\225?MdI-R0\224?\031\2051\335|\007\245\277\375i\311\001\300S\224\277\346s\005\0233\006\262?\026\254\234\266y\365\207\277\035\177\346\317^M\231?\025\362i\2274\033\225?\231O\261\305\311X\222\277\373\002\037(\\4\231?N\237sp\026\032\235?\002\356\206(\267\321\216?\277\364+\332r\347\225?i\265\307\330\367K\250?s\242\317\332|B\207?B\220\014\004\304\316\233?^\037Jr\310\037\227?U\027F3|/a\277\225\220\320\025\363\023\215\277\274\336r\377\325\006\243\277#\307\037\n;\314\204?\372!\260\036i\003\237\277R`\367\331\245f\217?\221V\245\302\022\356\215?R\200\007\212H\342\260?\004\204bm\204,\204\277\302\351\321\0223\024\224?\277\t\302kPa\210?\245\026\010\n\3250\232?W1\307\270\003\361\211?R\227R\270\232L\242\277\352T\277\363\007\332\237?)w\266\177\031\027\210?\030&2\367\271o\241\277\215\026\247\'\032\016\231?\212\007\236\277,\224l\277\246\373\255[\0147\240?z\277{\216b\225\237?2\246\344\305Wu\231?&Ux#5\345\211\277\020\311\254\270\032\324\210?YP\023\333\257\313\210?\352\211I\340X\025\226?D6\273\256\222\241\262\277W:\345\362\233\231\242?\354\205`\'\205\021|?\227\003Q\270\235D\300\277\037\347h\033\240\260\246\277\323\244\356\254\330\275\240?\245\223\254\220\340\260n\277\271\3275\231r7\257?\021\377\217\227^0\253?\tF\007\037\250%\216\277\251\035Gqc\272M\277\014\006N\353s\013\226?\242\002\355/7\357\256\277`\234\251$s\253\222?\354\364\244\3101\304\223?\355\302t\371\215\261n\277\2061\240\031\357\207\253?:\354\310\325\353\275p\277,\246\244\027M\030\244?\265I\374\2146\207v?\271jH#9u\257?:\037\272z\367\302\230?\226\365mQ\376\237\245?`\002\037\322[{x?\034\272\355\003\017Z\233?\002\300\232\313Y\024\236?\347e\r\021I\212\232?\003yo?\362d}?\347\034\251\257\310^\224\277\037\232:\016\n\352\240?\310N\177\3032\240\210?\n1\023\034\311\253\200?\364(9\200\256\230\261?\261\024\236\327\2454\235?\356aU\333R\251\260\277\377\363\001o\353h\302?\334A\032\205\214\226\243?\020\345,h1\343\246?\371\213\205\223\307\342]?\327\230|X\024\033\240?=\020\313\371q\032\273?\264\345\236\246}\020}?\243\271\324\\\374\332\237\2775\030\377K\r\305\205?\036B<\342\3658\234?\2257\241\277\271\207\200?\266\312-\\?\305\227?\336\224H[\302\305\235?\330lp\030\210B\251?\322\005\275\203\024F\247?\230=\3333\343\036\213?\265\334\205%\237\320k?\335\237\312\352\317\3366?\323\227\371\234(\372\201?\253\317r,1\307\227?b\036\016\037\314~\227?\315%d\006{*\221\277\255$h\202\227\317p\277\3513\000Q\271T\244?\245\nN\226\275\031\253?$\034\367\tG`\254?\005\256Nu\230\224\241\277j\223-\014=\324\225?\376\343}O\2766y?eN\021\214\365\240\227?\346$M\351\204\303\225?\021\021\013p\322\030\227?I=v\335|\237\231?:\225\256\216S\334\237?3J\251\341\341\221\241\277c\034\216t\'T\177?b%5\240\035\361\233?\213\002\274\206\222)\234?\002\231\3206\224`\205?"
      }
    }
  }
}
node {
  name: "normalize_element/component_135"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "\273#\221\355\344\"\241?\2342tB\241\313o?\354\020\353\314\276\244q\277c\260\376\251\232\033\252?\261\231\263\246\310\r\252?\263\201<\007\0131\240?\177\211\207\026*\026\240?l\025/\334\332>\221?\267\236+\216&\276\243\277\014\rJ\354h\211\251?\215}\3238\367\376\230?3\210\271\353?G\240?U\023?$N\267\214?\226\242{\'}Y\254\277@?\271\221\245\033\226?\244\313\216\231\263Z\222?\237&\223P\2034\232?\020\211O\365\274\377\235\277\311\316\277\203\275\216\212\277\2069~\3764\033\241?\034\001\276\326\003\270q?\362\026\323B\205\307\241?PU/,p\223\247\277\365t\"\1778a\225?\371\211\306\204\337 \230?\324|\351{z]x?c\365\247\2122\346\240?\354\312\367$a\363\253?N\311\324\205\241\323h\277I`\321\177\237\t\241?\2516L\365\343}l?\371\n!\323\031\231\237?\327\310\tn\377%\240?\314{\275w\253\031_\277X2\365*\232\035\233?h~\273@\327+-\277F\300N\3250\010\262?e\203^\025.\377\233?\225x\006.\013\375\212\277\003\231\n\342\035\217\226?\235>L\014\023WO\277@\330\025r&\037\242??\335,\235\220O\232?\320EnF\000I\220\277\242\023D\010\210|\264?p\222\213\326\366\033\243??3Ndb\312\243?\340\363\230\210\204\335\250?>\255\264\"\360\333\202?E=|M\232\374\212?\256\244\177\303\360\203\234\277\210\"e\n$\310\235?\304\351\323\023^\316\245?F\253\377\030\337\274\300\2779#\364z\312FT\277\374\005\251~\037\272\212?\320\234\254S\020\374\250?\223\032\223+\340\221\201\277\245?\250I\370\367\\\277uo\013\267\370\353\214\277\301\326\320\306D\\~?\t\260\232w4\277\247?\264)3\262\037\272\204\277\022\306c\307\305\237\246?\334\004TB\364\307\221?\30680\3155KP?\262:\327\317\031S\246?X\361d<\354\263\216\277\r\275\363\373f\261\243?\265\027{v\223\364\223?\245\361\321\003\233J\244?:\363xH\233$\222?\3373\245\004\3431\226?\236\246\355d\022#k?\221,`\002\267\356\202?\260F\311\355\217\336\244\277\247\300\362\265\241A\232?&s\277R|\315\225?=e\036\301\331\"\225?r\375\273>s\326\245\277\t\307\311PWo\213\277\265\034\314L\207\323\261?W\233\200\3302\026\206\277\222\216\313\350\342\227\237?b\227\307\353\330@\220?\017\327I\001\222~\215\277\361\274\354\210W\032\231?\027{\251\204\231I\247?\036d\250v\305\r\221? 5\312S\206\014\234?\247\035}\032\227t\246?\'\341:\255xv\227?\307#y-o\256\241?eh\334\236\227\277\227?I\332\365![\3253\277\302\231\353v\356$w?\025\303\306\326\342<\230\277u\000\006z\217\320b\277U\247.\331\253\241\230\277\273\000\221\0045\n\224?{G(\336Jt\221?\337\316\014\202\221\016\253?\344\'3\260\036\017\261\277\321\256\226\311\335\330\227?\234\235?\1777c\204?\340\275\214*\017G\241?;\360\023\002\0276\242?s\030\260\n\362\270\242\277V:H\035W\002\244?\333\216lX\232.\214?\265c\350\255\301\310\241\277\254&\260\202\335\205\227?\275L\211.\354\214\202\277*\317\313G\243\031\221?\3325T\236\326\363\242?\377O\005\251\002X\240?7\365\366\361\024\225\204?\234)+\210\254.\212?\321`\256\240\304B\204?A\226\373\240\013C\232?2\326\253\206\314.\260\277\203}>A\227\255\251?5\262h\220;\322\200?\230\242xo\356\252\276\277\350\245%\000Fj\246\277\271,\306\303\362\034\234?\323_\335\350\313!e\277\217\240\337\224E\243\252?\037A\003G\210F\252?\036\010\301\221\335XB?x\201\200\037Ow@?\323]\327\004X\261\232?\314\364\035\214pD\250\277O\242\375\306\331\237\222?\0042\224C&A\223?\375\342\330\316\205\376r\277\275\311\360Q\337/\251?7!\r\244\024?i\277?*\242\177\262\304\244?\377\010\303\200%Wy?\336b\023\323dJ\252?\200(!#c_\223?@\260\2312&\263\246?\365D\276\350~\220m?\276/\301\270:Q\240?\324\362u\254a\245\227?]\253\332\301\312\231\240?wC\2600\230M\211?8\002|\255\007p\217\277\254*\323\346:\270\236?6\\o\2217\235\211?\377\374\r\306\307\250\204?\264\204\335\371C\010\262?u\035\233\376\233\000\240?;s\017\t\337\373\221\277:\002\372u\216\036\305?\002-X\010}y\237?]Y\220\320\020:\252?\321u?y\350SX\277\262\201o\370\257<\243?[\303\332R\346j\272?\256\231\332$\317\215Z\277\374\352+\301B\343\224\277\252\251\377\2103zv\277\371\365>\263\366\007\241?\302d\221\303\263F}?/\256\201E/\267\234?G\236m3\352a\233?\337K\0243X\367\251?\356\201N\357\177\323\246?\203a\201.h\301\252?\361\331\2208\221\204\241?q\364\034\204\305Pz?\217\350)h\026E\214?\005\225\315)\274\\\224?(x\257\377\337}\224?\025\023\231\216@\211m\277\256\214>\315faQ?\375\367\333\374\221\262\245?]\216@\204\004\001\252?\\8}.4\206\255?\321\270\325K\n.\261\277\036\342$o\256\321\226?$\374\227\023\320\036A?\001\025\223\331N\313\227?6,\001\211\n\373\224?AG\231w\026i\210?\314\272G\202\345\022\225?\2643Y\227\253\003\240?\314\210pk\211\227\230\277fj\306-\334u\233?\030U\276\033\226\374\233?\325ZL\36707\234?j\275\223\332\201\366\203?"
      }
    }
  }
}
node {
  name: "normalize_element/component_136"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content: "\032\316\334\023\211\341\266?\260\363*\303\234\206\317?!\273\361?\020X\263?\3768>\263Ty\257?\355\371b;T]\274?\'p\377R\205\r\273?\366\257wBY?\250?\362\305\036\247\326\245\301?9\202^\374\220~\320?-\325\024\347\371j\273?#\243\347<\201\265\265?\201\233\275\032=\n\301?2@\225\337\0211\302?\242L\221\346\t\260\273?\0328\271B\314c\300?\003\274o\366\263\312\313?\331$`\360@\317\275?\371a\010)\r\357\302?\302\224\033!\020\243\274?\2374\334\231l\260\301?\321,\231\373\225\342\264?r\307\177\247\347b\265?\276\267z2%p\300?E\264\215\2474N\265?\036\260\013<\200\220\264?:\025\'\371<?\260?\020\2431\244\324o\271?c\302\310\310\342\311\264?\036\241\311r\320-\255?Y;\013\364\351.\276?V\t\2441K\034\261?\335\320s\217\225-\275?\225\254\324\375\255.\265?\032\341\3143\037%\303?U\220qUq\224\300?Z\255\353\316\025\220\300?\361\2743^\343\310\266?^\031\034q=\224\266?\261\236g\247w\325\300?*\\\025\374\304\356\263?E\203\356t\342\020\311?w\220\324\313\272\002\303?\377\024$<\365\326\302?\271\300\321\315\177\301\255?\031r\222\004\346\303\256?b\372L`\264s\300?u\253\274$\233\031\265?\277\023\205&!B\260?x\356\223\\+E\261?\277u5\341\255_\275?0\221\204\335\255\225\323?\354\277\323\006UZ\312?\357\231\265\254\254\201\315?u\302\007S\355\203\322?_a)\341\365\330\265?\313\210f\371\025\306\262?c\231S\t\034w\264?j|\r^G^\236?I\347pk\332\336\270?\224\214\2000\0163\250?K\034# \371\237\301?U\213\365\376 \001\306?\342`\026\252\000\367\301?\021\203w\364\352\\\266?/\375U\304\014\264\302?\314\026\215\330\316\307\244?\263k\243\203\363\276\300?\030nV\003\350\005\304?\310&\214u\220\350\300?|3X\333\216\025\301?\r\343\340e\2258\276?\357\247;Y\256\332\252?\217!\327\270\3042\323?\230\376\355\376\355|\301?\225\345V\316\377\'\250?\213Q`\314Yi\323?\367\371_\026)\200\274?O\343\222nA\362\266?\343\351\256O\255\374\267?\237\332\2755\340N\321?\264\340R\211C\332\304?b(\205KW\310\304?(\302\317}\016\263\307?\210\364\333\327\201s\276?\325\021F\007\262\213\272?\213\202\227\03375\300?eY(\200\3779\262?F\236\245\335H\026\306?\236\337<D\277\220\265?6\213O\265\241\330\331?\212\314\255\'\362X\313?\017[\221\320J\245\302?\032\356\325\'\266\313\312?,baS\252n\277?4A2\357\001R\265?\230(\364Z\006%\263?\301\177%\035\006o\237?\317\256\352\310k\307\315?q\'\377\375\243[\307?\332\340\036-\311\337\302?b\340\370[\264\240\307?\247\004s\335\\H\260?4\324|#\'D\306?\220\024T\376\374\221\257?9\316\204^3\004\305?\232v\231\260\351\200\272?\242\026\205\210\224\231\267?H\210\362\005-\244\325?nC\035:c\266\263?\233~jk-\024\262?\321\275\366\350\347\257\312?\214\353\022\347>\277\274?\375\2614\343y\230\265?\374\354\\%\023\210\313?\031\025\207\037\3333\273?wt\204U\272\220\263?\2775\364r\177\305\302?\032A\213\356\036u\277?\277m}\303\nX\300?u\342\245\255\247\\\306?\224\n]\233#q\306?8\361\177\216)4\272?\212PL\256\307\034\257?,\267=\014p\353\322?)\016\271|\230\373\273?\371\036\223d\3247\276?pV`\242#4\300?#\211\344\177\200\242\263?\"\233\365sT\177\275?\3624\204Vl\373\304?\354\031\367#\233\344\270?\271\177\t5s\343\273?C\301\'\376q\300\255?\3102\2270\247\277\276?\225qQ\002\242-\261?\273\274nN{\303\311?g\251\023\325\375\221y?\277A\270X\n.\267? \375@\003\373Y\327?\005\210\0326\336^\266?8\345X~\343\"\305?G2gZ\273\235\304?Z0!\201g\304\304?+o\337T\270f\312?\016\210\025\020\210\307\274?\234p\366\241\347#\265?\340\212\267\3322\374\255?\372\353\277\025#g\301?v\353\365!\201\234\275?\371\302x\216Gw\310?g\251\023\325\375\021\263?x\2155\332\254\345\301?\3348H\3319\305\313?e\216\345]\365\000\277?\'\004\330km\346\306?\3071\377\331p\247\325?]Rn\010y\360\300?.Ta\340w[\301?\375\353h^\006\312\267?\256qhWBs\265?\254\234\322\316$B\250?\225N8|Q\211\300?\360\3542\311\266v\300?+J\377N7)\316?\000\302\352<\350\341\275?L-h\025\216\004\276?_&U\236\352\327\266?\377s^\204\245\021\276?\2761/\200#S\301? =\025\325\372Y\271?\277\355\263\021\"u\303?\013\237T\313;\306\324?\222)u\202c\272\267?9~\255\355\033\017\301?\240\02752\244\027\262?\014\276T_\242i\311?\266>BS\312\271\300?G2%>\351W\263?7\230K\1776\277\271?\336\236i\207\224&\272?1O\230D~|\241?\347\244\307T\231\340\321?\3516\241C\362+\270?\002i\200\204\3012\311?\322\222\272\251\360\203\272?\316r/\351U\310\312??7\004,\221B\277?\215\245\010\243k<\260?\024\204\237\366cl\300?\316\177\010\244\326\221\251?\354F;H1\273\264?\207!(m`a\307?\227\227\311^Yc\264?ZabB\270\201\311?"
      }
    }
  }
}
node {
  name: "normalize_element/component_137"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 194
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 194
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "TensorSliceDataset"
  op: "TensorSliceDataset"
  input: "normalize_element/component_0"
  input: "normalize_element/component_1"
  input: "normalize_element/component_2"
  input: "normalize_element/component_3"
  input: "normalize_element/component_4"
  input: "normalize_element/component_5"
  input: "normalize_element/component_6"
  input: "normalize_element/component_7"
  input: "normalize_element/component_8"
  input: "normalize_element/component_9"
  input: "normalize_element/component_10"
  input: "normalize_element/component_11"
  input: "normalize_element/component_12"
  input: "normalize_element/component_13"
  input: "normalize_element/component_14"
  input: "normalize_element/component_15"
  input: "normalize_element/component_16"
  input: "normalize_element/component_17"
  input: "normalize_element/component_18"
  input: "normalize_element/component_19"
  input: "normalize_element/component_20"
  input: "normalize_element/component_21"
  input: "normalize_element/component_22"
  input: "normalize_element/component_23"
  input: "normalize_element/component_24"
  input: "normalize_element/component_25"
  input: "normalize_element/component_26"
  input: "normalize_element/component_27"
  input: "normalize_element/component_28"
  input: "normalize_element/component_29"
  input: "normalize_element/component_30"
  input: "normalize_element/component_31"
  input: "normalize_element/component_32"
  input: "normalize_element/component_33"
  input: "normalize_element/component_34"
  input: "normalize_element/component_35"
  input: "normalize_element/component_36"
  input: "normalize_element/component_37"
  input: "normalize_element/component_38"
  input: "normalize_element/component_39"
  input: "normalize_element/component_40"
  input: "normalize_element/component_41"
  input: "normalize_element/component_42"
  input: "normalize_element/component_43"
  input: "normalize_element/component_44"
  input: "normalize_element/component_45"
  input: "normalize_element/component_46"
  input: "normalize_element/component_47"
  input: "normalize_element/component_48"
  input: "normalize_element/component_49"
  input: "normalize_element/component_50"
  input: "normalize_element/component_51"
  input: "normalize_element/component_52"
  input: "normalize_element/component_53"
  input: "normalize_element/component_54"
  input: "normalize_element/component_55"
  input: "normalize_element/component_56"
  input: "normalize_element/component_57"
  input: "normalize_element/component_58"
  input: "normalize_element/component_59"
  input: "normalize_element/component_60"
  input: "normalize_element/component_61"
  input: "normalize_element/component_62"
  input: "normalize_element/component_63"
  input: "normalize_element/component_64"
  input: "normalize_element/component_65"
  input: "normalize_element/component_66"
  input: "normalize_element/component_67"
  input: "normalize_element/component_68"
  input: "normalize_element/component_69"
  input: "normalize_element/component_70"
  input: "normalize_element/component_71"
  input: "normalize_element/component_72"
  input: "normalize_element/component_73"
  input: "normalize_element/component_74"
  input: "normalize_element/component_75"
  input: "normalize_element/component_76"
  input: "normalize_element/component_77"
  input: "normalize_element/component_78"
  input: "normalize_element/component_79"
  input: "normalize_element/component_80"
  input: "normalize_element/component_81"
  input: "normalize_element/component_82"
  input: "normalize_element/component_83"
  input: "normalize_element/component_84"
  input: "normalize_element/component_85"
  input: "normalize_element/component_86"
  input: "normalize_element/component_87"
  input: "normalize_element/component_88"
  input: "normalize_element/component_89"
  input: "normalize_element/component_90"
  input: "normalize_element/component_91"
  input: "normalize_element/component_92"
  input: "normalize_element/component_93"
  input: "normalize_element/component_94"
  input: "normalize_element/component_95"
  input: "normalize_element/component_96"
  input: "normalize_element/component_97"
  input: "normalize_element/component_98"
  input: "normalize_element/component_99"
  input: "normalize_element/component_100"
  input: "normalize_element/component_101"
  input: "normalize_element/component_102"
  input: "normalize_element/component_103"
  input: "normalize_element/component_104"
  input: "normalize_element/component_105"
  input: "normalize_element/component_106"
  input: "normalize_element/component_107"
  input: "normalize_element/component_108"
  input: "normalize_element/component_109"
  input: "normalize_element/component_110"
  input: "normalize_element/component_111"
  input: "normalize_element/component_112"
  input: "normalize_element/component_113"
  input: "normalize_element/component_114"
  input: "normalize_element/component_115"
  input: "normalize_element/component_116"
  input: "normalize_element/component_117"
  input: "normalize_element/component_118"
  input: "normalize_element/component_119"
  input: "normalize_element/component_120"
  input: "normalize_element/component_121"
  input: "normalize_element/component_122"
  input: "normalize_element/component_123"
  input: "normalize_element/component_124"
  input: "normalize_element/component_125"
  input: "normalize_element/component_126"
  input: "normalize_element/component_127"
  input: "normalize_element/component_128"
  input: "normalize_element/component_129"
  input: "normalize_element/component_130"
  input: "normalize_element/component_131"
  input: "normalize_element/component_132"
  input: "normalize_element/component_133"
  input: "normalize_element/component_134"
  input: "normalize_element/component_135"
  input: "normalize_element/component_136"
  input: "normalize_element/component_137"
  device: "/device:CPU:0"
  attr {
    key: "Toutput_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT32
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "buffer_size"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 100
      }
    }
  }
}
node {
  name: "seed"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "seed2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "ShuffleDataset"
  op: "ShuffleDataset"
  input: "TensorSliceDataset"
  input: "buffer_size"
  input: "seed"
  input: "seed2"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT32
      }
    }
  }
  attr {
    key: "reshuffle_each_iteration"
    value {
      b: true
    }
  }
}
node {
  name: "count"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: -1
      }
    }
  }
}
node {
  name: "RepeatDataset"
  op: "RepeatDataset"
  input: "ShuffleDataset"
  input: "count"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT32
      }
    }
  }
}
node {
  name: "batch_size"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 32
      }
    }
  }
}
node {
  name: "drop_remainder"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: false
      }
    }
  }
}
node {
  name: "BatchDatasetV2"
  op: "BatchDatasetV2"
  input: "RepeatDataset"
  input: "batch_size"
  input: "drop_remainder"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT32
      }
    }
  }
  attr {
    key: "parallel_copy"
    value {
      b: false
    }
  }
}
node {
  name: "optimizations"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 3
          }
        }
        string_val: "map_and_batch_fusion"
        string_val: "noop_elimination"
        string_val: "shuffle_and_repeat_fusion"
      }
    }
  }
}
node {
  name: "OptimizeDataset"
  op: "OptimizeDataset"
  input: "BatchDatasetV2"
  input: "optimizations"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "optimization_configs"
    value {
      list {
        s: "map_vectorization:use_choose_fastest:false"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT32
      }
    }
  }
}
node {
  name: "ModelDataset"
  op: "ModelDataset"
  input: "OptimizeDataset"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "algorithm"
    value {
      i: 0
    }
  }
  attr {
    key: "cpu_budget"
    value {
      i: 0
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT32
      }
    }
  }
}
node {
  name: "IteratorV2"
  op: "IteratorV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT32
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MakeIterator"
  op: "MakeIterator"
  input: "ModelDataset"
  input: "IteratorV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@IteratorV2"
      }
    }
  }
}
node {
  name: "IteratorToStringHandle"
  op: "IteratorToStringHandle"
  input: "IteratorV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "IteratorGetNext"
  op: "IteratorGetNext"
  input: "IteratorV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT32
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext"
  input: "dnn/input_from_feature_columns/input_layer/1_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/1_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/1_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/1_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/1_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/1_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/1_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/1_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/1_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/1_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/1_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/10_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/10_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:1"
  input: "dnn/input_from_feature_columns/input_layer/10_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/10_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/10_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/10_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/10_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/10_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/10_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/10_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/10_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/10_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/10_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/10_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/10_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/10_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/10_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/10_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/10_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/10_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/10_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/10_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/11_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/11_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:2"
  input: "dnn/input_from_feature_columns/input_layer/11_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/11_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/11_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/11_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/11_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/11_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/11_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/11_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/11_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/11_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/11_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/11_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/11_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/11_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/11_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/11_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/11_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/11_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/11_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/11_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/115_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/115_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:3"
  input: "dnn/input_from_feature_columns/input_layer/115_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/115_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/115_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/115_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/115_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/115_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/115_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/115_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/115_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/115_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/115_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/115_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/115_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/115_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/115_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/115_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/115_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/115_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/115_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/115_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/116_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/116_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:4"
  input: "dnn/input_from_feature_columns/input_layer/116_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/116_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/116_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/116_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/116_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/116_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/116_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/116_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/116_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/116_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/116_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/116_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/116_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/116_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/116_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/116_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/116_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/116_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/116_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/116_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/117_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/117_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:5"
  input: "dnn/input_from_feature_columns/input_layer/117_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/117_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/117_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/117_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/117_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/117_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/117_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/117_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/117_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/117_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/117_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/117_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/117_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/117_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/117_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/117_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/117_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/117_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/117_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/117_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1170_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1170_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:6"
  input: "dnn/input_from_feature_columns/input_layer/1170_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1170_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/1170_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1170_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/1170_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1170_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1170_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1170_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1170_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/1170_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/1170_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/1170_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/1170_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1170_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1170_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/1170_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/1170_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1170_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/1170_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/1170_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/118_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/118_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:7"
  input: "dnn/input_from_feature_columns/input_layer/118_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/118_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/118_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/118_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/118_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/118_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/118_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/118_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/118_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/118_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/118_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/118_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/118_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/118_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/118_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/118_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/118_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/118_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/118_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/118_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1188_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1188_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:8"
  input: "dnn/input_from_feature_columns/input_layer/1188_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1188_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/1188_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1188_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/1188_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1188_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1188_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1188_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1188_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/1188_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/1188_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/1188_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/1188_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1188_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1188_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/1188_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/1188_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1188_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/1188_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/1188_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1189_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1189_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:9"
  input: "dnn/input_from_feature_columns/input_layer/1189_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1189_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/1189_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1189_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/1189_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1189_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1189_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1189_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1189_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/1189_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/1189_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/1189_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/1189_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1189_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1189_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/1189_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/1189_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1189_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/1189_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/1189_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/119_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/119_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:10"
  input: "dnn/input_from_feature_columns/input_layer/119_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/119_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/119_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/119_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/119_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/119_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/119_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/119_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/119_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/119_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/119_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/119_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/119_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/119_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/119_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/119_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/119_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/119_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/119_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/119_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/12_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/12_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:11"
  input: "dnn/input_from_feature_columns/input_layer/12_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/12_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/12_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/12_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/12_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/12_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/12_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/12_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/12_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/12_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/12_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/12_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/12_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/12_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/12_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/12_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/12_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/12_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/12_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/12_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/120_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/120_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:12"
  input: "dnn/input_from_feature_columns/input_layer/120_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/120_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/120_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/120_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/120_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/120_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/120_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/120_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/120_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/120_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/120_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/120_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/120_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/120_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/120_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/120_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/120_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/120_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/120_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/120_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/121_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/121_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:13"
  input: "dnn/input_from_feature_columns/input_layer/121_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/121_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/121_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/121_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/121_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/121_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/121_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/121_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/121_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/121_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/121_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/121_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/121_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/121_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/121_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/121_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/121_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/121_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/121_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/121_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1226_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1226_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:14"
  input: "dnn/input_from_feature_columns/input_layer/1226_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1226_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/1226_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1226_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/1226_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1226_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1226_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1226_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1226_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/1226_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/1226_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/1226_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/1226_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1226_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1226_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/1226_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/1226_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1226_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/1226_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/1226_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1227_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1227_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:15"
  input: "dnn/input_from_feature_columns/input_layer/1227_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1227_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/1227_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1227_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/1227_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1227_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1227_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1227_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1227_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/1227_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/1227_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/1227_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/1227_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1227_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1227_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/1227_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/1227_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1227_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/1227_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/1227_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1228_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1228_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:16"
  input: "dnn/input_from_feature_columns/input_layer/1228_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1228_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/1228_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1228_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/1228_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1228_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1228_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1228_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1228_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/1228_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/1228_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/1228_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/1228_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1228_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1228_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/1228_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/1228_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1228_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/1228_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/1228_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1229_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1229_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:17"
  input: "dnn/input_from_feature_columns/input_layer/1229_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1229_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/1229_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1229_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/1229_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1229_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1229_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1229_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1229_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/1229_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/1229_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/1229_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/1229_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1229_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1229_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/1229_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/1229_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1229_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/1229_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/1229_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1230_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1230_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:18"
  input: "dnn/input_from_feature_columns/input_layer/1230_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1230_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/1230_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1230_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/1230_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1230_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1230_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1230_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1230_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/1230_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/1230_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/1230_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/1230_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1230_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1230_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/1230_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/1230_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1230_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/1230_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/1230_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/13_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/13_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:19"
  input: "dnn/input_from_feature_columns/input_layer/13_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/13_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/13_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/13_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/13_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/13_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/13_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/13_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/13_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/13_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/13_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/13_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/13_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/13_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/13_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/13_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/13_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/13_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/13_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/13_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1365_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1365_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:20"
  input: "dnn/input_from_feature_columns/input_layer/1365_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1365_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/1365_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1365_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/1365_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1365_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1365_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1365_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1365_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/1365_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/1365_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/1365_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/1365_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1365_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1365_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/1365_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/1365_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1365_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/1365_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/1365_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1366_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1366_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:21"
  input: "dnn/input_from_feature_columns/input_layer/1366_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1366_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/1366_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1366_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/1366_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1366_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1366_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1366_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1366_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/1366_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/1366_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/1366_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/1366_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1366_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1366_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/1366_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/1366_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1366_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/1366_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/1366_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1367_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1367_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:22"
  input: "dnn/input_from_feature_columns/input_layer/1367_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1367_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/1367_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1367_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/1367_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1367_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1367_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1367_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1367_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/1367_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/1367_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/1367_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/1367_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1367_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1367_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/1367_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/1367_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1367_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/1367_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/1367_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/14_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/14_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:23"
  input: "dnn/input_from_feature_columns/input_layer/14_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/14_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/14_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/14_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/14_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/14_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/14_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/14_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/14_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/14_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/14_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/14_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/14_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/14_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/14_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/14_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/14_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/14_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/14_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/14_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/15_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/15_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:24"
  input: "dnn/input_from_feature_columns/input_layer/15_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/15_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/15_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/15_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/15_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/15_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/15_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/15_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/15_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/15_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/15_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/15_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/15_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/15_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/15_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/15_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/15_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/15_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/15_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/15_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/16_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/16_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:25"
  input: "dnn/input_from_feature_columns/input_layer/16_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/16_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/16_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/16_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/16_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/16_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/16_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/16_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/16_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/16_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/16_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/16_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/16_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/16_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/16_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/16_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/16_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/16_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/16_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/16_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/17_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/17_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:26"
  input: "dnn/input_from_feature_columns/input_layer/17_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/17_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/17_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/17_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/17_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/17_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/17_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/17_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/17_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/17_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/17_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/17_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/17_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/17_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/17_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/17_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/17_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/17_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/17_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/17_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/18_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/18_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:27"
  input: "dnn/input_from_feature_columns/input_layer/18_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/18_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/18_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/18_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/18_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/18_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/18_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/18_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/18_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/18_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/18_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/18_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/18_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/18_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/18_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/18_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/18_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/18_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/18_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/18_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/19_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/19_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:28"
  input: "dnn/input_from_feature_columns/input_layer/19_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/19_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/19_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/19_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/19_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/19_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/19_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/19_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/19_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/19_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/19_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/19_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/19_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/19_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/19_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/19_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/19_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/19_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/19_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/19_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/2_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/2_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:29"
  input: "dnn/input_from_feature_columns/input_layer/2_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/2_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/2_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/2_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/2_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/2_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/2_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/2_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/2_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/2_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/2_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/2_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/2_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/2_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/2_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/2_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/2_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/2_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/2_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/2_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/20_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/20_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:30"
  input: "dnn/input_from_feature_columns/input_layer/20_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/20_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/20_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/20_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/20_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/20_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/20_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/20_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/20_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/20_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/20_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/20_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/20_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/20_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/20_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/20_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/20_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/20_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/20_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/20_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/21_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/21_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:31"
  input: "dnn/input_from_feature_columns/input_layer/21_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/21_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/21_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/21_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/21_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/21_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/21_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/21_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/21_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/21_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/21_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/21_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/21_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/21_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/21_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/21_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/21_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/21_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/21_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/21_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/210_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/210_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:32"
  input: "dnn/input_from_feature_columns/input_layer/210_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/210_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/210_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/210_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/210_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/210_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/210_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/210_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/210_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/210_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/210_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/210_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/210_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/210_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/210_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/210_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/210_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/210_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/210_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/210_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/211_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/211_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:33"
  input: "dnn/input_from_feature_columns/input_layer/211_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/211_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/211_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/211_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/211_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/211_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/211_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/211_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/211_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/211_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/211_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/211_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/211_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/211_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/211_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/211_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/211_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/211_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/211_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/211_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/212_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/212_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:34"
  input: "dnn/input_from_feature_columns/input_layer/212_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/212_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/212_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/212_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/212_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/212_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/212_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/212_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/212_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/212_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/212_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/212_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/212_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/212_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/212_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/212_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/212_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/212_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/212_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/212_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/213_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/213_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:35"
  input: "dnn/input_from_feature_columns/input_layer/213_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/213_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/213_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/213_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/213_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/213_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/213_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/213_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/213_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/213_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/213_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/213_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/213_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/213_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/213_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/213_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/213_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/213_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/213_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/213_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/214_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/214_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:36"
  input: "dnn/input_from_feature_columns/input_layer/214_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/214_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/214_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/214_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/214_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/214_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/214_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/214_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/214_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/214_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/214_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/214_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/214_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/214_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/214_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/214_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/214_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/214_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/214_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/214_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/215_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/215_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:37"
  input: "dnn/input_from_feature_columns/input_layer/215_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/215_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/215_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/215_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/215_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/215_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/215_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/215_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/215_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/215_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/215_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/215_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/215_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/215_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/215_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/215_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/215_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/215_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/215_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/215_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/216_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/216_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:38"
  input: "dnn/input_from_feature_columns/input_layer/216_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/216_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/216_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/216_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/216_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/216_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/216_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/216_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/216_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/216_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/216_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/216_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/216_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/216_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/216_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/216_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/216_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/216_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/216_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/216_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/217_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/217_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:39"
  input: "dnn/input_from_feature_columns/input_layer/217_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/217_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/217_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/217_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/217_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/217_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/217_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/217_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/217_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/217_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/217_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/217_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/217_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/217_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/217_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/217_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/217_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/217_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/217_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/217_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/218_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/218_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:40"
  input: "dnn/input_from_feature_columns/input_layer/218_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/218_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/218_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/218_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/218_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/218_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/218_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/218_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/218_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/218_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/218_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/218_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/218_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/218_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/218_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/218_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/218_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/218_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/218_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/218_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/219_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/219_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:41"
  input: "dnn/input_from_feature_columns/input_layer/219_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/219_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/219_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/219_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/219_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/219_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/219_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/219_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/219_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/219_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/219_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/219_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/219_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/219_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/219_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/219_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/219_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/219_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/219_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/219_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/228_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/228_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:42"
  input: "dnn/input_from_feature_columns/input_layer/228_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/228_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/228_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/228_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/228_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/228_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/228_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/228_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/228_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/228_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/228_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/228_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/228_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/228_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/228_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/228_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/228_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/228_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/228_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/228_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/229_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/229_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:43"
  input: "dnn/input_from_feature_columns/input_layer/229_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/229_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/229_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/229_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/229_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/229_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/229_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/229_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/229_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/229_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/229_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/229_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/229_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/229_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/229_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/229_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/229_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/229_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/229_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/229_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/230_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/230_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:44"
  input: "dnn/input_from_feature_columns/input_layer/230_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/230_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/230_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/230_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/230_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/230_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/230_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/230_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/230_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/230_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/230_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/230_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/230_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/230_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/230_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/230_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/230_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/230_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/230_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/230_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/231_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/231_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:45"
  input: "dnn/input_from_feature_columns/input_layer/231_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/231_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/231_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/231_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/231_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/231_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/231_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/231_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/231_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/231_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/231_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/231_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/231_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/231_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/231_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/231_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/231_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/231_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/231_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/231_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/232_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/232_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:46"
  input: "dnn/input_from_feature_columns/input_layer/232_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/232_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/232_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/232_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/232_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/232_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/232_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/232_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/232_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/232_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/232_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/232_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/232_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/232_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/232_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/232_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/232_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/232_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/232_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/232_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/233_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/233_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:47"
  input: "dnn/input_from_feature_columns/input_layer/233_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/233_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/233_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/233_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/233_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/233_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/233_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/233_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/233_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/233_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/233_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/233_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/233_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/233_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/233_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/233_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/233_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/233_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/233_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/233_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/234_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/234_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:48"
  input: "dnn/input_from_feature_columns/input_layer/234_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/234_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/234_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/234_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/234_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/234_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/234_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/234_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/234_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/234_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/234_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/234_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/234_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/234_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/234_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/234_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/234_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/234_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/234_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/234_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/235_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/235_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:49"
  input: "dnn/input_from_feature_columns/input_layer/235_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/235_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/235_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/235_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/235_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/235_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/235_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/235_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/235_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/235_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/235_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/235_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/235_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/235_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/235_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/235_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/235_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/235_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/235_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/235_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/236_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/236_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:50"
  input: "dnn/input_from_feature_columns/input_layer/236_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/236_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/236_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/236_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/236_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/236_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/236_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/236_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/236_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/236_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/236_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/236_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/236_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/236_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/236_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/236_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/236_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/236_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/236_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/236_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/237_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/237_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:51"
  input: "dnn/input_from_feature_columns/input_layer/237_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/237_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/237_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/237_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/237_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/237_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/237_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/237_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/237_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/237_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/237_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/237_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/237_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/237_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/237_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/237_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/237_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/237_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/237_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/237_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/238_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/238_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:52"
  input: "dnn/input_from_feature_columns/input_layer/238_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/238_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/238_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/238_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/238_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/238_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/238_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/238_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/238_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/238_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/238_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/238_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/238_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/238_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/238_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/238_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/238_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/238_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/238_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/238_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/239_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/239_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:53"
  input: "dnn/input_from_feature_columns/input_layer/239_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/239_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/239_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/239_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/239_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/239_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/239_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/239_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/239_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/239_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/239_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/239_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/239_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/239_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/239_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/239_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/239_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/239_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/239_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/239_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/285_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/285_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:54"
  input: "dnn/input_from_feature_columns/input_layer/285_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/285_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/285_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/285_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/285_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/285_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/285_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/285_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/285_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/285_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/285_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/285_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/285_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/285_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/285_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/285_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/285_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/285_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/285_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/285_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/286_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/286_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:55"
  input: "dnn/input_from_feature_columns/input_layer/286_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/286_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/286_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/286_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/286_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/286_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/286_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/286_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/286_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/286_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/286_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/286_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/286_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/286_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/286_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/286_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/286_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/286_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/286_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/286_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/287_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/287_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:56"
  input: "dnn/input_from_feature_columns/input_layer/287_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/287_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/287_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/287_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/287_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/287_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/287_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/287_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/287_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/287_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/287_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/287_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/287_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/287_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/287_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/287_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/287_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/287_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/287_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/287_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/288_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/288_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:57"
  input: "dnn/input_from_feature_columns/input_layer/288_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/288_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/288_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/288_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/288_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/288_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/288_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/288_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/288_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/288_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/288_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/288_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/288_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/288_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/288_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/288_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/288_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/288_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/288_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/288_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/289_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/289_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:58"
  input: "dnn/input_from_feature_columns/input_layer/289_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/289_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/289_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/289_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/289_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/289_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/289_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/289_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/289_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/289_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/289_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/289_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/289_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/289_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/289_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/289_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/289_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/289_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/289_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/289_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/290_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/290_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:59"
  input: "dnn/input_from_feature_columns/input_layer/290_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/290_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/290_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/290_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/290_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/290_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/290_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/290_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/290_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/290_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/290_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/290_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/290_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/290_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/290_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/290_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/290_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/290_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/290_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/290_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/291_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/291_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:60"
  input: "dnn/input_from_feature_columns/input_layer/291_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/291_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/291_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/291_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/291_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/291_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/291_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/291_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/291_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/291_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/291_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/291_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/291_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/291_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/291_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/291_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/291_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/291_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/291_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/291_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/3_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/3_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:61"
  input: "dnn/input_from_feature_columns/input_layer/3_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/3_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/3_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/3_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/3_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/3_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/3_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/3_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/3_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/3_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/3_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/3_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/3_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/3_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/3_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/3_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/3_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/3_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/3_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/3_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/32_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/32_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:62"
  input: "dnn/input_from_feature_columns/input_layer/32_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/32_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/32_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/32_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/32_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/32_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/32_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/32_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/32_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/32_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/32_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/32_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/32_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/32_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/32_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/32_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/32_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/32_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/32_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/32_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/33_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/33_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:63"
  input: "dnn/input_from_feature_columns/input_layer/33_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/33_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/33_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/33_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/33_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/33_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/33_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/33_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/33_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/33_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/33_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/33_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/33_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/33_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/33_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/33_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/33_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/33_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/33_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/33_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/34_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/34_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:64"
  input: "dnn/input_from_feature_columns/input_layer/34_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/34_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/34_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/34_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/34_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/34_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/34_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/34_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/34_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/34_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/34_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/34_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/34_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/34_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/34_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/34_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/34_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/34_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/34_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/34_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/35_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/35_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:65"
  input: "dnn/input_from_feature_columns/input_layer/35_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/35_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/35_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/35_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/35_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/35_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/35_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/35_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/35_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/35_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/35_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/35_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/35_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/35_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/35_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/35_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/35_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/35_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/35_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/35_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/36_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/36_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:66"
  input: "dnn/input_from_feature_columns/input_layer/36_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/36_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/36_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/36_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/36_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/36_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/36_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/36_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/36_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/36_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/36_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/36_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/36_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/36_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/36_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/36_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/36_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/36_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/36_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/36_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/37_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/37_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:67"
  input: "dnn/input_from_feature_columns/input_layer/37_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/37_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/37_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/37_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/37_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/37_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/37_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/37_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/37_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/37_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/37_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/37_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/37_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/37_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/37_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/37_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/37_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/37_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/37_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/37_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/38_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/38_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:68"
  input: "dnn/input_from_feature_columns/input_layer/38_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/38_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/38_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/38_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/38_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/38_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/38_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/38_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/38_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/38_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/38_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/38_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/38_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/38_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/38_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/38_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/38_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/38_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/38_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/38_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/39_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/39_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:69"
  input: "dnn/input_from_feature_columns/input_layer/39_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/39_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/39_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/39_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/39_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/39_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/39_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/39_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/39_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/39_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/39_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/39_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/39_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/39_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/39_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/39_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/39_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/39_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/39_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/39_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/394_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/394_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:70"
  input: "dnn/input_from_feature_columns/input_layer/394_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/394_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/394_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/394_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/394_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/394_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/394_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/394_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/394_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/394_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/394_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/394_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/394_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/394_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/394_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/394_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/394_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/394_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/394_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/394_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/395_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/395_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:71"
  input: "dnn/input_from_feature_columns/input_layer/395_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/395_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/395_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/395_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/395_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/395_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/395_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/395_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/395_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/395_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/395_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/395_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/395_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/395_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/395_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/395_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/395_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/395_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/395_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/395_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/396_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/396_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:72"
  input: "dnn/input_from_feature_columns/input_layer/396_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/396_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/396_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/396_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/396_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/396_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/396_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/396_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/396_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/396_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/396_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/396_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/396_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/396_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/396_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/396_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/396_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/396_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/396_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/396_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/397_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/397_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:73"
  input: "dnn/input_from_feature_columns/input_layer/397_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/397_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/397_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/397_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/397_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/397_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/397_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/397_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/397_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/397_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/397_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/397_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/397_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/397_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/397_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/397_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/397_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/397_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/397_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/397_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/398_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/398_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:74"
  input: "dnn/input_from_feature_columns/input_layer/398_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/398_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/398_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/398_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/398_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/398_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/398_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/398_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/398_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/398_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/398_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/398_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/398_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/398_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/398_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/398_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/398_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/398_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/398_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/398_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/399_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/399_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:75"
  input: "dnn/input_from_feature_columns/input_layer/399_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/399_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/399_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/399_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/399_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/399_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/399_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/399_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/399_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/399_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/399_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/399_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/399_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/399_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/399_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/399_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/399_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/399_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/399_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/399_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/4_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/4_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:76"
  input: "dnn/input_from_feature_columns/input_layer/4_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/4_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/4_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/4_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/4_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/4_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/4_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/4_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/4_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/4_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/4_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/4_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/4_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/4_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/4_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/4_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/4_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/4_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/4_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/4_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/40_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/40_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:77"
  input: "dnn/input_from_feature_columns/input_layer/40_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/40_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/40_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/40_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/40_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/40_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/40_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/40_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/40_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/40_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/40_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/40_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/40_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/40_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/40_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/40_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/40_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/40_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/40_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/40_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/400_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/400_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:78"
  input: "dnn/input_from_feature_columns/input_layer/400_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/400_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/400_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/400_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/400_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/400_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/400_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/400_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/400_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/400_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/400_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/400_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/400_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/400_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/400_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/400_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/400_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/400_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/400_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/400_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/401_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/401_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:79"
  input: "dnn/input_from_feature_columns/input_layer/401_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/401_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/401_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/401_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/401_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/401_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/401_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/401_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/401_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/401_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/401_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/401_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/401_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/401_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/401_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/401_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/401_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/401_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/401_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/401_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/402_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/402_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:80"
  input: "dnn/input_from_feature_columns/input_layer/402_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/402_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/402_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/402_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/402_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/402_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/402_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/402_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/402_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/402_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/402_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/402_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/402_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/402_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/402_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/402_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/402_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/402_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/402_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/402_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/403_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/403_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:81"
  input: "dnn/input_from_feature_columns/input_layer/403_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/403_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/403_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/403_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/403_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/403_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/403_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/403_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/403_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/403_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/403_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/403_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/403_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/403_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/403_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/403_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/403_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/403_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/403_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/403_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/404_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/404_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:82"
  input: "dnn/input_from_feature_columns/input_layer/404_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/404_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/404_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/404_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/404_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/404_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/404_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/404_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/404_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/404_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/404_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/404_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/404_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/404_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/404_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/404_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/404_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/404_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/404_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/404_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/405_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/405_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:83"
  input: "dnn/input_from_feature_columns/input_layer/405_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/405_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/405_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/405_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/405_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/405_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/405_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/405_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/405_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/405_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/405_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/405_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/405_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/405_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/405_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/405_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/405_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/405_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/405_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/405_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/406_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/406_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:84"
  input: "dnn/input_from_feature_columns/input_layer/406_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/406_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/406_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/406_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/406_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/406_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/406_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/406_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/406_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/406_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/406_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/406_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/406_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/406_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/406_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/406_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/406_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/406_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/406_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/406_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/41_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/41_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:85"
  input: "dnn/input_from_feature_columns/input_layer/41_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/41_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/41_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/41_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/41_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/41_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/41_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/41_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/41_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/41_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/41_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/41_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/41_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/41_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/41_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/41_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/41_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/41_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/41_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/41_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/42_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/42_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:86"
  input: "dnn/input_from_feature_columns/input_layer/42_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/42_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/42_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/42_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/42_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/42_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/42_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/42_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/42_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/42_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/42_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/42_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/42_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/42_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/42_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/42_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/42_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/42_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/42_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/42_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/43_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/43_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:87"
  input: "dnn/input_from_feature_columns/input_layer/43_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/43_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/43_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/43_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/43_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/43_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/43_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/43_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/43_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/43_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/43_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/43_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/43_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/43_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/43_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/43_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/43_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/43_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/43_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/43_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/44_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/44_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:88"
  input: "dnn/input_from_feature_columns/input_layer/44_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/44_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/44_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/44_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/44_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/44_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/44_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/44_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/44_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/44_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/44_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/44_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/44_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/44_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/44_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/44_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/44_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/44_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/44_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/44_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/45_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/45_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:89"
  input: "dnn/input_from_feature_columns/input_layer/45_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/45_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/45_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/45_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/45_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/45_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/45_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/45_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/45_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/45_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/45_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/45_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/45_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/45_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/45_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/45_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/45_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/45_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/45_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/45_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/46_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/46_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:90"
  input: "dnn/input_from_feature_columns/input_layer/46_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/46_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/46_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/46_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/46_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/46_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/46_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/46_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/46_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/46_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/46_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/46_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/46_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/46_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/46_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/46_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/46_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/46_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/46_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/46_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/47_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/47_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:91"
  input: "dnn/input_from_feature_columns/input_layer/47_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/47_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/47_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/47_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/47_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/47_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/47_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/47_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/47_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/47_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/47_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/47_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/47_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/47_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/47_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/47_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/47_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/47_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/47_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/47_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/48_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/48_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:92"
  input: "dnn/input_from_feature_columns/input_layer/48_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/48_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/48_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/48_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/48_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/48_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/48_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/48_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/48_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/48_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/48_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/48_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/48_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/48_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/48_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/48_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/48_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/48_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/48_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/48_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/49_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/49_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:93"
  input: "dnn/input_from_feature_columns/input_layer/49_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/49_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/49_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/49_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/49_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/49_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/49_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/49_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/49_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/49_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/49_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/49_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/49_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/49_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/49_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/49_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/49_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/49_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/49_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/49_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/5_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/5_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:94"
  input: "dnn/input_from_feature_columns/input_layer/5_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/5_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/5_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/5_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/5_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/5_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/5_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/5_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/5_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/5_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/5_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/5_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/5_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/5_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/5_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/5_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/5_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/5_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/5_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/5_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/50_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/50_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:95"
  input: "dnn/input_from_feature_columns/input_layer/50_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/50_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/50_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/50_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/50_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/50_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/50_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/50_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/50_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/50_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/50_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/50_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/50_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/50_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/50_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/50_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/50_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/50_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/50_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/50_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/51_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/51_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:96"
  input: "dnn/input_from_feature_columns/input_layer/51_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/51_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/51_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/51_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/51_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/51_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/51_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/51_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/51_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/51_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/51_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/51_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/51_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/51_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/51_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/51_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/51_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/51_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/51_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/51_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/52_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/52_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:97"
  input: "dnn/input_from_feature_columns/input_layer/52_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/52_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/52_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/52_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/52_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/52_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/52_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/52_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/52_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/52_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/52_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/52_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/52_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/52_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/52_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/52_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/52_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/52_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/52_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/52_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/53_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/53_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:98"
  input: "dnn/input_from_feature_columns/input_layer/53_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/53_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/53_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/53_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/53_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/53_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/53_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/53_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/53_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/53_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/53_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/53_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/53_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/53_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/53_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/53_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/53_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/53_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/53_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/53_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/537_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/537_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:99"
  input: "dnn/input_from_feature_columns/input_layer/537_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/537_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/537_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/537_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/537_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/537_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/537_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/537_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/537_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/537_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/537_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/537_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/537_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/537_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/537_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/537_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/537_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/537_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/537_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/537_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/538_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/538_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:100"
  input: "dnn/input_from_feature_columns/input_layer/538_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/538_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/538_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/538_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/538_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/538_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/538_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/538_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/538_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/538_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/538_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/538_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/538_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/538_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/538_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/538_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/538_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/538_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/538_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/538_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/539_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/539_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:101"
  input: "dnn/input_from_feature_columns/input_layer/539_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/539_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/539_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/539_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/539_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/539_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/539_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/539_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/539_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/539_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/539_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/539_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/539_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/539_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/539_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/539_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/539_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/539_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/539_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/539_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/54_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/54_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:102"
  input: "dnn/input_from_feature_columns/input_layer/54_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/54_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/54_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/54_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/54_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/54_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/54_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/54_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/54_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/54_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/54_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/54_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/54_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/54_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/54_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/54_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/54_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/54_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/54_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/54_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/55_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/55_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:103"
  input: "dnn/input_from_feature_columns/input_layer/55_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/55_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/55_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/55_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/55_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/55_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/55_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/55_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/55_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/55_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/55_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/55_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/55_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/55_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/55_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/55_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/55_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/55_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/55_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/55_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/56_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/56_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:104"
  input: "dnn/input_from_feature_columns/input_layer/56_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/56_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/56_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/56_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/56_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/56_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/56_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/56_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/56_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/56_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/56_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/56_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/56_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/56_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/56_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/56_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/56_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/56_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/56_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/56_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/57_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/57_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:105"
  input: "dnn/input_from_feature_columns/input_layer/57_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/57_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/57_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/57_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/57_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/57_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/57_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/57_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/57_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/57_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/57_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/57_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/57_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/57_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/57_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/57_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/57_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/57_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/57_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/57_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/58_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/58_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:106"
  input: "dnn/input_from_feature_columns/input_layer/58_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/58_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/58_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/58_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/58_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/58_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/58_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/58_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/58_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/58_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/58_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/58_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/58_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/58_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/58_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/58_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/58_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/58_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/58_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/58_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/59_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/59_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:107"
  input: "dnn/input_from_feature_columns/input_layer/59_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/59_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/59_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/59_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/59_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/59_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/59_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/59_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/59_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/59_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/59_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/59_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/59_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/59_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/59_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/59_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/59_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/59_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/59_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/59_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/6_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/6_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:108"
  input: "dnn/input_from_feature_columns/input_layer/6_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/6_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/6_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/6_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/6_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/6_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/6_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/6_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/6_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/6_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/6_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/6_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/6_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/6_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/6_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/6_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/6_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/6_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/6_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/6_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/60_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/60_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:109"
  input: "dnn/input_from_feature_columns/input_layer/60_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/60_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/60_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/60_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/60_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/60_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/60_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/60_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/60_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/60_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/60_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/60_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/60_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/60_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/60_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/60_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/60_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/60_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/60_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/60_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/61_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/61_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:110"
  input: "dnn/input_from_feature_columns/input_layer/61_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/61_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/61_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/61_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/61_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/61_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/61_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/61_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/61_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/61_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/61_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/61_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/61_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/61_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/61_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/61_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/61_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/61_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/61_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/61_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/62_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/62_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:111"
  input: "dnn/input_from_feature_columns/input_layer/62_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/62_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/62_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/62_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/62_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/62_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/62_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/62_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/62_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/62_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/62_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/62_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/62_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/62_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/62_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/62_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/62_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/62_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/62_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/62_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/63_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/63_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:112"
  input: "dnn/input_from_feature_columns/input_layer/63_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/63_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/63_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/63_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/63_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/63_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/63_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/63_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/63_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/63_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/63_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/63_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/63_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/63_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/63_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/63_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/63_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/63_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/63_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/63_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/64_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/64_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:113"
  input: "dnn/input_from_feature_columns/input_layer/64_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/64_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/64_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/64_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/64_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/64_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/64_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/64_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/64_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/64_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/64_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/64_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/64_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/64_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/64_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/64_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/64_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/64_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/64_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/64_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/65_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/65_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:114"
  input: "dnn/input_from_feature_columns/input_layer/65_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/65_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/65_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/65_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/65_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/65_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/65_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/65_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/65_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/65_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/65_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/65_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/65_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/65_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/65_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/65_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/65_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/65_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/65_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/65_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/66_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/66_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:115"
  input: "dnn/input_from_feature_columns/input_layer/66_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/66_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/66_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/66_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/66_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/66_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/66_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/66_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/66_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/66_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/66_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/66_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/66_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/66_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/66_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/66_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/66_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/66_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/66_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/66_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/67_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/67_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:116"
  input: "dnn/input_from_feature_columns/input_layer/67_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/67_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/67_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/67_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/67_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/67_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/67_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/67_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/67_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/67_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/67_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/67_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/67_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/67_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/67_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/67_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/67_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/67_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/67_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/67_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/68_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/68_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:117"
  input: "dnn/input_from_feature_columns/input_layer/68_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/68_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/68_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/68_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/68_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/68_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/68_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/68_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/68_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/68_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/68_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/68_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/68_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/68_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/68_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/68_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/68_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/68_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/68_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/68_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/69_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/69_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:118"
  input: "dnn/input_from_feature_columns/input_layer/69_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/69_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/69_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/69_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/69_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/69_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/69_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/69_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/69_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/69_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/69_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/69_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/69_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/69_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/69_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/69_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/69_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/69_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/69_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/69_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/7_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/7_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:119"
  input: "dnn/input_from_feature_columns/input_layer/7_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/7_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/7_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/7_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/7_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/7_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/7_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/7_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/7_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/7_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/7_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/7_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/7_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/7_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/7_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/7_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/7_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/7_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/7_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/7_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/70_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/70_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:120"
  input: "dnn/input_from_feature_columns/input_layer/70_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/70_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/70_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/70_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/70_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/70_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/70_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/70_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/70_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/70_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/70_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/70_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/70_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/70_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/70_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/70_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/70_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/70_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/70_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/70_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/71_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/71_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:121"
  input: "dnn/input_from_feature_columns/input_layer/71_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/71_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/71_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/71_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/71_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/71_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/71_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/71_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/71_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/71_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/71_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/71_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/71_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/71_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/71_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/71_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/71_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/71_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/71_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/71_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/72_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/72_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:122"
  input: "dnn/input_from_feature_columns/input_layer/72_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/72_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/72_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/72_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/72_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/72_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/72_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/72_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/72_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/72_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/72_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/72_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/72_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/72_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/72_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/72_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/72_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/72_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/72_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/72_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/73_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/73_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:123"
  input: "dnn/input_from_feature_columns/input_layer/73_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/73_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/73_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/73_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/73_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/73_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/73_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/73_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/73_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/73_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/73_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/73_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/73_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/73_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/73_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/73_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/73_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/73_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/73_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/73_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/74_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/74_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:124"
  input: "dnn/input_from_feature_columns/input_layer/74_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/74_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/74_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/74_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/74_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/74_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/74_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/74_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/74_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/74_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/74_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/74_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/74_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/74_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/74_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/74_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/74_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/74_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/74_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/74_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/75_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/75_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:125"
  input: "dnn/input_from_feature_columns/input_layer/75_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/75_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/75_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/75_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/75_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/75_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/75_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/75_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/75_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/75_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/75_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/75_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/75_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/75_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/75_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/75_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/75_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/75_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/75_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/75_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/76_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/76_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:126"
  input: "dnn/input_from_feature_columns/input_layer/76_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/76_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/76_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/76_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/76_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/76_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/76_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/76_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/76_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/76_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/76_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/76_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/76_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/76_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/76_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/76_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/76_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/76_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/76_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/76_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/77_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/77_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:127"
  input: "dnn/input_from_feature_columns/input_layer/77_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/77_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/77_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/77_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/77_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/77_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/77_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/77_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/77_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/77_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/77_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/77_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/77_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/77_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/77_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/77_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/77_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/77_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/77_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/77_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/78_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/78_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:128"
  input: "dnn/input_from_feature_columns/input_layer/78_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/78_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/78_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/78_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/78_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/78_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/78_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/78_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/78_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/78_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/78_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/78_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/78_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/78_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/78_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/78_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/78_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/78_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/78_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/78_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/79_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/79_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:129"
  input: "dnn/input_from_feature_columns/input_layer/79_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/79_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/79_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/79_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/79_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/79_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/79_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/79_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/79_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/79_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/79_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/79_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/79_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/79_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/79_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/79_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/79_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/79_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/79_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/79_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/8_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/8_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:130"
  input: "dnn/input_from_feature_columns/input_layer/8_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/8_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/8_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/8_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/8_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/8_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/8_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/8_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/8_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/8_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/8_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/8_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/8_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/8_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/8_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/8_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/8_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/8_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/8_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/8_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/80_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/80_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:131"
  input: "dnn/input_from_feature_columns/input_layer/80_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/80_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/80_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/80_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/80_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/80_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/80_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/80_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/80_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/80_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/80_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/80_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/80_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/80_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/80_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/80_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/80_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/80_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/80_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/80_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/81_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/81_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:132"
  input: "dnn/input_from_feature_columns/input_layer/81_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/81_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/81_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/81_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/81_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/81_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/81_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/81_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/81_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/81_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/81_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/81_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/81_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/81_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/81_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/81_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/81_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/81_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/81_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/81_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/82_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/82_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:133"
  input: "dnn/input_from_feature_columns/input_layer/82_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/82_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/82_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/82_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/82_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/82_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/82_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/82_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/82_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/82_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/82_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/82_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/82_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/82_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/82_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/82_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/82_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/82_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/82_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/82_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/83_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/83_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:134"
  input: "dnn/input_from_feature_columns/input_layer/83_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/83_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/83_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/83_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/83_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/83_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/83_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/83_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/83_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/83_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/83_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/83_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/83_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/83_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/83_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/83_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/83_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/83_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/83_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/83_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/84_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/84_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:135"
  input: "dnn/input_from_feature_columns/input_layer/84_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/84_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/84_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/84_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/84_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/84_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/84_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/84_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/84_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/84_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/84_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/84_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/84_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/84_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/84_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/84_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/84_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/84_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/84_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/84_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/9_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/9_1/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:136"
  input: "dnn/input_from_feature_columns/input_layer/9_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/9_1/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/9_1/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/9_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/9_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/9_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/9_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/9_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/9_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/9_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/9_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/9_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/9_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/9_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/9_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/9_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/9_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/9_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/9_1/Cast"
  input: "dnn/input_from_feature_columns/input_layer/9_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concat"
  op: "ConcatV2"
  input: "dnn/input_from_feature_columns/input_layer/1_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/10_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/11_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/115_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/116_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/117_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/1170_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/118_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/1188_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/1189_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/119_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/12_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/120_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/121_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/1226_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/1227_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/1228_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/1229_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/1230_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/13_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/1365_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/1366_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/1367_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/14_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/15_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/16_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/17_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/18_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/19_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/2_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/20_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/21_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/210_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/211_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/212_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/213_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/214_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/215_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/216_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/217_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/218_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/219_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/228_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/229_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/230_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/231_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/232_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/233_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/234_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/235_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/236_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/237_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/238_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/239_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/285_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/286_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/287_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/288_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/289_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/290_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/291_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/3_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/32_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/33_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/34_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/35_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/36_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/37_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/38_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/39_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/394_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/395_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/396_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/397_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/398_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/399_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/4_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/40_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/400_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/401_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/402_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/403_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/404_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/405_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/406_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/41_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/42_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/43_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/44_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/45_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/46_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/47_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/48_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/49_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/5_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/50_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/51_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/52_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/53_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/537_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/538_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/539_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/54_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/55_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/56_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/57_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/58_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/59_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/6_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/60_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/61_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/62_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/63_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/64_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/65_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/66_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/67_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/68_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/69_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/7_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/70_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/71_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/72_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/73_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/74_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/75_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/76_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/77_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/78_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/79_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/8_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/80_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/81_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/82_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/83_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/84_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/9_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/concat/axis"
  attr {
    key: "N"
    value {
      i: 137
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 137
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\211\000\000\000%\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
        }
        double_val: -0.18569533817705186
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
        }
        double_val: 0.18569533817705186
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 137
          }
          dim {
            size: 37
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/max"
  input: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/RandomUniform"
  input: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 137
          }
          dim {
            size: 37
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform"
  op: "Add"
  input: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/mul"
  input: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 137
          }
          dim {
            size: 37
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 137
        }
        dim {
          size: 37
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/hiddenlayer_0/kernel"
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_0/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/Assign"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_0/kernel"
  input: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_0/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 137
          }
          dim {
            size: 37
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 37
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 37
          }
        }
        double_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 37
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/hiddenlayer_0/bias"
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_0/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/Assign"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_0/bias"
  input: "dnn/hiddenlayer_0/bias/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_0/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 37
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/Cast"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/concat"
  attr {
    key: "DstT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 137
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/MatMul/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_0/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 137
          }
          dim {
            size: 37
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/MatMul"
  op: "MatMul"
  input: "dnn/hiddenlayer_0/Cast"
  input: "dnn/hiddenlayer_0/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 37
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_0/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 37
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/BiasAdd"
  op: "BiasAdd"
  input: "dnn/hiddenlayer_0/MatMul"
  input: "dnn/hiddenlayer_0/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 37
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/Relu"
  op: "Relu"
  input: "dnn/hiddenlayer_0/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 37
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/Size"
  op: "Size"
  input: "dnn/hiddenlayer_0/Relu"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "dnn/zero_fraction/LessEqual/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 2147483647
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/LessEqual"
  op: "LessEqual"
  input: "dnn/zero_fraction/Size"
  input: "dnn/zero_fraction/LessEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond"
  op: "StatelessIf"
  input: "dnn/zero_fraction/LessEqual"
  input: "dnn/hiddenlayer_0/Relu"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_DOUBLE
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_INT64
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "dnn_zero_fraction_cond_false_57450"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "dnn_zero_fraction_cond_true_57449"
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/Identity"
  op: "Identity"
  input: "dnn/zero_fraction/cond"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/Identity_1"
  op: "Identity"
  input: "dnn/zero_fraction/cond:1"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/Identity_2"
  op: "Identity"
  input: "dnn/zero_fraction/cond:2"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/Identity_3"
  op: "Identity"
  input: "dnn/zero_fraction/cond:3"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/Identity_4"
  op: "Identity"
  input: "dnn/zero_fraction/cond:4"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/Identity_5"
  op: "Identity"
  input: "dnn/zero_fraction/cond:5"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/counts_to_fraction/sub"
  op: "Sub"
  input: "dnn/zero_fraction/Size"
  input: "dnn/zero_fraction/cond/Identity"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/counts_to_fraction/Cast"
  op: "Cast"
  input: "dnn/zero_fraction/counts_to_fraction/sub"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/counts_to_fraction/Cast_1"
  op: "Cast"
  input: "dnn/zero_fraction/Size"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/counts_to_fraction/truediv"
  op: "RealDiv"
  input: "dnn/zero_fraction/counts_to_fraction/Cast"
  input: "dnn/zero_fraction/counts_to_fraction/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/fraction"
  op: "Identity"
  input: "dnn/zero_fraction/counts_to_fraction/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/fraction_of_zero_values/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/hiddenlayer_0/fraction_of_zero_values"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/fraction_of_zero_values"
  op: "ScalarSummary"
  input: "dnn/hiddenlayer_0/fraction_of_zero_values/tags"
  input: "dnn/zero_fraction/fraction"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/activation/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/hiddenlayer_0/activation"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/activation"
  op: "HistogramSummary"
  input: "dnn/hiddenlayer_0/activation/tag"
  input: "dnn/hiddenlayer_0/Relu"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "%\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
        }
        double_val: -0.2992528008322899
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
        }
        double_val: 0.2992528008322899
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 37
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/max"
  input: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/RandomUniform"
  input: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 37
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform"
  op: "Add"
  input: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/mul"
  input: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 37
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 37
        }
        dim {
          size: 30
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/hiddenlayer_1/kernel"
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_1/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/Assign"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_1/kernel"
  input: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_1/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 37
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 30
          }
        }
        double_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 30
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/hiddenlayer_1/bias"
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_1/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias/Assign"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_1/bias"
  input: "dnn/hiddenlayer_1/bias/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_1/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/MatMul/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_1/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 37
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/MatMul"
  op: "MatMul"
  input: "dnn/hiddenlayer_0/Relu"
  input: "dnn/hiddenlayer_1/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_1/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/BiasAdd"
  op: "BiasAdd"
  input: "dnn/hiddenlayer_1/MatMul"
  input: "dnn/hiddenlayer_1/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/Relu"
  op: "Relu"
  input: "dnn/hiddenlayer_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/Size"
  op: "Size"
  input: "dnn/hiddenlayer_1/Relu"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "dnn/zero_fraction_1/LessEqual/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 2147483647
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/LessEqual"
  op: "LessEqual"
  input: "dnn/zero_fraction_1/Size"
  input: "dnn/zero_fraction_1/LessEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond"
  op: "StatelessIf"
  input: "dnn/zero_fraction_1/LessEqual"
  input: "dnn/hiddenlayer_1/Relu"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_DOUBLE
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_INT64
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "dnn_zero_fraction_1_cond_false_57520"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "dnn_zero_fraction_1_cond_true_57519"
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/Identity"
  op: "Identity"
  input: "dnn/zero_fraction_1/cond"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/Identity_1"
  op: "Identity"
  input: "dnn/zero_fraction_1/cond:1"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/Identity_2"
  op: "Identity"
  input: "dnn/zero_fraction_1/cond:2"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/Identity_3"
  op: "Identity"
  input: "dnn/zero_fraction_1/cond:3"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/Identity_4"
  op: "Identity"
  input: "dnn/zero_fraction_1/cond:4"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/Identity_5"
  op: "Identity"
  input: "dnn/zero_fraction_1/cond:5"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/counts_to_fraction/sub"
  op: "Sub"
  input: "dnn/zero_fraction_1/Size"
  input: "dnn/zero_fraction_1/cond/Identity"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/counts_to_fraction/Cast"
  op: "Cast"
  input: "dnn/zero_fraction_1/counts_to_fraction/sub"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/counts_to_fraction/Cast_1"
  op: "Cast"
  input: "dnn/zero_fraction_1/Size"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/counts_to_fraction/truediv"
  op: "RealDiv"
  input: "dnn/zero_fraction_1/counts_to_fraction/Cast"
  input: "dnn/zero_fraction_1/counts_to_fraction/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/fraction"
  op: "Identity"
  input: "dnn/zero_fraction_1/counts_to_fraction/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/fraction_of_zero_values/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/hiddenlayer_1/fraction_of_zero_values"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/fraction_of_zero_values"
  op: "ScalarSummary"
  input: "dnn/hiddenlayer_1/fraction_of_zero_values/tags"
  input: "dnn/zero_fraction_1/fraction"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/activation/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/hiddenlayer_1/activation"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/activation"
  op: "HistogramSummary"
  input: "dnn/hiddenlayer_1/activation/tag"
  input: "dnn/hiddenlayer_1/Relu"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\036\000\000\000\023\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
        }
        double_val: -0.3499271061118826
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
        }
        double_val: 0.3499271061118826
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dnn/hiddenlayer_2/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "dnn/hiddenlayer_2/kernel/Initializer/random_uniform/max"
  input: "dnn/hiddenlayer_2/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "dnn/hiddenlayer_2/kernel/Initializer/random_uniform/RandomUniform"
  input: "dnn/hiddenlayer_2/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/kernel/Initializer/random_uniform"
  op: "Add"
  input: "dnn/hiddenlayer_2/kernel/Initializer/random_uniform/mul"
  input: "dnn/hiddenlayer_2/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 30
        }
        dim {
          size: 19
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/hiddenlayer_2/kernel"
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_2/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/kernel/Assign"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_2/kernel"
  input: "dnn/hiddenlayer_2/kernel/Initializer/random_uniform"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_2/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 19
          }
        }
        double_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 19
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/hiddenlayer_2/bias"
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_2/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/bias/Assign"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_2/bias"
  input: "dnn/hiddenlayer_2/bias/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_2/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/MatMul/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_2/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/MatMul"
  op: "MatMul"
  input: "dnn/hiddenlayer_1/Relu"
  input: "dnn/hiddenlayer_2/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_2/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/BiasAdd"
  op: "BiasAdd"
  input: "dnn/hiddenlayer_2/MatMul"
  input: "dnn/hiddenlayer_2/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/Relu"
  op: "Relu"
  input: "dnn/hiddenlayer_2/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/Size"
  op: "Size"
  input: "dnn/hiddenlayer_2/Relu"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "dnn/zero_fraction_2/LessEqual/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 2147483647
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/LessEqual"
  op: "LessEqual"
  input: "dnn/zero_fraction_2/Size"
  input: "dnn/zero_fraction_2/LessEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond"
  op: "StatelessIf"
  input: "dnn/zero_fraction_2/LessEqual"
  input: "dnn/hiddenlayer_2/Relu"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_DOUBLE
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_INT64
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "dnn_zero_fraction_2_cond_false_57590"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "dnn_zero_fraction_2_cond_true_57589"
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/Identity"
  op: "Identity"
  input: "dnn/zero_fraction_2/cond"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/Identity_1"
  op: "Identity"
  input: "dnn/zero_fraction_2/cond:1"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/Identity_2"
  op: "Identity"
  input: "dnn/zero_fraction_2/cond:2"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/Identity_3"
  op: "Identity"
  input: "dnn/zero_fraction_2/cond:3"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/Identity_4"
  op: "Identity"
  input: "dnn/zero_fraction_2/cond:4"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/Identity_5"
  op: "Identity"
  input: "dnn/zero_fraction_2/cond:5"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/counts_to_fraction/sub"
  op: "Sub"
  input: "dnn/zero_fraction_2/Size"
  input: "dnn/zero_fraction_2/cond/Identity"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/counts_to_fraction/Cast"
  op: "Cast"
  input: "dnn/zero_fraction_2/counts_to_fraction/sub"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/counts_to_fraction/Cast_1"
  op: "Cast"
  input: "dnn/zero_fraction_2/Size"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/counts_to_fraction/truediv"
  op: "RealDiv"
  input: "dnn/zero_fraction_2/counts_to_fraction/Cast"
  input: "dnn/zero_fraction_2/counts_to_fraction/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/fraction"
  op: "Identity"
  input: "dnn/zero_fraction_2/counts_to_fraction/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/fraction_of_zero_values/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/hiddenlayer_2/fraction_of_zero_values"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/fraction_of_zero_values"
  op: "ScalarSummary"
  input: "dnn/hiddenlayer_2/fraction_of_zero_values/tags"
  input: "dnn/zero_fraction_2/fraction"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/activation/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/hiddenlayer_2/activation"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/activation"
  op: "HistogramSummary"
  input: "dnn/hiddenlayer_2/activation/tag"
  input: "dnn/hiddenlayer_2/Relu"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\023\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
        }
        double_val: -0.5222329678670935
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
        }
        double_val: 0.5222329678670935
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dnn/logits/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/logits/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "dnn/logits/kernel/Initializer/random_uniform/max"
  input: "dnn/logits/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "dnn/logits/kernel/Initializer/random_uniform/RandomUniform"
  input: "dnn/logits/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/Initializer/random_uniform"
  op: "Add"
  input: "dnn/logits/kernel/Initializer/random_uniform/mul"
  input: "dnn/logits/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 19
        }
        dim {
          size: 3
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/logits/kernel"
    }
  }
}
node {
  name: "dnn/logits/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/logits/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/Assign"
  op: "AssignVariableOp"
  input: "dnn/logits/kernel"
  input: "dnn/logits/kernel/Initializer/random_uniform"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "dnn/logits/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/logits/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "dnn/logits/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 3
          }
        }
        double_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/logits/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/logits/bias"
    }
  }
}
node {
  name: "dnn/logits/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/logits/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/logits/bias/Assign"
  op: "AssignVariableOp"
  input: "dnn/logits/bias"
  input: "dnn/logits/bias/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "dnn/logits/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/logits/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "dnn/logits/MatMul/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/logits/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "dnn/logits/MatMul"
  op: "MatMul"
  input: "dnn/hiddenlayer_2/Relu"
  input: "dnn/logits/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/logits/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/logits/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "dnn/logits/BiasAdd"
  op: "BiasAdd"
  input: "dnn/logits/MatMul"
  input: "dnn/logits/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/zero_fraction_3/Size"
  op: "Size"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "dnn/zero_fraction_3/LessEqual/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 2147483647
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_3/LessEqual"
  op: "LessEqual"
  input: "dnn/zero_fraction_3/Size"
  input: "dnn/zero_fraction_3/LessEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_3/cond"
  op: "StatelessIf"
  input: "dnn/zero_fraction_3/LessEqual"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_DOUBLE
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_INT64
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "dnn_zero_fraction_3_cond_false_57659"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "dnn_zero_fraction_3_cond_true_57658"
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_3/cond/Identity"
  op: "Identity"
  input: "dnn/zero_fraction_3/cond"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_3/cond/Identity_1"
  op: "Identity"
  input: "dnn/zero_fraction_3/cond:1"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_3/cond/Identity_2"
  op: "Identity"
  input: "dnn/zero_fraction_3/cond:2"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_3/cond/Identity_3"
  op: "Identity"
  input: "dnn/zero_fraction_3/cond:3"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_3/cond/Identity_4"
  op: "Identity"
  input: "dnn/zero_fraction_3/cond:4"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_3/cond/Identity_5"
  op: "Identity"
  input: "dnn/zero_fraction_3/cond:5"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_3/counts_to_fraction/sub"
  op: "Sub"
  input: "dnn/zero_fraction_3/Size"
  input: "dnn/zero_fraction_3/cond/Identity"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_3/counts_to_fraction/Cast"
  op: "Cast"
  input: "dnn/zero_fraction_3/counts_to_fraction/sub"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_3/counts_to_fraction/Cast_1"
  op: "Cast"
  input: "dnn/zero_fraction_3/Size"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_3/counts_to_fraction/truediv"
  op: "RealDiv"
  input: "dnn/zero_fraction_3/counts_to_fraction/Cast"
  input: "dnn/zero_fraction_3/counts_to_fraction/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_3/fraction"
  op: "Identity"
  input: "dnn/zero_fraction_3/counts_to_fraction/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/logits/fraction_of_zero_values/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/logits/fraction_of_zero_values"
      }
    }
  }
}
node {
  name: "dnn/logits/fraction_of_zero_values"
  op: "ScalarSummary"
  input: "dnn/logits/fraction_of_zero_values/tags"
  input: "dnn/zero_fraction_3/fraction"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/logits/activation/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/logits/activation"
      }
    }
  }
}
node {
  name: "dnn/logits/activation"
  op: "HistogramSummary"
  input: "dnn/logits/activation/tag"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "head/logits/Cast"
  op: "Cast"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "head/logits/Shape"
  op: "Shape"
  input: "head/logits/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/logits/assert_rank_at_least/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "head/logits/assert_rank_at_least/assert_type/statically_determined_correct_type"
  op: "NoOp"
}
node {
  name: "head/logits/assert_rank_at_least/static_checks_determined_all_ok"
  op: "NoOp"
}
node {
  name: "head/predictions/probabilities"
  op: "Softmax"
  input: "head/logits/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "head/predictions/class_ids/dimension"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "head/predictions/class_ids"
  op: "ArgMax"
  input: "head/logits/Cast"
  input: "head/predictions/class_ids/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "head/predictions/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "head/predictions/ExpandDims"
  op: "ExpandDims"
  input: "head/predictions/class_ids"
  input: "head/predictions/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/predictions/str_classes"
  op: "AsString"
  input: "head/predictions/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "fill"
    value {
      s: ""
    }
  }
  attr {
    key: "precision"
    value {
      i: -1
    }
  }
  attr {
    key: "scientific"
    value {
      b: false
    }
  }
  attr {
    key: "shortest"
    value {
      b: false
    }
  }
  attr {
    key: "width"
    value {
      i: -1
    }
  }
}
node {
  name: "head/predictions/Shape"
  op: "Shape"
  input: "head/logits/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/predictions/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/predictions/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/predictions/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/predictions/strided_slice"
  op: "StridedSlice"
  input: "head/predictions/Shape"
  input: "head/predictions/strided_slice/stack"
  input: "head/predictions/strided_slice/stack_1"
  input: "head/predictions/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "head/predictions/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/predictions/range/limit"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "head/predictions/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/predictions/range"
  op: "Range"
  input: "head/predictions/range/start"
  input: "head/predictions/range/limit"
  input: "head/predictions/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "head/predictions/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/predictions/ExpandDims_1"
  op: "ExpandDims"
  input: "head/predictions/range"
  input: "head/predictions/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "head/predictions/Tile/multiples/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/predictions/Tile/multiples"
  op: "Pack"
  input: "head/predictions/strided_slice"
  input: "head/predictions/Tile/multiples/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "head/predictions/Tile"
  op: "Tile"
  input: "head/predictions/ExpandDims_1"
  input: "head/predictions/Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "head/predictions/Shape_1"
  op: "Shape"
  input: "head/logits/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/predictions/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/predictions/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/predictions/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/predictions/strided_slice_1"
  op: "StridedSlice"
  input: "head/predictions/Shape_1"
  input: "head/predictions/strided_slice_1/stack"
  input: "head/predictions/strided_slice_1/stack_1"
  input: "head/predictions/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "head/predictions/range_1/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/predictions/range_1/limit"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "head/predictions/range_1/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/predictions/range_1"
  op: "Range"
  input: "head/predictions/range_1/start"
  input: "head/predictions/range_1/limit"
  input: "head/predictions/range_1/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "head/predictions/AsString"
  op: "AsString"
  input: "head/predictions/range_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "fill"
    value {
      s: ""
    }
  }
  attr {
    key: "precision"
    value {
      i: -1
    }
  }
  attr {
    key: "scientific"
    value {
      b: false
    }
  }
  attr {
    key: "shortest"
    value {
      b: false
    }
  }
  attr {
    key: "width"
    value {
      i: -1
    }
  }
}
node {
  name: "head/predictions/ExpandDims_2/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/predictions/ExpandDims_2"
  op: "ExpandDims"
  input: "head/predictions/AsString"
  input: "head/predictions/ExpandDims_2/dim"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "head/predictions/Tile_1/multiples/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/predictions/Tile_1/multiples"
  op: "Pack"
  input: "head/predictions/strided_slice_1"
  input: "head/predictions/Tile_1/multiples/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "head/predictions/Tile_1"
  op: "Tile"
  input: "head/predictions/ExpandDims_2"
  input: "head/predictions/Tile_1/multiples"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/logits/Cast"
  op: "Cast"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/logits/Shape"
  op: "Shape"
  input: "head/losses/logits/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/losses/logits/assert_rank_at_least/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "head/losses/logits/assert_rank_at_least/assert_type/statically_determined_correct_type"
  op: "NoOp"
}
node {
  name: "head/losses/logits/assert_rank_at_least/static_checks_determined_all_ok"
  op: "NoOp"
}
node {
  name: "head/losses/labels/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "head/losses/labels/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:137"
  input: "head/losses/labels/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/labels/assert_rank_at_least/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "head/losses/labels/assert_rank_at_least/Shape"
  op: "Shape"
  input: "head/losses/labels/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/losses/labels/assert_rank_at_least/assert_type/statically_determined_correct_type"
  op: "NoOp"
}
node {
  name: "head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  op: "NoOp"
}
node {
  name: "head/losses/labels/Shape"
  op: "Shape"
  input: "head/losses/logits/Cast"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/losses/labels/strided_slice/stack"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/losses/labels/strided_slice/stack_1"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "head/losses/labels/strided_slice/stack_2"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/losses/labels/strided_slice"
  op: "StridedSlice"
  input: "head/losses/labels/Shape"
  input: "head/losses/labels/strided_slice/stack"
  input: "head/losses/labels/strided_slice/stack_1"
  input: "head/losses/labels/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "head/losses/labels/concat/values_1"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/losses/labels/concat/axis"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/losses/labels/concat"
  op: "ConcatV2"
  input: "head/losses/labels/strided_slice"
  input: "head/losses/labels/concat/values_1"
  input: "head/losses/labels/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/labels/Shape_1"
  op: "Shape"
  input: "head/losses/labels/ExpandDims"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/losses/labels/assert_equal/Equal"
  op: "Equal"
  input: "head/losses/labels/concat"
  input: "head/losses/labels/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "incompatible_shape_error"
    value {
      b: true
    }
  }
}
node {
  name: "head/losses/labels/assert_equal/Const"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/losses/labels/assert_equal/All"
  op: "All"
  input: "head/losses/labels/assert_equal/Equal"
  input: "head/losses/labels/assert_equal/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "head/losses/labels/assert_equal/Assert/Const"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "expected_labels_shape: "
      }
    }
  }
}
node {
  name: "head/losses/labels/assert_equal/Assert/Const_1"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "labels_shape: "
      }
    }
  }
}
node {
  name: "head/losses/labels/assert_equal/Assert/Assert/data_0"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "expected_labels_shape: "
      }
    }
  }
}
node {
  name: "head/losses/labels/assert_equal/Assert/Assert/data_2"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "labels_shape: "
      }
    }
  }
}
node {
  name: "head/losses/labels/assert_equal/Assert/Assert"
  op: "Assert"
  input: "head/losses/labels/assert_equal/All"
  input: "head/losses/labels/assert_equal/Assert/Assert/data_0"
  input: "head/losses/labels/concat"
  input: "head/losses/labels/assert_equal/Assert/Assert/data_2"
  input: "head/losses/labels/Shape_1"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "head/losses/labels"
  op: "Identity"
  input: "head/losses/labels/ExpandDims"
  input: "^head/losses/labels/assert_equal/Assert/Assert"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_less_equal/LessEqual"
  op: "LessEqual"
  input: "head/losses/labels"
  input: "head/losses/check_label_range/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_less_equal/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_less_equal/All"
  op: "All"
  input: "head/losses/check_label_range/assert_less_equal/LessEqual"
  input: "head/losses/check_label_range/assert_less_equal/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_less_equal/Assert/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Labels must be <= n_classes - 1"
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_less_equal/Assert/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x <= y did not hold element-wise:x (head/losses/labels:0) = "
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_less_equal/Assert/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (head/losses/check_label_range/Const:0) = "
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_less_equal/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Labels must be <= n_classes - 1"
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_less_equal/Assert/Assert/data_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x <= y did not hold element-wise:x (head/losses/labels:0) = "
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_less_equal/Assert/Assert/data_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (head/losses/check_label_range/Const:0) = "
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_less_equal/Assert/Assert"
  op: "Assert"
  input: "head/losses/check_label_range/assert_less_equal/All"
  input: "head/losses/check_label_range/assert_less_equal/Assert/Assert/data_0"
  input: "head/losses/check_label_range/assert_less_equal/Assert/Assert/data_1"
  input: "head/losses/labels"
  input: "head/losses/check_label_range/assert_less_equal/Assert/Assert/data_3"
  input: "head/losses/check_label_range/Const"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_non_negative/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_non_negative/assert_less_equal/LessEqual"
  op: "LessEqual"
  input: "head/losses/check_label_range/assert_non_negative/Const"
  input: "head/losses/labels"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_non_negative/assert_less_equal/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_non_negative/assert_less_equal/All"
  op: "All"
  input: "head/losses/check_label_range/assert_non_negative/assert_less_equal/LessEqual"
  input: "head/losses/check_label_range/assert_non_negative/assert_less_equal/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_non_negative/assert_less_equal/Assert/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Labels must be >= 0"
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_non_negative/assert_less_equal/Assert/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x >= 0 did not hold element-wise:"
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_non_negative/assert_less_equal/Assert/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (head/losses/labels:0) = "
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_non_negative/assert_less_equal/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Labels must be >= 0"
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_non_negative/assert_less_equal/Assert/Assert/data_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x >= 0 did not hold element-wise:"
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_non_negative/assert_less_equal/Assert/Assert/data_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (head/losses/labels:0) = "
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_non_negative/assert_less_equal/Assert/Assert"
  op: "Assert"
  input: "head/losses/check_label_range/assert_non_negative/assert_less_equal/All"
  input: "head/losses/check_label_range/assert_non_negative/assert_less_equal/Assert/Assert/data_0"
  input: "head/losses/check_label_range/assert_non_negative/assert_less_equal/Assert/Assert/data_1"
  input: "head/losses/check_label_range/assert_non_negative/assert_less_equal/Assert/Assert/data_2"
  input: "head/losses/labels"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "head/losses/check_label_range/Identity"
  op: "Identity"
  input: "head/losses/labels"
  input: "^head/losses/check_label_range/assert_less_equal/Assert/Assert"
  input: "^head/losses/check_label_range/assert_non_negative/assert_less_equal/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/sparse_softmax_cross_entropy_loss/remove_squeezable_dimensions/Squeeze"
  op: "Squeeze"
  input: "head/losses/check_label_range/Identity"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: -1
      }
    }
  }
}
node {
  name: "head/losses/sparse_softmax_cross_entropy_loss/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "head/losses/sparse_softmax_cross_entropy_loss/xentropy/Shape"
  op: "Shape"
  input: "head/losses/sparse_softmax_cross_entropy_loss/remove_squeezable_dimensions/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/losses/sparse_softmax_cross_entropy_loss/xentropy/xentropy"
  op: "SparseSoftmaxCrossEntropyWithLogits"
  input: "head/losses/logits/Cast"
  input: "head/losses/sparse_softmax_cross_entropy_loss/remove_squeezable_dimensions/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tlabels"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/sparse_softmax_cross_entropy_loss/assert_broadcastable/weights/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/sparse_softmax_cross_entropy_loss/assert_broadcastable/weights/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/losses/sparse_softmax_cross_entropy_loss/assert_broadcastable/values/shape"
  op: "Shape"
  input: "head/losses/sparse_softmax_cross_entropy_loss/xentropy/xentropy"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/losses/sparse_softmax_cross_entropy_loss/assert_broadcastable/values/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/losses/sparse_softmax_cross_entropy_loss/assert_broadcastable/static_scalar_check_success"
  op: "NoOp"
}
node {
  name: "head/losses/sparse_softmax_cross_entropy_loss/Mul"
  op: "Mul"
  input: "head/losses/sparse_softmax_cross_entropy_loss/xentropy/xentropy"
  input: "head/losses/sparse_softmax_cross_entropy_loss/Const"
  input: "^head/losses/sparse_softmax_cross_entropy_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "head/losses/ExpandDims"
  op: "ExpandDims"
  input: "head/losses/sparse_softmax_cross_entropy_loss/Mul"
  input: "head/losses/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/weighted_loss/Cast/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "head/losses/weighted_loss/broadcast_weights/assert_broadcastable/weights/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/weighted_loss/broadcast_weights/assert_broadcastable/weights/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/losses/weighted_loss/broadcast_weights/assert_broadcastable/values/shape"
  op: "Shape"
  input: "head/losses/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/losses/weighted_loss/broadcast_weights/assert_broadcastable/values/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "head/losses/weighted_loss/broadcast_weights/assert_broadcastable/static_scalar_check_success"
  op: "NoOp"
}
node {
  name: "head/losses/weighted_loss/broadcast_weights/ones_like/Shape"
  op: "Shape"
  input: "head/losses/ExpandDims"
  input: "^head/losses/weighted_loss/broadcast_weights/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/losses/weighted_loss/broadcast_weights/ones_like/Const"
  op: "Const"
  input: "^head/losses/weighted_loss/broadcast_weights/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "head/losses/weighted_loss/broadcast_weights/ones_like"
  op: "Fill"
  input: "head/losses/weighted_loss/broadcast_weights/ones_like/Shape"
  input: "head/losses/weighted_loss/broadcast_weights/ones_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/losses/weighted_loss/broadcast_weights"
  op: "Mul"
  input: "head/losses/weighted_loss/Cast/x"
  input: "head/losses/weighted_loss/broadcast_weights/ones_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/weighted_loss/Mul"
  op: "Mul"
  input: "head/losses/ExpandDims"
  input: "head/losses/weighted_loss/broadcast_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/weighted_loss/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "head/losses/weighted_loss/Sum"
  op: "Sum"
  input: "head/losses/weighted_loss/Mul"
  input: "head/losses/weighted_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "head/losses/weighted_loss/num_elements"
  op: "Size"
  input: "head/losses/weighted_loss/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/losses/weighted_loss/num_elements/Cast"
  op: "Cast"
  input: "head/losses/weighted_loss/num_elements"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "head/losses/weighted_loss/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/weighted_loss/Sum_1"
  op: "Sum"
  input: "head/losses/weighted_loss/Sum"
  input: "head/losses/weighted_loss/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "head/losses/weighted_loss/value"
  op: "DivNoNan"
  input: "head/losses/weighted_loss/Sum_1"
  input: "head/losses/weighted_loss/num_elements/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/grad_ys_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/Fill"
  op: "Fill"
  input: "training/Adam/gradients/gradients/Shape"
  input: "training/Adam/gradients/gradients/grad_ys_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Shape"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/div_no_nan"
  op: "DivNoNan"
  input: "training/Adam/gradients/gradients/Fill"
  input: "head/losses/weighted_loss/num_elements/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/div_no_nan"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Sum"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Neg"
  op: "Neg"
  input: "head/losses/weighted_loss/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/div_no_nan_1"
  op: "DivNoNan"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Neg"
  input: "head/losses/weighted_loss/num_elements/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/div_no_nan_2"
  op: "DivNoNan"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/div_no_nan_1"
  input: "head/losses/weighted_loss/num_elements/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/gradients/Fill"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/div_no_nan_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/mul"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Sum_1"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_1_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Reshape"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_1_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_1_grad/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_1_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_1_grad/Reshape"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_1_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_1_grad/Tile"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_grad/Shape"
  op: "Shape"
  input: "head/losses/weighted_loss/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_grad/Reshape"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Shape"
  op: "Shape"
  input: "head/losses/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Shape_1"
  op: "Shape"
  input: "head/losses/weighted_loss/broadcast_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Shape"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_grad/Tile"
  input: "head/losses/weighted_loss/broadcast_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Mul"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Sum"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Mul_1"
  op: "Mul"
  input: "head/losses/ExpandDims"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Mul_1"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Sum_1"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/ExpandDims_grad/Shape"
  op: "Shape"
  input: "head/losses/sparse_softmax_cross_entropy_loss/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/ExpandDims_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Reshape"
  input: "training/Adam/gradients/gradients/head/losses/ExpandDims_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Shape"
  op: "Shape"
  input: "head/losses/sparse_softmax_cross_entropy_loss/xentropy/xentropy"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Shape_1"
  op: "Shape"
  input: "head/losses/sparse_softmax_cross_entropy_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Shape"
  input: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/gradients/head/losses/ExpandDims_grad/Reshape"
  input: "head/losses/sparse_softmax_cross_entropy_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Mul"
  input: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Sum"
  input: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Mul_1"
  op: "Mul"
  input: "head/losses/sparse_softmax_cross_entropy_loss/xentropy/xentropy"
  input: "training/Adam/gradients/gradients/head/losses/ExpandDims_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Mul_1"
  input: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Sum_1"
  input: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/zeros_like"
  op: "ZerosLike"
  input: "head/losses/sparse_softmax_cross_entropy_loss/xentropy/xentropy:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/xentropy/xentropy_grad/PreventGradient"
  op: "PreventGradient"
  input: "head/losses/sparse_softmax_cross_entropy_loss/xentropy/xentropy:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "message"
    value {
      s: "Currently there is no way to take the second derivative of sparse_softmax_cross_entropy_with_logits due to the fused implementation\'s interaction with tf.gradients()"
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/xentropy/xentropy_grad/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/xentropy/xentropy_grad/ExpandDims"
  op: "ExpandDims"
  input: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Reshape"
  input: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/xentropy/xentropy_grad/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/xentropy/xentropy_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/xentropy/xentropy_grad/ExpandDims"
  input: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/xentropy/xentropy_grad/PreventGradient"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/logits/Cast_grad/Cast"
  op: "Cast"
  input: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/xentropy/xentropy_grad/mul"
  attr {
    key: "DstT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/dnn/logits/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/gradients/head/losses/logits/Cast_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/dnn/logits/MatMul_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/gradients/head/losses/logits/Cast_grad/Cast"
  input: "dnn/logits/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/dnn/logits/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dnn/hiddenlayer_2/Relu"
  input: "training/Adam/gradients/gradients/head/losses/logits/Cast_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/dnn/hiddenlayer_2/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "training/Adam/gradients/gradients/dnn/logits/MatMul_grad/MatMul"
  input: "dnn/hiddenlayer_2/Relu"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/dnn/hiddenlayer_2/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/gradients/dnn/hiddenlayer_2/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/dnn/hiddenlayer_2/MatMul_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/gradients/dnn/hiddenlayer_2/Relu_grad/ReluGrad"
  input: "dnn/hiddenlayer_2/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/dnn/hiddenlayer_2/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dnn/hiddenlayer_1/Relu"
  input: "training/Adam/gradients/gradients/dnn/hiddenlayer_2/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/dnn/hiddenlayer_1/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "training/Adam/gradients/gradients/dnn/hiddenlayer_2/MatMul_grad/MatMul"
  input: "dnn/hiddenlayer_1/Relu"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/dnn/hiddenlayer_1/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/gradients/dnn/hiddenlayer_1/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/gradients/dnn/hiddenlayer_1/Relu_grad/ReluGrad"
  input: "dnn/hiddenlayer_1/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 37
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dnn/hiddenlayer_0/Relu"
  input: "training/Adam/gradients/gradients/dnn/hiddenlayer_1/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 37
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/dnn/hiddenlayer_0/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "training/Adam/gradients/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul"
  input: "dnn/hiddenlayer_0/Relu"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 37
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/dnn/hiddenlayer_0/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/gradients/dnn/hiddenlayer_0/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 37
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/gradients/dnn/hiddenlayer_0/Relu_grad/ReluGrad"
  input: "dnn/hiddenlayer_0/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 137
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dnn/hiddenlayer_0/Cast"
  input: "training/Adam/gradients/gradients/dnn/hiddenlayer_0/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 137
          }
          dim {
            size: 37
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/beta_1/Initializer/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/beta_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "training/Adam/beta_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/beta_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/beta_1"
    }
  }
}
node {
  name: "training/Adam/beta_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/beta_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/beta_1/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/beta_1"
  input: "training/Adam/beta_1/Initializer/initial_value"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/beta_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/beta_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/beta_2/Initializer/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/beta_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
}
node {
  name: "training/Adam/beta_2"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/beta_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/beta_2"
    }
  }
}
node {
  name: "training/Adam/beta_2/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/beta_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/beta_2/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/beta_2"
  input: "training/Adam/beta_2/Initializer/initial_value"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/beta_2/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/beta_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/decay/Initializer/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/decay"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/decay"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/decay"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/decay"
    }
  }
}
node {
  name: "training/Adam/decay/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/decay"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/decay/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/decay"
  input: "training/Adam/decay/Initializer/initial_value"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/decay/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/decay"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/learning_rate/Initializer/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/learning_rate"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "training/Adam/learning_rate"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/learning_rate"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/learning_rate"
    }
  }
}
node {
  name: "training/Adam/learning_rate/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/learning_rate"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/learning_rate/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/learning_rate"
  input: "training/Adam/learning_rate/Initializer/initial_value"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/learning_rate/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/learning_rate"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/kernel/m/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\211\000\000\000%\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/kernel/m/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
        }
        double_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/kernel/m/Initializer/zeros"
  op: "Fill"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/m/Initializer/zeros/shape_as_tensor"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/m/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 137
          }
          dim {
            size: 37
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/kernel/m"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 137
        }
        dim {
          size: 37
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/dnn/hiddenlayer_0/kernel/m"
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/kernel/m/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/kernel/m/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/m"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/m/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/kernel/m/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 137
          }
          dim {
            size: 37
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/bias/m/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 37
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 37
          }
        }
        double_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/bias/m"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 37
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/dnn/hiddenlayer_0/bias/m"
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/bias/m/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_0/bias/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/bias/m/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/bias/m"
  input: "training/Adam/dnn/hiddenlayer_0/bias/m/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/bias/m/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/bias/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 37
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/kernel/m/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "%\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/kernel/m/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
        }
        double_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/kernel/m/Initializer/zeros"
  op: "Fill"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/m/Initializer/zeros/shape_as_tensor"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/m/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 37
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/kernel/m"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 37
        }
        dim {
          size: 30
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/dnn/hiddenlayer_1/kernel/m"
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/kernel/m/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/kernel/m/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/m"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/m/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/kernel/m/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 37
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/bias/m/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 30
          }
        }
        double_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/bias/m"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 30
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/dnn/hiddenlayer_1/bias/m"
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/bias/m/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_1/bias/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/bias/m/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/bias/m"
  input: "training/Adam/dnn/hiddenlayer_1/bias/m/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/bias/m/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/bias/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_2/kernel/m/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 30
          }
          dim {
            size: 19
          }
        }
        double_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_2/kernel/m"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 30
        }
        dim {
          size: 19
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/dnn/hiddenlayer_2/kernel/m"
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_2/kernel/m/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_2/kernel/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_2/kernel/m/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_2/kernel/m"
  input: "training/Adam/dnn/hiddenlayer_2/kernel/m/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_2/kernel/m/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_2/kernel/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_2/bias/m/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 19
          }
        }
        double_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_2/bias/m"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 19
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/dnn/hiddenlayer_2/bias/m"
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_2/bias/m/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_2/bias/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_2/bias/m/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_2/bias/m"
  input: "training/Adam/dnn/hiddenlayer_2/bias/m/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_2/bias/m/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_2/bias/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "training/Adam/dnn/logits/kernel/m/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 19
          }
          dim {
            size: 3
          }
        }
        double_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/dnn/logits/kernel/m"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 19
        }
        dim {
          size: 3
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/dnn/logits/kernel/m"
    }
  }
}
node {
  name: "training/Adam/dnn/logits/kernel/m/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/logits/kernel/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/dnn/logits/kernel/m/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/logits/kernel/m"
  input: "training/Adam/dnn/logits/kernel/m/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "training/Adam/dnn/logits/kernel/m/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/dnn/logits/kernel/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "training/Adam/dnn/logits/bias/m/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 3
          }
        }
        double_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/dnn/logits/bias/m"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/dnn/logits/bias/m"
    }
  }
}
node {
  name: "training/Adam/dnn/logits/bias/m/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/logits/bias/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/dnn/logits/bias/m/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/logits/bias/m"
  input: "training/Adam/dnn/logits/bias/m/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "training/Adam/dnn/logits/bias/m/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/dnn/logits/bias/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/kernel/v/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\211\000\000\000%\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/kernel/v/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
        }
        double_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/kernel/v/Initializer/zeros"
  op: "Fill"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/v/Initializer/zeros/shape_as_tensor"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/v/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 137
          }
          dim {
            size: 37
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/kernel/v"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 137
        }
        dim {
          size: 37
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/dnn/hiddenlayer_0/kernel/v"
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/kernel/v/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/kernel/v/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/v"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/v/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/kernel/v/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 137
          }
          dim {
            size: 37
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/bias/v/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 37
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 37
          }
        }
        double_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/bias/v"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 37
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/dnn/hiddenlayer_0/bias/v"
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/bias/v/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_0/bias/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/bias/v/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/bias/v"
  input: "training/Adam/dnn/hiddenlayer_0/bias/v/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/bias/v/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/bias/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 37
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/kernel/v/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "%\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/kernel/v/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
        }
        double_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/kernel/v/Initializer/zeros"
  op: "Fill"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/v/Initializer/zeros/shape_as_tensor"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/v/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 37
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/kernel/v"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 37
        }
        dim {
          size: 30
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/dnn/hiddenlayer_1/kernel/v"
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/kernel/v/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/kernel/v/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/v"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/v/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/kernel/v/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 37
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/bias/v/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 30
          }
        }
        double_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/bias/v"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 30
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/dnn/hiddenlayer_1/bias/v"
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/bias/v/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_1/bias/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/bias/v/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/bias/v"
  input: "training/Adam/dnn/hiddenlayer_1/bias/v/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/bias/v/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/bias/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_2/kernel/v/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 30
          }
          dim {
            size: 19
          }
        }
        double_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_2/kernel/v"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 30
        }
        dim {
          size: 19
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/dnn/hiddenlayer_2/kernel/v"
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_2/kernel/v/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_2/kernel/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_2/kernel/v/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_2/kernel/v"
  input: "training/Adam/dnn/hiddenlayer_2/kernel/v/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_2/kernel/v/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_2/kernel/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_2/bias/v/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 19
          }
        }
        double_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_2/bias/v"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 19
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/dnn/hiddenlayer_2/bias/v"
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_2/bias/v/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_2/bias/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_2/bias/v/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_2/bias/v"
  input: "training/Adam/dnn/hiddenlayer_2/bias/v/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_2/bias/v/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_2/bias/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "training/Adam/dnn/logits/kernel/v/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 19
          }
          dim {
            size: 3
          }
        }
        double_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/dnn/logits/kernel/v"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 19
        }
        dim {
          size: 3
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/dnn/logits/kernel/v"
    }
  }
}
node {
  name: "training/Adam/dnn/logits/kernel/v/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/logits/kernel/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/dnn/logits/kernel/v/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/logits/kernel/v"
  input: "training/Adam/dnn/logits/kernel/v/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "training/Adam/dnn/logits/kernel/v/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/dnn/logits/kernel/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "training/Adam/dnn/logits/bias/v/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 3
          }
        }
        double_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/dnn/logits/bias/v"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/dnn/logits/bias/v"
    }
  }
}
node {
  name: "training/Adam/dnn/logits/bias/v/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/logits/bias/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/dnn/logits/bias/v/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/logits/bias/v"
  input: "training/Adam/dnn/logits/bias/v/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "training/Adam/dnn/logits/bias/v/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/dnn/logits/bias/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "training/Adam/Cast/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/learning_rate"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Cast"
  op: "Cast"
  input: "training/Adam/Cast/ReadVariableOp"
  attr {
    key: "DstT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/Identity"
  op: "Identity"
  input: "training/Adam/Cast"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "global_step"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "training/Adam/add/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/add"
  op: "AddV2"
  input: "training/Adam/ReadVariableOp"
  input: "training/Adam/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/Cast_1"
  op: "Cast"
  input: "training/Adam/add"
  attr {
    key: "DstT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/Cast_2/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/beta_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Cast_2"
  op: "Cast"
  input: "training/Adam/Cast_2/ReadVariableOp"
  attr {
    key: "DstT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/Identity_1"
  op: "Identity"
  input: "training/Adam/Cast_2"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/Cast_3/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/beta_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Cast_3"
  op: "Cast"
  input: "training/Adam/Cast_3/ReadVariableOp"
  attr {
    key: "DstT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/Identity_2"
  op: "Identity"
  input: "training/Adam/Cast_3"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/Pow"
  op: "Pow"
  input: "training/Adam/Identity_1"
  input: "training/Adam/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/Pow_1"
  op: "Pow"
  input: "training/Adam/Identity_2"
  input: "training/Adam/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/sub/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
        }
        double_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub"
  op: "Sub"
  input: "training/Adam/sub/x"
  input: "training/Adam/Pow_1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/Sqrt"
  op: "Sqrt"
  input: "training/Adam/sub"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/sub_1/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
        }
        double_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_1"
  op: "Sub"
  input: "training/Adam/sub_1/x"
  input: "training/Adam/Pow"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/truediv"
  op: "RealDiv"
  input: "training/Adam/Sqrt"
  input: "training/Adam/sub_1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/mul"
  op: "Mul"
  input: "training/Adam/Identity"
  input: "training/Adam/truediv"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
        }
        double_val: 1e-07
      }
    }
  }
}
node {
  name: "training/Adam/sub_2/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
        }
        double_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_2"
  op: "Sub"
  input: "training/Adam/sub_2/x"
  input: "training/Adam/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/sub_3/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
        }
        double_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_3"
  op: "Sub"
  input: "training/Adam/sub_3/x"
  input: "training/Adam/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/Adam/update_dnn/hiddenlayer_0/kernel/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "dnn/hiddenlayer_0/kernel"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/m"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/v"
  input: "training/Adam/Pow"
  input: "training/Adam/Pow_1"
  input: "training/Adam/Identity"
  input: "training/Adam/Identity_1"
  input: "training/Adam/Identity_2"
  input: "training/Adam/Const"
  input: "training/Adam/gradients/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/Adam/update_dnn/hiddenlayer_0/bias/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "dnn/hiddenlayer_0/bias"
  input: "training/Adam/dnn/hiddenlayer_0/bias/m"
  input: "training/Adam/dnn/hiddenlayer_0/bias/v"
  input: "training/Adam/Pow"
  input: "training/Adam/Pow_1"
  input: "training/Adam/Identity"
  input: "training/Adam/Identity_1"
  input: "training/Adam/Identity_2"
  input: "training/Adam/Const"
  input: "training/Adam/gradients/gradients/dnn/hiddenlayer_0/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/Adam/update_dnn/hiddenlayer_1/kernel/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "dnn/hiddenlayer_1/kernel"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/m"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/v"
  input: "training/Adam/Pow"
  input: "training/Adam/Pow_1"
  input: "training/Adam/Identity"
  input: "training/Adam/Identity_1"
  input: "training/Adam/Identity_2"
  input: "training/Adam/Const"
  input: "training/Adam/gradients/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/Adam/update_dnn/hiddenlayer_1/bias/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "dnn/hiddenlayer_1/bias"
  input: "training/Adam/dnn/hiddenlayer_1/bias/m"
  input: "training/Adam/dnn/hiddenlayer_1/bias/v"
  input: "training/Adam/Pow"
  input: "training/Adam/Pow_1"
  input: "training/Adam/Identity"
  input: "training/Adam/Identity_1"
  input: "training/Adam/Identity_2"
  input: "training/Adam/Const"
  input: "training/Adam/gradients/gradients/dnn/hiddenlayer_1/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/Adam/update_dnn/hiddenlayer_2/kernel/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "dnn/hiddenlayer_2/kernel"
  input: "training/Adam/dnn/hiddenlayer_2/kernel/m"
  input: "training/Adam/dnn/hiddenlayer_2/kernel/v"
  input: "training/Adam/Pow"
  input: "training/Adam/Pow_1"
  input: "training/Adam/Identity"
  input: "training/Adam/Identity_1"
  input: "training/Adam/Identity_2"
  input: "training/Adam/Const"
  input: "training/Adam/gradients/gradients/dnn/hiddenlayer_2/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/Adam/update_dnn/hiddenlayer_2/bias/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "dnn/hiddenlayer_2/bias"
  input: "training/Adam/dnn/hiddenlayer_2/bias/m"
  input: "training/Adam/dnn/hiddenlayer_2/bias/v"
  input: "training/Adam/Pow"
  input: "training/Adam/Pow_1"
  input: "training/Adam/Identity"
  input: "training/Adam/Identity_1"
  input: "training/Adam/Identity_2"
  input: "training/Adam/Const"
  input: "training/Adam/gradients/gradients/dnn/hiddenlayer_2/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/Adam/update_dnn/logits/kernel/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "dnn/logits/kernel"
  input: "training/Adam/dnn/logits/kernel/m"
  input: "training/Adam/dnn/logits/kernel/v"
  input: "training/Adam/Pow"
  input: "training/Adam/Pow_1"
  input: "training/Adam/Identity"
  input: "training/Adam/Identity_1"
  input: "training/Adam/Identity_2"
  input: "training/Adam/Const"
  input: "training/Adam/gradients/gradients/dnn/logits/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/Adam/update_dnn/logits/bias/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "dnn/logits/bias"
  input: "training/Adam/dnn/logits/bias/m"
  input: "training/Adam/dnn/logits/bias/v"
  input: "training/Adam/Pow"
  input: "training/Adam/Pow_1"
  input: "training/Adam/Identity"
  input: "training/Adam/Identity_1"
  input: "training/Adam/Identity_2"
  input: "training/Adam/Const"
  input: "training/Adam/gradients/gradients/dnn/logits/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/Adam/Const"
  op: "Const"
  input: "^training/Adam/Adam/update_dnn/hiddenlayer_0/bias/ResourceApplyAdam"
  input: "^training/Adam/Adam/update_dnn/hiddenlayer_0/kernel/ResourceApplyAdam"
  input: "^training/Adam/Adam/update_dnn/hiddenlayer_1/bias/ResourceApplyAdam"
  input: "^training/Adam/Adam/update_dnn/hiddenlayer_1/kernel/ResourceApplyAdam"
  input: "^training/Adam/Adam/update_dnn/hiddenlayer_2/bias/ResourceApplyAdam"
  input: "^training/Adam/Adam/update_dnn/hiddenlayer_2/kernel/ResourceApplyAdam"
  input: "^training/Adam/Adam/update_dnn/logits/bias/ResourceApplyAdam"
  input: "^training/Adam/Adam/update_dnn/logits/kernel/ResourceApplyAdam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/Adam/AssignAddVariableOp"
  op: "AssignAddVariableOp"
  input: "global_step"
  input: "training/Adam/Adam/Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "training/Adam/Adam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "global_step"
  input: "^training/Adam/Adam/AssignAddVariableOp"
  input: "^training/Adam/Adam/update_dnn/hiddenlayer_0/bias/ResourceApplyAdam"
  input: "^training/Adam/Adam/update_dnn/hiddenlayer_0/kernel/ResourceApplyAdam"
  input: "^training/Adam/Adam/update_dnn/hiddenlayer_1/bias/ResourceApplyAdam"
  input: "^training/Adam/Adam/update_dnn/hiddenlayer_1/kernel/ResourceApplyAdam"
  input: "^training/Adam/Adam/update_dnn/hiddenlayer_2/bias/ResourceApplyAdam"
  input: "^training/Adam/Adam/update_dnn/hiddenlayer_2/kernel/ResourceApplyAdam"
  input: "^training/Adam/Adam/update_dnn/logits/bias/ResourceApplyAdam"
  input: "^training/Adam/Adam/update_dnn/logits/kernel/ResourceApplyAdam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "training/group_deps"
  op: "NoOp"
  input: "^training/Adam/Adam/AssignAddVariableOp"
}
node {
  name: "loss/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "loss"
      }
    }
  }
}
node {
  name: "loss"
  op: "ScalarSummary"
  input: "loss/tags"
  input: "head/losses/weighted_loss/value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "init"
  op: "NoOp"
  input: "^dnn/hiddenlayer_0/bias/Assign"
  input: "^dnn/hiddenlayer_0/kernel/Assign"
  input: "^dnn/hiddenlayer_1/bias/Assign"
  input: "^dnn/hiddenlayer_1/kernel/Assign"
  input: "^dnn/hiddenlayer_2/bias/Assign"
  input: "^dnn/hiddenlayer_2/kernel/Assign"
  input: "^dnn/logits/bias/Assign"
  input: "^dnn/logits/kernel/Assign"
  input: "^global_step/Assign"
  input: "^training/Adam/beta_1/Assign"
  input: "^training/Adam/beta_2/Assign"
  input: "^training/Adam/decay/Assign"
  input: "^training/Adam/dnn/hiddenlayer_0/bias/m/Assign"
  input: "^training/Adam/dnn/hiddenlayer_0/bias/v/Assign"
  input: "^training/Adam/dnn/hiddenlayer_0/kernel/m/Assign"
  input: "^training/Adam/dnn/hiddenlayer_0/kernel/v/Assign"
  input: "^training/Adam/dnn/hiddenlayer_1/bias/m/Assign"
  input: "^training/Adam/dnn/hiddenlayer_1/bias/v/Assign"
  input: "^training/Adam/dnn/hiddenlayer_1/kernel/m/Assign"
  input: "^training/Adam/dnn/hiddenlayer_1/kernel/v/Assign"
  input: "^training/Adam/dnn/hiddenlayer_2/bias/m/Assign"
  input: "^training/Adam/dnn/hiddenlayer_2/bias/v/Assign"
  input: "^training/Adam/dnn/hiddenlayer_2/kernel/m/Assign"
  input: "^training/Adam/dnn/hiddenlayer_2/kernel/v/Assign"
  input: "^training/Adam/dnn/logits/bias/m/Assign"
  input: "^training/Adam/dnn/logits/bias/v/Assign"
  input: "^training/Adam/dnn/logits/kernel/m/Assign"
  input: "^training/Adam/dnn/logits/kernel/v/Assign"
  input: "^training/Adam/learning_rate/Assign"
}
node {
  name: "init_1"
  op: "NoOp"
}
node {
  name: "group_deps"
  op: "NoOp"
  input: "^init"
  input: "^init_1"
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "global_step"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_1"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_0/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_2"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_0/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_3"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_1/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_4"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_1/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_5"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_2/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_6"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_2/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_7"
  op: "VarIsInitializedOp"
  input: "dnn/logits/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_8"
  op: "VarIsInitializedOp"
  input: "dnn/logits/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_9"
  op: "VarIsInitializedOp"
  input: "training/Adam/beta_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_10"
  op: "VarIsInitializedOp"
  input: "training/Adam/beta_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_11"
  op: "VarIsInitializedOp"
  input: "training/Adam/decay"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_12"
  op: "VarIsInitializedOp"
  input: "training/Adam/learning_rate"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_13"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_14"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_0/bias/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_15"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_16"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_1/bias/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_17"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_2/kernel/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_18"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_2/bias/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_19"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/logits/kernel/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_20"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/logits/bias/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_21"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_22"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_0/bias/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_23"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_24"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_1/bias/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_25"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_2/kernel/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_26"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_2/bias/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_27"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/logits/kernel/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_28"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/logits/bias/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/stack"
  op: "Pack"
  input: "report_uninitialized_variables/VarIsInitializedOp"
  input: "report_uninitialized_variables/VarIsInitializedOp_1"
  input: "report_uninitialized_variables/VarIsInitializedOp_2"
  input: "report_uninitialized_variables/VarIsInitializedOp_3"
  input: "report_uninitialized_variables/VarIsInitializedOp_4"
  input: "report_uninitialized_variables/VarIsInitializedOp_5"
  input: "report_uninitialized_variables/VarIsInitializedOp_6"
  input: "report_uninitialized_variables/VarIsInitializedOp_7"
  input: "report_uninitialized_variables/VarIsInitializedOp_8"
  input: "report_uninitialized_variables/VarIsInitializedOp_9"
  input: "report_uninitialized_variables/VarIsInitializedOp_10"
  input: "report_uninitialized_variables/VarIsInitializedOp_11"
  input: "report_uninitialized_variables/VarIsInitializedOp_12"
  input: "report_uninitialized_variables/VarIsInitializedOp_13"
  input: "report_uninitialized_variables/VarIsInitializedOp_14"
  input: "report_uninitialized_variables/VarIsInitializedOp_15"
  input: "report_uninitialized_variables/VarIsInitializedOp_16"
  input: "report_uninitialized_variables/VarIsInitializedOp_17"
  input: "report_uninitialized_variables/VarIsInitializedOp_18"
  input: "report_uninitialized_variables/VarIsInitializedOp_19"
  input: "report_uninitialized_variables/VarIsInitializedOp_20"
  input: "report_uninitialized_variables/VarIsInitializedOp_21"
  input: "report_uninitialized_variables/VarIsInitializedOp_22"
  input: "report_uninitialized_variables/VarIsInitializedOp_23"
  input: "report_uninitialized_variables/VarIsInitializedOp_24"
  input: "report_uninitialized_variables/VarIsInitializedOp_25"
  input: "report_uninitialized_variables/VarIsInitializedOp_26"
  input: "report_uninitialized_variables/VarIsInitializedOp_27"
  input: "report_uninitialized_variables/VarIsInitializedOp_28"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 29
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 29
          }
        }
        string_val: "global_step"
        string_val: "dnn/hiddenlayer_0/kernel"
        string_val: "dnn/hiddenlayer_0/bias"
        string_val: "dnn/hiddenlayer_1/kernel"
        string_val: "dnn/hiddenlayer_1/bias"
        string_val: "dnn/hiddenlayer_2/kernel"
        string_val: "dnn/hiddenlayer_2/bias"
        string_val: "dnn/logits/kernel"
        string_val: "dnn/logits/bias"
        string_val: "training/Adam/beta_1"
        string_val: "training/Adam/beta_2"
        string_val: "training/Adam/decay"
        string_val: "training/Adam/learning_rate"
        string_val: "training/Adam/dnn/hiddenlayer_0/kernel/m"
        string_val: "training/Adam/dnn/hiddenlayer_0/bias/m"
        string_val: "training/Adam/dnn/hiddenlayer_1/kernel/m"
        string_val: "training/Adam/dnn/hiddenlayer_1/bias/m"
        string_val: "training/Adam/dnn/hiddenlayer_2/kernel/m"
        string_val: "training/Adam/dnn/hiddenlayer_2/bias/m"
        string_val: "training/Adam/dnn/logits/kernel/m"
        string_val: "training/Adam/dnn/logits/bias/m"
        string_val: "training/Adam/dnn/hiddenlayer_0/kernel/v"
        string_val: "training/Adam/dnn/hiddenlayer_0/bias/v"
        string_val: "training/Adam/dnn/hiddenlayer_1/kernel/v"
        string_val: "training/Adam/dnn/hiddenlayer_1/bias/v"
        string_val: "training/Adam/dnn/hiddenlayer_2/kernel/v"
        string_val: "training/Adam/dnn/hiddenlayer_2/bias/v"
        string_val: "training/Adam/dnn/logits/kernel/v"
        string_val: "training/Adam/dnn/logits/bias/v"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 29
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables/boolean_mask/strided_slice"
  input: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 29
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 29
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_2"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/values_1"
  op: "Pack"
  input: "report_uninitialized_variables/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables/boolean_mask/concat/values_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2"
  input: "report_uninitialized_variables/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables/Const"
  input: "report_uninitialized_variables/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables/LogicalNot"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/GatherV2/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/GatherV2"
  op: "GatherV2"
  input: "report_uninitialized_variables/boolean_mask/Reshape"
  input: "report_uninitialized_variables/boolean_mask/Squeeze"
  input: "report_uninitialized_variables/boolean_mask/GatherV2/axis"
  device: "/device:CPU:0"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_resources/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/GatherV2"
  input: "report_uninitialized_resources/Const"
  input: "concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "global_step"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_1"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_0/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_2"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_0/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_3"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_1/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_4"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_1/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_5"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_2/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_6"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_2/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_7"
  op: "VarIsInitializedOp"
  input: "dnn/logits/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_8"
  op: "VarIsInitializedOp"
  input: "dnn/logits/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_9"
  op: "VarIsInitializedOp"
  input: "training/Adam/beta_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_10"
  op: "VarIsInitializedOp"
  input: "training/Adam/beta_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_11"
  op: "VarIsInitializedOp"
  input: "training/Adam/decay"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_12"
  op: "VarIsInitializedOp"
  input: "training/Adam/learning_rate"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_13"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_14"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_0/bias/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_15"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_16"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_1/bias/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_17"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_2/kernel/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_18"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_2/bias/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_19"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/logits/kernel/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_20"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/logits/bias/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_21"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_22"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_0/bias/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_23"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_24"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_1/bias/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_25"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_2/kernel/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_26"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_2/bias/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_27"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/logits/kernel/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_28"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/logits/bias/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/stack"
  op: "Pack"
  input: "report_uninitialized_variables_1/VarIsInitializedOp"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_1"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_2"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_3"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_4"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_5"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_6"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_7"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_8"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_9"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_10"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_11"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_12"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_13"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_14"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_15"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_16"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_17"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_18"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_19"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_20"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_21"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_22"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_23"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_24"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_25"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_26"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_27"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_28"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 29
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables_1/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 29
          }
        }
        string_val: "global_step"
        string_val: "dnn/hiddenlayer_0/kernel"
        string_val: "dnn/hiddenlayer_0/bias"
        string_val: "dnn/hiddenlayer_1/kernel"
        string_val: "dnn/hiddenlayer_1/bias"
        string_val: "dnn/hiddenlayer_2/kernel"
        string_val: "dnn/hiddenlayer_2/bias"
        string_val: "dnn/logits/kernel"
        string_val: "dnn/logits/bias"
        string_val: "training/Adam/beta_1"
        string_val: "training/Adam/beta_2"
        string_val: "training/Adam/decay"
        string_val: "training/Adam/learning_rate"
        string_val: "training/Adam/dnn/hiddenlayer_0/kernel/m"
        string_val: "training/Adam/dnn/hiddenlayer_0/bias/m"
        string_val: "training/Adam/dnn/hiddenlayer_1/kernel/m"
        string_val: "training/Adam/dnn/hiddenlayer_1/bias/m"
        string_val: "training/Adam/dnn/hiddenlayer_2/kernel/m"
        string_val: "training/Adam/dnn/hiddenlayer_2/bias/m"
        string_val: "training/Adam/dnn/logits/kernel/m"
        string_val: "training/Adam/dnn/logits/bias/m"
        string_val: "training/Adam/dnn/hiddenlayer_0/kernel/v"
        string_val: "training/Adam/dnn/hiddenlayer_0/bias/v"
        string_val: "training/Adam/dnn/hiddenlayer_1/kernel/v"
        string_val: "training/Adam/dnn/hiddenlayer_1/bias/v"
        string_val: "training/Adam/dnn/hiddenlayer_2/kernel/v"
        string_val: "training/Adam/dnn/hiddenlayer_2/bias/v"
        string_val: "training/Adam/dnn/logits/kernel/v"
        string_val: "training/Adam/dnn/logits/bias/v"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 29
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice"
  input: "report_uninitialized_variables_1/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 29
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 29
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape_2"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat/values_1"
  op: "Pack"
  input: "report_uninitialized_variables_1/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables_1/boolean_mask/concat/values_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2"
  input: "report_uninitialized_variables_1/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables_1/Const"
  input: "report_uninitialized_variables_1/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables_1/LogicalNot"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables_1/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/GatherV2/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/GatherV2"
  op: "GatherV2"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape"
  input: "report_uninitialized_variables_1/boolean_mask/Squeeze"
  input: "report_uninitialized_variables_1/boolean_mask/GatherV2/axis"
  device: "/device:CPU:0"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_resources_1/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "concat_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "concat_1"
  op: "ConcatV2"
  input: "report_uninitialized_variables_1/boolean_mask/GatherV2"
  input: "report_uninitialized_resources_1/Const"
  input: "concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "init_2"
  op: "NoOp"
}
node {
  name: "init_all_tables"
  op: "NoOp"
}
node {
  name: "init_3"
  op: "NoOp"
}
node {
  name: "group_deps_1"
  op: "NoOp"
  input: "^init_2"
  input: "^init_3"
  input: "^init_all_tables"
}
node {
  name: "Merge/MergeSummary"
  op: "MergeSummary"
  input: "dnn/hiddenlayer_0/fraction_of_zero_values"
  input: "dnn/hiddenlayer_0/activation"
  input: "dnn/hiddenlayer_1/fraction_of_zero_values"
  input: "dnn/hiddenlayer_1/activation"
  input: "dnn/hiddenlayer_2/fraction_of_zero_values"
  input: "dnn/hiddenlayer_2/activation"
  input: "dnn/logits/fraction_of_zero_values"
  input: "dnn/logits/activation"
  input: "loss"
  attr {
    key: "N"
    value {
      i: 9
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/filename/input"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model"
      }
    }
  }
}
node {
  name: "save/filename"
  op: "PlaceholderWithDefault"
  input: "save/filename/input"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "save/Const"
  op: "PlaceholderWithDefault"
  input: "save/filename"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "save/StringJoin/inputs_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "_temp_35197c6b9edf465f8f5ab11773ceb757/part"
      }
    }
  }
}
node {
  name: "save/StringJoin"
  op: "StringJoin"
  input: "save/Const"
  input: "save/StringJoin/inputs_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "separator"
    value {
      s: ""
    }
  }
}
node {
  name: "save/num_shards"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "save/ShardedFilename/shard"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "save/ShardedFilename"
  op: "ShardedFilename"
  input: "save/StringJoin"
  input: "save/ShardedFilename/shard"
  input: "save/num_shards"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/SaveV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 29
          }
        }
        string_val: "dnn/hiddenlayer_0/bias"
        string_val: "dnn/hiddenlayer_0/kernel"
        string_val: "dnn/hiddenlayer_1/bias"
        string_val: "dnn/hiddenlayer_1/kernel"
        string_val: "dnn/hiddenlayer_2/bias"
        string_val: "dnn/hiddenlayer_2/kernel"
        string_val: "dnn/logits/bias"
        string_val: "dnn/logits/kernel"
        string_val: "global_step"
        string_val: "training/Adam/beta_1"
        string_val: "training/Adam/beta_2"
        string_val: "training/Adam/decay"
        string_val: "training/Adam/dnn/hiddenlayer_0/bias/m"
        string_val: "training/Adam/dnn/hiddenlayer_0/bias/v"
        string_val: "training/Adam/dnn/hiddenlayer_0/kernel/m"
        string_val: "training/Adam/dnn/hiddenlayer_0/kernel/v"
        string_val: "training/Adam/dnn/hiddenlayer_1/bias/m"
        string_val: "training/Adam/dnn/hiddenlayer_1/bias/v"
        string_val: "training/Adam/dnn/hiddenlayer_1/kernel/m"
        string_val: "training/Adam/dnn/hiddenlayer_1/kernel/v"
        string_val: "training/Adam/dnn/hiddenlayer_2/bias/m"
        string_val: "training/Adam/dnn/hiddenlayer_2/bias/v"
        string_val: "training/Adam/dnn/hiddenlayer_2/kernel/m"
        string_val: "training/Adam/dnn/hiddenlayer_2/kernel/v"
        string_val: "training/Adam/dnn/logits/bias/m"
        string_val: "training/Adam/dnn/logits/bias/v"
        string_val: "training/Adam/dnn/logits/kernel/m"
        string_val: "training/Adam/dnn/logits/kernel/v"
        string_val: "training/Adam/learning_rate"
      }
    }
  }
}
node {
  name: "save/SaveV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 29
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/SaveV2"
  op: "SaveV2"
  input: "save/ShardedFilename"
  input: "save/SaveV2/tensor_names"
  input: "save/SaveV2/shape_and_slices"
  input: "dnn/hiddenlayer_0/bias/Read/ReadVariableOp"
  input: "dnn/hiddenlayer_0/kernel/Read/ReadVariableOp"
  input: "dnn/hiddenlayer_1/bias/Read/ReadVariableOp"
  input: "dnn/hiddenlayer_1/kernel/Read/ReadVariableOp"
  input: "dnn/hiddenlayer_2/bias/Read/ReadVariableOp"
  input: "dnn/hiddenlayer_2/kernel/Read/ReadVariableOp"
  input: "dnn/logits/bias/Read/ReadVariableOp"
  input: "dnn/logits/kernel/Read/ReadVariableOp"
  input: "global_step/Read/ReadVariableOp"
  input: "training/Adam/beta_1/Read/ReadVariableOp"
  input: "training/Adam/beta_2/Read/ReadVariableOp"
  input: "training/Adam/decay/Read/ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/bias/m/Read/ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/bias/v/Read/ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/m/Read/ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/v/Read/ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/bias/m/Read/ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/bias/v/Read/ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/m/Read/ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/v/Read/ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_2/bias/m/Read/ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_2/bias/v/Read/ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_2/kernel/m/Read/ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_2/kernel/v/Read/ReadVariableOp"
  input: "training/Adam/dnn/logits/bias/m/Read/ReadVariableOp"
  input: "training/Adam/dnn/logits/bias/v/Read/ReadVariableOp"
  input: "training/Adam/dnn/logits/kernel/m/Read/ReadVariableOp"
  input: "training/Adam/dnn/logits/kernel/v/Read/ReadVariableOp"
  input: "training/Adam/learning_rate/Read/ReadVariableOp"
  device: "/device:CPU:0"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/control_dependency"
  op: "Identity"
  input: "save/ShardedFilename"
  input: "^save/SaveV2"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save/ShardedFilename"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/MergeV2Checkpoints/checkpoint_prefixes"
  op: "Pack"
  input: "save/ShardedFilename"
  input: "^save/control_dependency"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "save/MergeV2Checkpoints"
  op: "MergeV2Checkpoints"
  input: "save/MergeV2Checkpoints/checkpoint_prefixes"
  input: "save/Const"
  device: "/device:CPU:0"
  attr {
    key: "delete_old_dirs"
    value {
      b: true
    }
  }
}
node {
  name: "save/Identity"
  op: "Identity"
  input: "save/Const"
  input: "^save/MergeV2Checkpoints"
  input: "^save/control_dependency"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/RestoreV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 29
          }
        }
        string_val: "dnn/hiddenlayer_0/bias"
        string_val: "dnn/hiddenlayer_0/kernel"
        string_val: "dnn/hiddenlayer_1/bias"
        string_val: "dnn/hiddenlayer_1/kernel"
        string_val: "dnn/hiddenlayer_2/bias"
        string_val: "dnn/hiddenlayer_2/kernel"
        string_val: "dnn/logits/bias"
        string_val: "dnn/logits/kernel"
        string_val: "global_step"
        string_val: "training/Adam/beta_1"
        string_val: "training/Adam/beta_2"
        string_val: "training/Adam/decay"
        string_val: "training/Adam/dnn/hiddenlayer_0/bias/m"
        string_val: "training/Adam/dnn/hiddenlayer_0/bias/v"
        string_val: "training/Adam/dnn/hiddenlayer_0/kernel/m"
        string_val: "training/Adam/dnn/hiddenlayer_0/kernel/v"
        string_val: "training/Adam/dnn/hiddenlayer_1/bias/m"
        string_val: "training/Adam/dnn/hiddenlayer_1/bias/v"
        string_val: "training/Adam/dnn/hiddenlayer_1/kernel/m"
        string_val: "training/Adam/dnn/hiddenlayer_1/kernel/v"
        string_val: "training/Adam/dnn/hiddenlayer_2/bias/m"
        string_val: "training/Adam/dnn/hiddenlayer_2/bias/v"
        string_val: "training/Adam/dnn/hiddenlayer_2/kernel/m"
        string_val: "training/Adam/dnn/hiddenlayer_2/kernel/v"
        string_val: "training/Adam/dnn/logits/bias/m"
        string_val: "training/Adam/dnn/logits/bias/v"
        string_val: "training/Adam/dnn/logits/kernel/m"
        string_val: "training/Adam/dnn/logits/kernel/v"
        string_val: "training/Adam/learning_rate"
      }
    }
  }
}
node {
  name: "save/RestoreV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 29
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 29
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2/tensor_names"
  input: "save/RestoreV2/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Identity_1"
  op: "Identity"
  input: "save/RestoreV2"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_0/bias"
  input: "save/Identity_1"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "save/Identity_2"
  op: "Identity"
  input: "save/RestoreV2:1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_1"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_0/kernel"
  input: "save/Identity_2"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "save/Identity_3"
  op: "Identity"
  input: "save/RestoreV2:2"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_2"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_1/bias"
  input: "save/Identity_3"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "save/Identity_4"
  op: "Identity"
  input: "save/RestoreV2:3"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_3"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_1/kernel"
  input: "save/Identity_4"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "save/Identity_5"
  op: "Identity"
  input: "save/RestoreV2:4"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_4"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_2/bias"
  input: "save/Identity_5"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "save/Identity_6"
  op: "Identity"
  input: "save/RestoreV2:5"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_5"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_2/kernel"
  input: "save/Identity_6"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "save/Identity_7"
  op: "Identity"
  input: "save/RestoreV2:6"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_6"
  op: "AssignVariableOp"
  input: "dnn/logits/bias"
  input: "save/Identity_7"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "save/Identity_8"
  op: "Identity"
  input: "save/RestoreV2:7"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_7"
  op: "AssignVariableOp"
  input: "dnn/logits/kernel"
  input: "save/Identity_8"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "save/Identity_9"
  op: "Identity"
  input: "save/RestoreV2:8"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_8"
  op: "AssignVariableOp"
  input: "global_step"
  input: "save/Identity_9"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "save/Identity_10"
  op: "Identity"
  input: "save/RestoreV2:9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_9"
  op: "AssignVariableOp"
  input: "training/Adam/beta_1"
  input: "save/Identity_10"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_11"
  op: "Identity"
  input: "save/RestoreV2:10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_10"
  op: "AssignVariableOp"
  input: "training/Adam/beta_2"
  input: "save/Identity_11"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_12"
  op: "Identity"
  input: "save/RestoreV2:11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_11"
  op: "AssignVariableOp"
  input: "training/Adam/decay"
  input: "save/Identity_12"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_13"
  op: "Identity"
  input: "save/RestoreV2:12"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_12"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/bias/m"
  input: "save/Identity_13"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "save/Identity_14"
  op: "Identity"
  input: "save/RestoreV2:13"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_13"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/bias/v"
  input: "save/Identity_14"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "save/Identity_15"
  op: "Identity"
  input: "save/RestoreV2:14"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_14"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/m"
  input: "save/Identity_15"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "save/Identity_16"
  op: "Identity"
  input: "save/RestoreV2:15"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_15"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/v"
  input: "save/Identity_16"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "save/Identity_17"
  op: "Identity"
  input: "save/RestoreV2:16"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_16"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/bias/m"
  input: "save/Identity_17"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "save/Identity_18"
  op: "Identity"
  input: "save/RestoreV2:17"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_17"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/bias/v"
  input: "save/Identity_18"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "save/Identity_19"
  op: "Identity"
  input: "save/RestoreV2:18"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_18"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/m"
  input: "save/Identity_19"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "save/Identity_20"
  op: "Identity"
  input: "save/RestoreV2:19"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_19"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/v"
  input: "save/Identity_20"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "save/Identity_21"
  op: "Identity"
  input: "save/RestoreV2:20"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_20"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_2/bias/m"
  input: "save/Identity_21"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "save/Identity_22"
  op: "Identity"
  input: "save/RestoreV2:21"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_21"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_2/bias/v"
  input: "save/Identity_22"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "save/Identity_23"
  op: "Identity"
  input: "save/RestoreV2:22"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_22"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_2/kernel/m"
  input: "save/Identity_23"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "save/Identity_24"
  op: "Identity"
  input: "save/RestoreV2:23"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_23"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_2/kernel/v"
  input: "save/Identity_24"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "save/Identity_25"
  op: "Identity"
  input: "save/RestoreV2:24"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_24"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/logits/bias/m"
  input: "save/Identity_25"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "save/Identity_26"
  op: "Identity"
  input: "save/RestoreV2:25"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_25"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/logits/bias/v"
  input: "save/Identity_26"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "save/Identity_27"
  op: "Identity"
  input: "save/RestoreV2:26"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_26"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/logits/kernel/m"
  input: "save/Identity_27"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "save/Identity_28"
  op: "Identity"
  input: "save/RestoreV2:27"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_27"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/logits/kernel/v"
  input: "save/Identity_28"
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "save/Identity_29"
  op: "Identity"
  input: "save/RestoreV2:28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_28"
  op: "AssignVariableOp"
  input: "training/Adam/learning_rate"
  input: "save/Identity_29"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/restore_shard"
  op: "NoOp"
  input: "^save/AssignVariableOp"
  input: "^save/AssignVariableOp_1"
  input: "^save/AssignVariableOp_10"
  input: "^save/AssignVariableOp_11"
  input: "^save/AssignVariableOp_12"
  input: "^save/AssignVariableOp_13"
  input: "^save/AssignVariableOp_14"
  input: "^save/AssignVariableOp_15"
  input: "^save/AssignVariableOp_16"
  input: "^save/AssignVariableOp_17"
  input: "^save/AssignVariableOp_18"
  input: "^save/AssignVariableOp_19"
  input: "^save/AssignVariableOp_2"
  input: "^save/AssignVariableOp_20"
  input: "^save/AssignVariableOp_21"
  input: "^save/AssignVariableOp_22"
  input: "^save/AssignVariableOp_23"
  input: "^save/AssignVariableOp_24"
  input: "^save/AssignVariableOp_25"
  input: "^save/AssignVariableOp_26"
  input: "^save/AssignVariableOp_27"
  input: "^save/AssignVariableOp_28"
  input: "^save/AssignVariableOp_3"
  input: "^save/AssignVariableOp_4"
  input: "^save/AssignVariableOp_5"
  input: "^save/AssignVariableOp_6"
  input: "^save/AssignVariableOp_7"
  input: "^save/AssignVariableOp_8"
  input: "^save/AssignVariableOp_9"
}
node {
  name: "save/restore_all"
  op: "NoOp"
  input: "^save/restore_shard"
}
library {
  function {
    signature {
      name: "dnn_zero_fraction_3_cond_true_57658"
      input_arg {
        name: "count_nonzero_notequal_dnn_logits_biasadd"
        type: DT_DOUBLE
      }
      output_arg {
        name: "cast"
        type: DT_INT64
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
    }
    node_def {
      name: "count_nonzero/zeros"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_DOUBLE
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_DOUBLE
            tensor_shape {
            }
            double_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "count_nonzero/NotEqual"
      op: "NotEqual"
      input: "count_nonzero_notequal_dnn_logits_biasadd"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_DOUBLE
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "count_nonzero/Cast"
      op: "Cast"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node_def {
      name: "count_nonzero/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "count_nonzero/nonzero_count"
      op: "Sum"
      input: "count_nonzero/Cast:y:0"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "Cast"
      op: "Cast"
      input: "count_nonzero/nonzero_count:output:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_DOUBLE
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "count_nonzero/Cast:y:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "count_nonzero/nonzero_count:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    ret {
      key: "cast"
      value: "Cast:y:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 3
            }
          }
        }
      }
    }
    arg_attr {
      value {
      }
    }
  }
  function {
    signature {
      name: "dnn_zero_fraction_2_cond_true_57589"
      input_arg {
        name: "count_nonzero_notequal_dnn_hiddenlayer_2_relu"
        type: DT_DOUBLE
      }
      output_arg {
        name: "cast"
        type: DT_INT64
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
    }
    node_def {
      name: "count_nonzero/zeros"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_DOUBLE
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_DOUBLE
            tensor_shape {
            }
            double_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "count_nonzero/NotEqual"
      op: "NotEqual"
      input: "count_nonzero_notequal_dnn_hiddenlayer_2_relu"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_DOUBLE
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 19
              }
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "count_nonzero/Cast"
      op: "Cast"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 19
              }
            }
          }
        }
      }
    }
    node_def {
      name: "count_nonzero/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "count_nonzero/nonzero_count"
      op: "Sum"
      input: "count_nonzero/Cast:y:0"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "Cast"
      op: "Cast"
      input: "count_nonzero/nonzero_count:output:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_DOUBLE
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "count_nonzero/Cast:y:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "count_nonzero/nonzero_count:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    ret {
      key: "cast"
      value: "Cast:y:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 19
            }
          }
        }
      }
    }
    arg_attr {
      value {
      }
    }
  }
  function {
    signature {
      name: "dnn_zero_fraction_3_cond_false_57659"
      input_arg {
        name: "count_nonzero_notequal_dnn_logits_biasadd"
        type: DT_DOUBLE
      }
      output_arg {
        name: "count_nonzero_nonzero_count"
        type: DT_INT64
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone"
        type: DT_VARIANT
      }
    }
    node_def {
      name: "count_nonzero/zeros"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_DOUBLE
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_DOUBLE
            tensor_shape {
            }
            double_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "count_nonzero/NotEqual"
      op: "NotEqual"
      input: "count_nonzero_notequal_dnn_logits_biasadd"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_DOUBLE
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "count_nonzero/Cast"
      op: "Cast"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node_def {
      name: "count_nonzero/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "count_nonzero/nonzero_count"
      op: "Sum"
      input: "count_nonzero/Cast:y:0"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_DOUBLE
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "count_nonzero/Cast:y:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT64
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalNone"
      op: "OptionalNone"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    ret {
      key: "count_nonzero_nonzero_count"
      value: "count_nonzero/nonzero_count:output:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalnone"
      value: "OptionalNone:optional:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 3
            }
          }
        }
      }
    }
    arg_attr {
      value {
      }
    }
  }
  function {
    signature {
      name: "dnn_zero_fraction_cond_false_57450"
      input_arg {
        name: "count_nonzero_notequal_dnn_hiddenlayer_0_relu"
        type: DT_DOUBLE
      }
      output_arg {
        name: "count_nonzero_nonzero_count"
        type: DT_INT64
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone"
        type: DT_VARIANT
      }
    }
    node_def {
      name: "count_nonzero/zeros"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_DOUBLE
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_DOUBLE
            tensor_shape {
            }
            double_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "count_nonzero/NotEqual"
      op: "NotEqual"
      input: "count_nonzero_notequal_dnn_hiddenlayer_0_relu"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_DOUBLE
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 37
              }
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "count_nonzero/Cast"
      op: "Cast"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 37
              }
            }
          }
        }
      }
    }
    node_def {
      name: "count_nonzero/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "count_nonzero/nonzero_count"
      op: "Sum"
      input: "count_nonzero/Cast:y:0"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_DOUBLE
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "count_nonzero/Cast:y:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT64
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalNone"
      op: "OptionalNone"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    ret {
      key: "count_nonzero_nonzero_count"
      value: "count_nonzero/nonzero_count:output:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalnone"
      value: "OptionalNone:optional:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 37
            }
          }
        }
      }
    }
    arg_attr {
      value {
      }
    }
  }
  function {
    signature {
      name: "dnn_zero_fraction_1_cond_false_57520"
      input_arg {
        name: "count_nonzero_notequal_dnn_hiddenlayer_1_relu"
        type: DT_DOUBLE
      }
      output_arg {
        name: "count_nonzero_nonzero_count"
        type: DT_INT64
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone"
        type: DT_VARIANT
      }
    }
    node_def {
      name: "count_nonzero/zeros"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_DOUBLE
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_DOUBLE
            tensor_shape {
            }
            double_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "count_nonzero/NotEqual"
      op: "NotEqual"
      input: "count_nonzero_notequal_dnn_hiddenlayer_1_relu"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_DOUBLE
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 30
              }
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "count_nonzero/Cast"
      op: "Cast"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 30
              }
            }
          }
        }
      }
    }
    node_def {
      name: "count_nonzero/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "count_nonzero/nonzero_count"
      op: "Sum"
      input: "count_nonzero/Cast:y:0"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_DOUBLE
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "count_nonzero/Cast:y:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT64
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalNone"
      op: "OptionalNone"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    ret {
      key: "count_nonzero_nonzero_count"
      value: "count_nonzero/nonzero_count:output:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalnone"
      value: "OptionalNone:optional:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 30
            }
          }
        }
      }
    }
    arg_attr {
      value {
      }
    }
  }
  function {
    signature {
      name: "global_step_cond_false_55613"
      input_arg {
        name: "placeholder"
        type: DT_RESOURCE
      }
      input_arg {
        name: "global_step_initializer_zeros_0"
        type: DT_INT64
      }
      output_arg {
        name: "global_step_initializer_zeros"
        type: DT_INT64
      }
    }
    ret {
      key: "global_step_initializer_zeros"
      value: "global_step_initializer_zeros_0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            unknown_rank: true
          }
          shape {
          }
        }
      }
    }
    arg_attr {
      value {
      }
    }
    arg_attr {
      key: 1
      value {
      }
    }
  }
  function {
    signature {
      name: "dnn_zero_fraction_2_cond_false_57590"
      input_arg {
        name: "count_nonzero_notequal_dnn_hiddenlayer_2_relu"
        type: DT_DOUBLE
      }
      output_arg {
        name: "count_nonzero_nonzero_count"
        type: DT_INT64
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone"
        type: DT_VARIANT
      }
    }
    node_def {
      name: "count_nonzero/zeros"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_DOUBLE
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_DOUBLE
            tensor_shape {
            }
            double_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "count_nonzero/NotEqual"
      op: "NotEqual"
      input: "count_nonzero_notequal_dnn_hiddenlayer_2_relu"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_DOUBLE
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 19
              }
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "count_nonzero/Cast"
      op: "Cast"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 19
              }
            }
          }
        }
      }
    }
    node_def {
      name: "count_nonzero/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "count_nonzero/nonzero_count"
      op: "Sum"
      input: "count_nonzero/Cast:y:0"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_DOUBLE
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "count_nonzero/Cast:y:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT64
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalNone"
      op: "OptionalNone"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    ret {
      key: "count_nonzero_nonzero_count"
      value: "count_nonzero/nonzero_count:output:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalnone"
      value: "OptionalNone:optional:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 19
            }
          }
        }
      }
    }
    arg_attr {
      value {
      }
    }
  }
  function {
    signature {
      name: "dnn_zero_fraction_cond_true_57449"
      input_arg {
        name: "count_nonzero_notequal_dnn_hiddenlayer_0_relu"
        type: DT_DOUBLE
      }
      output_arg {
        name: "cast"
        type: DT_INT64
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
    }
    node_def {
      name: "count_nonzero/zeros"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_DOUBLE
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_DOUBLE
            tensor_shape {
            }
            double_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "count_nonzero/NotEqual"
      op: "NotEqual"
      input: "count_nonzero_notequal_dnn_hiddenlayer_0_relu"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_DOUBLE
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 37
              }
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "count_nonzero/Cast"
      op: "Cast"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 37
              }
            }
          }
        }
      }
    }
    node_def {
      name: "count_nonzero/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "count_nonzero/nonzero_count"
      op: "Sum"
      input: "count_nonzero/Cast:y:0"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "Cast"
      op: "Cast"
      input: "count_nonzero/nonzero_count:output:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_DOUBLE
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "count_nonzero/Cast:y:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "count_nonzero/nonzero_count:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    ret {
      key: "cast"
      value: "Cast:y:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 37
            }
          }
        }
      }
    }
    arg_attr {
      value {
      }
    }
  }
  function {
    signature {
      name: "dnn_zero_fraction_1_cond_true_57519"
      input_arg {
        name: "count_nonzero_notequal_dnn_hiddenlayer_1_relu"
        type: DT_DOUBLE
      }
      output_arg {
        name: "cast"
        type: DT_INT64
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
    }
    node_def {
      name: "count_nonzero/zeros"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_DOUBLE
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_DOUBLE
            tensor_shape {
            }
            double_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "count_nonzero/NotEqual"
      op: "NotEqual"
      input: "count_nonzero_notequal_dnn_hiddenlayer_1_relu"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_DOUBLE
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 30
              }
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "count_nonzero/Cast"
      op: "Cast"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 30
              }
            }
          }
        }
      }
    }
    node_def {
      name: "count_nonzero/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "count_nonzero/nonzero_count"
      op: "Sum"
      input: "count_nonzero/Cast:y:0"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "Cast"
      op: "Cast"
      input: "count_nonzero/nonzero_count:output:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_DOUBLE
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "count_nonzero/Cast:y:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "count_nonzero/nonzero_count:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    ret {
      key: "cast"
      value: "Cast:y:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 30
            }
          }
        }
      }
    }
    arg_attr {
      value {
      }
    }
  }
  function {
    signature {
      name: "global_step_cond_true_55612"
      input_arg {
        name: "read_readvariableop_global_step"
        type: DT_RESOURCE
      }
      input_arg {
        name: "placeholder"
        type: DT_INT64
      }
      output_arg {
        name: "identity"
        type: DT_INT64
      }
      is_stateful: true
    }
    node_def {
      name: "Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "read_readvariableop_global_step"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "Read/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            unknown_rank: true
          }
          shape {
          }
        }
      }
    }
    arg_attr {
      value {
      }
    }
    arg_attr {
      key: 1
      value {
      }
    }
  }
}
versions {
  producer: 119
  min_consumer: 12
}
